
SensorDemo_BLE_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800e370  0800e370  0001e370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9e0  0800e9e0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9e0  0800e9e0  0001e9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9e8  0800e9e8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9e8  0800e9e8  0001e9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9ec  0800e9ec  0001e9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e9f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e14  200001ec  0800ebdc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001000  0800ebdc  00021000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000253db  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000082  00000000  00000000  0004563a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000261ce  00000000  00000000  000456bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000047c3  00000000  00000000  0006b88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001f50  00000000  00000000  00070050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe58d  00000000  00000000  00071fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000184b  00000000  00000000  0017052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c725  00000000  00000000  00171d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009738  00000000  00000000  0019e4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e358 	.word	0x0800e358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800e358 	.word	0x0800e358

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f003 f91a 	bl	8004180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f00b f951 	bl	800c218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f002 fbc7 	bl	8003708 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000f88:	0800e9f0 	.word	0x0800e9f0
  ldr r2, =_sbss
 8000f8c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000f90:	20001000 	.word	0x20001000

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>

08000f96 <linear_interpolation>:
  float x1;
  float y1;
} lin_t;

float linear_interpolation(lin_t *lin, int16_t x)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fce:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 6a00 	vldr	s12, [r3]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fde:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8000fe2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ffa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ffe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8001016:	f000 f8bd 	bl	8001194 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800101a:	2000      	movs	r0, #0
 800101c:	f002 ff9a 	bl	8003f54 <BSP_PB_GetState>
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b42      	ldr	r3, [pc, #264]	; (8001130 <MX_BlueNRG_2_Init+0x120>)
 8001026:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8001028:	2100      	movs	r1, #0
 800102a:	4842      	ldr	r0, [pc, #264]	; (8001134 <MX_BlueNRG_2_Init+0x124>)
 800102c:	f009 ff9a 	bl	800af64 <hci_init>

  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8001030:	f000 f8be 	bl	80011b0 <Sensor_DeviceInit>
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <MX_BlueNRG_2_Init+0x36>
  {
    BSP_LED_On(LED2);
 800103e:	2000      	movs	r0, #0
 8001040:	f002 feea 	bl	8003e18 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8001044:	e7fe      	b.n	8001044 <MX_BlueNRG_2_Init+0x34>
  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */
  /* Initialize mems driver interface */

      dev_ctx.write_reg = platform_write;
 8001046:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 8001048:	4a3c      	ldr	r2, [pc, #240]	; (800113c <MX_BlueNRG_2_Init+0x12c>)
 800104a:	601a      	str	r2, [r3, #0]
      dev_ctx.read_reg = platform_read;
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 800104e:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <MX_BlueNRG_2_Init+0x130>)
 8001050:	605a      	str	r2, [r3, #4]
      dev_ctx.mdelay = HAL_Delay;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 8001054:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <MX_BlueNRG_2_Init+0x134>)
 8001056:	609a      	str	r2, [r3, #8]
      dev_ctx.handle = &hi2c1;
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 800105a:	4a3b      	ldr	r2, [pc, #236]	; (8001148 <MX_BlueNRG_2_Init+0x138>)
 800105c:	60da      	str	r2, [r3, #12]
      /* Check device ID */
      whoamI = 0;
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <MX_BlueNRG_2_Init+0x13c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
      hts221_device_id_get(&dev_ctx, &whoamI);
 8001064:	4939      	ldr	r1, [pc, #228]	; (800114c <MX_BlueNRG_2_Init+0x13c>)
 8001066:	4834      	ldr	r0, [pc, #208]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 8001068:	f003 f95e 	bl	8004328 <hts221_device_id_get>

      if ( whoamI != HTS221_ID )
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_BlueNRG_2_Init+0x13c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2bbc      	cmp	r3, #188	; 0xbc
 8001072:	d000      	beq.n	8001076 <MX_BlueNRG_2_Init+0x66>
        while (1); /*manage here device not found */
 8001074:	e7fe      	b.n	8001074 <MX_BlueNRG_2_Init+0x64>

      /* Read humidity calibration coefficient*/
      hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 8001076:	4936      	ldr	r1, [pc, #216]	; (8001150 <MX_BlueNRG_2_Init+0x140>)
 8001078:	482f      	ldr	r0, [pc, #188]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 800107a:	f003 fa3b 	bl	80044f4 <hts221_hum_adc_point_0_get>
      hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 800107e:	4935      	ldr	r1, [pc, #212]	; (8001154 <MX_BlueNRG_2_Init+0x144>)
 8001080:	482d      	ldr	r0, [pc, #180]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 8001082:	f003 f999 	bl	80043b8 <hts221_hum_rh_point_0_get>
      hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 8001086:	4934      	ldr	r1, [pc, #208]	; (8001158 <MX_BlueNRG_2_Init+0x148>)
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 800108a:	f003 fa57 	bl	800453c <hts221_hum_adc_point_1_get>
      hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 800108e:	4933      	ldr	r1, [pc, #204]	; (800115c <MX_BlueNRG_2_Init+0x14c>)
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 8001092:	f003 f9af 	bl	80043f4 <hts221_hum_rh_point_1_get>
      /* Read temperature calibration coefficient */
      hts221_temp_adc_point_0_get(&dev_ctx, &lin_temp.x0);
 8001096:	4932      	ldr	r1, [pc, #200]	; (8001160 <MX_BlueNRG_2_Init+0x150>)
 8001098:	4827      	ldr	r0, [pc, #156]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 800109a:	f003 fa73 	bl	8004584 <hts221_temp_adc_point_0_get>
      hts221_temp_deg_point_0_get(&dev_ctx, &lin_temp.y0);
 800109e:	4931      	ldr	r1, [pc, #196]	; (8001164 <MX_BlueNRG_2_Init+0x154>)
 80010a0:	4825      	ldr	r0, [pc, #148]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 80010a2:	f003 f9c5 	bl	8004430 <hts221_temp_deg_point_0_get>
      hts221_temp_adc_point_1_get(&dev_ctx, &lin_temp.x1);
 80010a6:	4930      	ldr	r1, [pc, #192]	; (8001168 <MX_BlueNRG_2_Init+0x158>)
 80010a8:	4823      	ldr	r0, [pc, #140]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 80010aa:	f003 fa8f 	bl	80045cc <hts221_temp_adc_point_1_get>
      hts221_temp_deg_point_1_get(&dev_ctx, &lin_temp.y1);
 80010ae:	492f      	ldr	r1, [pc, #188]	; (800116c <MX_BlueNRG_2_Init+0x15c>)
 80010b0:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 80010b2:	f003 f9ee 	bl	8004492 <hts221_temp_deg_point_1_get>

      hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80010b6:	2101      	movs	r1, #1
 80010b8:	481f      	ldr	r0, [pc, #124]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 80010ba:	f003 f8c9 	bl	8004250 <hts221_block_data_update_set>
         /* Set Output Data Rate */
         hts221_data_rate_set(&dev_ctx, HTS221_ODR_1Hz);
 80010be:	2101      	movs	r1, #1
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 80010c2:	f003 f89f 	bl	8004204 <hts221_data_rate_set>
         /* Device power on */
         hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 80010c6:	2101      	movs	r1, #1
 80010c8:	481b      	ldr	r0, [pc, #108]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 80010ca:	f003 f93e 	bl	800434a <hts221_power_on_set>



      dev_ctx1.write_reg = platform_write_lps;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 80010d0:	4a28      	ldr	r2, [pc, #160]	; (8001174 <MX_BlueNRG_2_Init+0x164>)
 80010d2:	601a      	str	r2, [r3, #0]
      dev_ctx1.read_reg = platform_read_lps;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 80010d6:	4a28      	ldr	r2, [pc, #160]	; (8001178 <MX_BlueNRG_2_Init+0x168>)
 80010d8:	605a      	str	r2, [r3, #4]
      dev_ctx1.mdelay = HAL_Delay;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <MX_BlueNRG_2_Init+0x134>)
 80010de:	609a      	str	r2, [r3, #8]
      dev_ctx1.handle = &hi2c1;
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <MX_BlueNRG_2_Init+0x138>)
 80010e4:	60da      	str	r2, [r3, #12]

      whoamI1 = 0;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <MX_BlueNRG_2_Init+0x16c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
      lps22hh_device_id_get(&dev_ctx1, &whoamI1);
 80010ec:	4923      	ldr	r1, [pc, #140]	; (800117c <MX_BlueNRG_2_Init+0x16c>)
 80010ee:	4820      	ldr	r0, [pc, #128]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 80010f0:	f003 fb75 	bl	80047de <lps22hh_device_id_get>

         if ( whoamI1 != LPS22HH_ID )
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_BlueNRG_2_Init+0x16c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2bb3      	cmp	r3, #179	; 0xb3
 80010fa:	d000      	beq.n	80010fe <MX_BlueNRG_2_Init+0xee>
           while (1); /*manage here device not found */
 80010fc:	e7fe      	b.n	80010fc <MX_BlueNRG_2_Init+0xec>

         /* Restore default configuration */
         lps22hh_reset_set(&dev_ctx1, PROPERTY_ENABLE);
 80010fe:	2101      	movs	r1, #1
 8001100:	481b      	ldr	r0, [pc, #108]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 8001102:	f003 fb7d 	bl	8004800 <lps22hh_reset_set>

         do {
           lps22hh_reset_get(&dev_ctx1, &rst);
 8001106:	491e      	ldr	r1, [pc, #120]	; (8001180 <MX_BlueNRG_2_Init+0x170>)
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 800110a:	f003 fb9f 	bl	800484c <lps22hh_reset_get>
         } while (rst);
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_BlueNRG_2_Init+0x170>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f7      	bne.n	8001106 <MX_BlueNRG_2_Init+0xf6>

         /* Enable Block Data Update */
         lps22hh_block_data_update_set(&dev_ctx1, PROPERTY_ENABLE);
 8001116:	2101      	movs	r1, #1
 8001118:	4815      	ldr	r0, [pc, #84]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 800111a:	f003 fac3 	bl	80046a4 <lps22hh_block_data_update_set>
         /* Set Output Data Rate */
         lps22hh_data_rate_set(&dev_ctx1, LPS22HH_10_Hz_LOW_NOISE);
 800111e:	2112      	movs	r1, #18
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_BlueNRG_2_Init+0x160>)
 8001122:	f003 fae5 	bl	80046f0 <lps22hh_data_rate_set>



  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	080038bd 	.word	0x080038bd
 8001138:	20000610 	.word	0x20000610
 800113c:	080028f5 	.word	0x080028f5
 8001140:	08002937 	.word	0x08002937
 8001144:	08004979 	.word	0x08004979
 8001148:	20000788 	.word	0x20000788
 800114c:	2000060c 	.word	0x2000060c
 8001150:	20000630 	.word	0x20000630
 8001154:	20000634 	.word	0x20000634
 8001158:	20000638 	.word	0x20000638
 800115c:	2000063c 	.word	0x2000063c
 8001160:	20000640 	.word	0x20000640
 8001164:	20000644 	.word	0x20000644
 8001168:	20000648 	.word	0x20000648
 800116c:	2000064c 	.word	0x2000064c
 8001170:	20000620 	.word	0x20000620
 8001174:	08002979 	.word	0x08002979
 8001178:	080029b3 	.word	0x080029b3
 800117c:	2000060d 	.word	0x2000060d
 8001180:	2000060e 	.word	0x2000060e

08001184 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8001188:	f00a f866 	bl	800b258 <hci_user_evt_proc>
  User_Process();
 800118c:	f000 f8a4 	bl	80012d8 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001198:	2101      	movs	r1, #1
 800119a:	2000      	movs	r0, #0
 800119c:	f002 fe86 	bl	8003eac <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f002 fe27 	bl	8003df4 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f002 fefe 	bl	8003fa8 <BSP_COM_Init>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 80011b6:	4a45      	ldr	r2, [pc, #276]	; (80012cc <Sensor_DeviceInit+0x11c>)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c0:	6018      	str	r0, [r3, #0]
 80011c2:	3304      	adds	r3, #4
 80011c4:	8019      	strh	r1, [r3, #0]
 80011c6:	3302      	adds	r3, #2
 80011c8:	0c0a      	lsrs	r2, r1, #16
 80011ca:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 80011d0:	f009 fd46 	bl	800ac60 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 80011d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d8:	f003 fbce 	bl	8004978 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80011dc:	1d3a      	adds	r2, r7, #4
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fb32 	bl	800284c <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 80011e8:	1cf9      	adds	r1, r7, #3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <Sensor_DeviceInit+0x120>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 f921 	bl	8009436 <aci_hal_read_config_data>
 80011f4:	4603      	mov	r3, r0
 80011f6:	75bb      	strb	r3, [r7, #22]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <Sensor_DeviceInit+0x120>)
 80011fa:	795b      	ldrb	r3, [r3, #5]
 80011fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001200:	2bc0      	cmp	r3, #192	; 0xc0
 8001202:	d000      	beq.n	8001206 <Sensor_DeviceInit+0x56>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 8001204:	e7fe      	b.n	8001204 <Sensor_DeviceInit+0x54>
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8001206:	2104      	movs	r1, #4
 8001208:	2001      	movs	r0, #1
 800120a:	f008 f998 	bl	800953e <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS)
 800120e:	7dbb      	ldrb	r3, [r7, #22]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <Sensor_DeviceInit+0x68>
  {
    PRINT_DBG("Error in aci_hal_set_tx_power_level() 0x%04x\r\n", ret);
    return ret;
 8001214:	7dbb      	ldrb	r3, [r7, #22]
 8001216:	e055      	b.n	80012c4 <Sensor_DeviceInit+0x114>
    PRINT_DBG("aci_hal_set_tx_power_level() --> SUCCESS\r\n");
  }


  /* GATT Init */
  ret = aci_gatt_init();
 8001218:	f007 fdf5 	bl	8008e06 <aci_gatt_init>
 800121c:	4603      	mov	r3, r0
 800121e:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001220:	7dbb      	ldrb	r3, [r7, #22]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <Sensor_DeviceInit+0x7a>
  {
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	e04c      	b.n	80012c4 <Sensor_DeviceInit+0x114>
  {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle, &dev_name_char_handle,
 800122a:	f107 0214 	add.w	r2, r7, #20
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 0312 	add.w	r3, r7, #18
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4613      	mov	r3, r2
 800123c:	2207      	movs	r2, #7
 800123e:	2100      	movs	r1, #0
 8001240:	2001      	movs	r0, #1
 8001242:	f007 fcb8 	bl	8008bb6 <aci_gap_init>
 8001246:	4603      	mov	r3, r0
 8001248:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <Sensor_DeviceInit+0xa4>
  {
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001250:	7dbb      	ldrb	r3, [r7, #22]
 8001252:	e037      	b.n	80012c4 <Sensor_DeviceInit+0x114>
  {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8001254:	8ab8      	ldrh	r0, [r7, #20]
 8001256:	8a79      	ldrh	r1, [r7, #18]
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2307      	movs	r3, #7
 8001260:	2200      	movs	r2, #0
 8001262:	f007 ffd8 	bl	8009216 <aci_gatt_update_char_value>
 8001266:	4603      	mov	r3, r0
 8001268:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if(ret != BLE_STATUS_SUCCESS)
 800126a:	7dbb      	ldrb	r3, [r7, #22]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <Sensor_DeviceInit+0xc4>
  {
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 8001270:	7dbb      	ldrb	r3, [r7, #22]
 8001272:	e027      	b.n	80012c4 <Sensor_DeviceInit+0x114>
  {
    PRINT_DBG("aci_gatt_update_char_value() --> SUCCESS\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 8001274:	2300      	movs	r3, #0
 8001276:	9304      	str	r3, [sp, #16]
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <Sensor_DeviceInit+0x124>)
 800127a:	9303      	str	r3, [sp, #12]
 800127c:	2300      	movs	r3, #0
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2310      	movs	r3, #16
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2307      	movs	r3, #7
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2300      	movs	r3, #0
 800128a:	2201      	movs	r2, #1
 800128c:	2101      	movs	r1, #1
 800128e:	2001      	movs	r0, #1
 8001290:	f007 fbc4 	bl	8008a1c <aci_gap_set_authentication_requirement>
 8001294:	4603      	mov	r3, r0
 8001296:	75bb      	strb	r3, [r7, #22]
                                               7,
                                               16,
                                               USE_FIXED_PIN_FOR_PAIRING,
                                               123456,
                                               0x00);
  if(ret != BLE_STATUS_SUCCESS)
 8001298:	7dbb      	ldrb	r3, [r7, #22]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Sensor_DeviceInit+0xf2>
  {
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	e010      	b.n	80012c4 <Sensor_DeviceInit+0x114>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 80012a2:	f001 fbf5 	bl	8002a90 <Add_HWServW2ST_Service>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 80012aa:	7dbb      	ldrb	r3, [r7, #22]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d000      	beq.n	80012b2 <Sensor_DeviceInit+0x102>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else
  {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 80012b0:	e7fe      	b.n	80012b0 <Sensor_DeviceInit+0x100>
  }

  ret = Add_SWServW2ST_Service();
 80012b2:	f001 fccd 	bl	8002c50 <Add_SWServW2ST_Service>
 80012b6:	4603      	mov	r3, r0
 80012b8:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 80012ba:	7dbb      	ldrb	r3, [r7, #22]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d000      	beq.n	80012c2 <Sensor_DeviceInit+0x112>
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
  }
  else
  {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
 80012c0:	e7fe      	b.n	80012c0 <Sensor_DeviceInit+0x110>
  }

  return BLE_STATUS_SUCCESS;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	0800e370 	.word	0x0800e370
 80012d0:	20000208 	.word	0x20000208
 80012d4:	0001e240 	.word	0x0001e240

080012d8 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
  float data_p;
  float data_h;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 80012de:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <User_Process+0xd0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <User_Process+0x1a>
  {
	  PRINT_DBG("connected");
    Set_DeviceConnectable();
 80012e8:	f002 fa74 	bl	80037d4 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <User_Process+0xd0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f002 fdbc 	bl	8003e70 <BSP_LED_Toggle>

    if (connected)
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <User_Process+0xd4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d04f      	beq.n	80013a0 <User_Process+0xc8>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8001300:	f003 fb2e 	bl	8004960 <HAL_GetTick>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	f00a f936 	bl	800b578 <srand>

      read_temperature_and_pression(&data_t, &data_p ,&data_h);
 800130c:	1d3a      	adds	r2, r7, #4
 800130e:	f107 0108 	add.w	r1, r7, #8
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f856 	bl	80013c8 <read_temperature_and_pression>
      /* Update emulated Environmental data */
      //Set_Random_Environmental_Values(&data_t, &data_p);
      Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10), (int16_t)(data_h * 10));
 800131c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001320:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013b0 <User_Process+0xd8>
 8001324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001328:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800132c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001330:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 3a90 	vmov	r3, s15
 8001340:	b21b      	sxth	r3, r3
 8001342:	edd7 7a01 	vldr	s15, [r7, #4]
 8001346:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800134a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	ee17 2a90 	vmov	r2, s15
 8001356:	b212      	sxth	r2, r2
 8001358:	4619      	mov	r1, r3
 800135a:	ee16 0a90 	vmov	r0, s13
 800135e:	f001 feaf 	bl	80030c0 <Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <User_Process+0xdc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f918 	bl	800159c <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <User_Process+0xe0>)
 800136e:	4913      	ldr	r1, [pc, #76]	; (80013bc <User_Process+0xe4>)
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <User_Process+0xe8>)
 8001372:	f001 fcfd 	bl	8002d70 <Acc_Update>
      Quat_Update(&q_axes);
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <User_Process+0xec>)
 8001378:	f001 fd84 	bl	8002e84 <Quat_Update>

      counter ++;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <User_Process+0xdc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <User_Process+0xdc>)
 8001384:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <User_Process+0xdc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b28      	cmp	r3, #40	; 0x28
 800138c:	d104      	bne.n	8001398 <User_Process+0xc0>
        counter = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <User_Process+0xdc>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001394:	f001 f970 	bl	8002678 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8001398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139c:	f003 faec 	bl	8004978 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000001 	.word	0x20000001
 80013ac:	200007e0 	.word	0x200007e0
 80013b0:	42c80000 	.word	0x42c80000
 80013b4:	20000650 	.word	0x20000650
 80013b8:	200007fc 	.word	0x200007fc
 80013bc:	200007f0 	.word	0x200007f0
 80013c0:	200007e4 	.word	0x200007e4
 80013c4:	20000808 	.word	0x20000808

080013c8 <read_temperature_and_pression>:
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
}

void read_temperature_and_pression(float *data_t, float *data_p, float *data_h)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  hts221_reg_t reg;
  hts221_status_get(&dev_ctx, &reg.status_reg);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	485f      	ldr	r0, [pc, #380]	; (8001558 <read_temperature_and_pression+0x190>)
 80013dc:	f002 ffdb 	bl	8004396 <hts221_status_get>

  if (reg.status_reg.h_da) {
 80013e0:	7d3b      	ldrb	r3, [r7, #20]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d041      	beq.n	8001470 <read_temperature_and_pression+0xa8>
 80013ec:	4b5b      	ldr	r3, [pc, #364]	; (800155c <read_temperature_and_pression+0x194>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	801a      	strh	r2, [r3, #0]
    // Read humidity data
    memset(&data_raw_humidity, 0x00, sizeof(int16_t));
    hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 80013f2:	495a      	ldr	r1, [pc, #360]	; (800155c <read_temperature_and_pression+0x194>)
 80013f4:	4858      	ldr	r0, [pc, #352]	; (8001558 <read_temperature_and_pression+0x190>)
 80013f6:	f002 ff51 	bl	800429c <hts221_humidity_raw_get>
    humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80013fa:	4b58      	ldr	r3, [pc, #352]	; (800155c <read_temperature_and_pression+0x194>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	4619      	mov	r1, r3
 8001402:	4857      	ldr	r0, [pc, #348]	; (8001560 <read_temperature_and_pression+0x198>)
 8001404:	f7ff fdc7 	bl	8000f96 <linear_interpolation>
 8001408:	eef0 7a40 	vmov.f32	s15, s0
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <read_temperature_and_pression+0x19c>)
 800140e:	edc3 7a00 	vstr	s15, [r3]

    if (humidity_perc < 0) {
 8001412:	4b54      	ldr	r3, [pc, #336]	; (8001564 <read_temperature_and_pression+0x19c>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d503      	bpl.n	800142a <read_temperature_and_pression+0x62>
      humidity_perc = 0;
 8001422:	4b50      	ldr	r3, [pc, #320]	; (8001564 <read_temperature_and_pression+0x19c>)
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    }

    if (humidity_perc > 100) {
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <read_temperature_and_pression+0x19c>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001568 <read_temperature_and_pression+0x1a0>
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd02      	ble.n	8001444 <read_temperature_and_pression+0x7c>
      humidity_perc = 100;
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <read_temperature_and_pression+0x19c>)
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <read_temperature_and_pression+0x1a4>)
 8001442:	601a      	str	r2, [r3, #0]
    }

    sprintf((char *)tx_buffer, "Humidity [%%]:%3.2f\r\n", humidity_perc);
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <read_temperature_and_pression+0x19c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4947      	ldr	r1, [pc, #284]	; (8001570 <read_temperature_and_pression+0x1a8>)
 8001454:	4847      	ldr	r0, [pc, #284]	; (8001574 <read_temperature_and_pression+0x1ac>)
 8001456:	f00a fe23 	bl	800c0a0 <siprintf>
    HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer), 1000);
 800145a:	4846      	ldr	r0, [pc, #280]	; (8001574 <read_temperature_and_pression+0x1ac>)
 800145c:	f7fe ff08 	bl	8000270 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001468:	4942      	ldr	r1, [pc, #264]	; (8001574 <read_temperature_and_pression+0x1ac>)
 800146a:	4843      	ldr	r0, [pc, #268]	; (8001578 <read_temperature_and_pression+0x1b0>)
 800146c:	f006 fcd8 	bl	8007e20 <HAL_UART_Transmit>

  }
  *data_h=humidity_perc;
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <read_temperature_and_pression+0x19c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]

  if (reg.status_reg.t_da) {
 8001478:	7d3b      	ldrb	r3, [r7, #20]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d028      	beq.n	80014d6 <read_temperature_and_pression+0x10e>
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <read_temperature_and_pression+0x1b4>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
    /* Read temperature data */
    memset(&data_raw_temperature, 0x00, sizeof(int16_t));
    hts221_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800148a:	493c      	ldr	r1, [pc, #240]	; (800157c <read_temperature_and_pression+0x1b4>)
 800148c:	4832      	ldr	r0, [pc, #200]	; (8001558 <read_temperature_and_pression+0x190>)
 800148e:	f002 ff28 	bl	80042e2 <hts221_temperature_raw_get>
    temperature_degC = linear_interpolation(&lin_temp,
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <read_temperature_and_pression+0x1b4>)
 8001494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001498:	4619      	mov	r1, r3
 800149a:	4839      	ldr	r0, [pc, #228]	; (8001580 <read_temperature_and_pression+0x1b8>)
 800149c:	f7ff fd7b 	bl	8000f96 <linear_interpolation>
 80014a0:	eef0 7a40 	vmov.f32	s15, s0
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <read_temperature_and_pression+0x1bc>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]
                                            data_raw_temperature);
    sprintf((char *)tx_buffer, "Temperature [degC]:%6.2f\r\n",
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <read_temperature_and_pression+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f84a 	bl	8000548 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4933      	ldr	r1, [pc, #204]	; (8001588 <read_temperature_and_pression+0x1c0>)
 80014ba:	482e      	ldr	r0, [pc, #184]	; (8001574 <read_temperature_and_pression+0x1ac>)
 80014bc:	f00a fdf0 	bl	800c0a0 <siprintf>
    				temperature_degC );
    HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer), 1000);
 80014c0:	482c      	ldr	r0, [pc, #176]	; (8001574 <read_temperature_and_pression+0x1ac>)
 80014c2:	f7fe fed5 	bl	8000270 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	4929      	ldr	r1, [pc, #164]	; (8001574 <read_temperature_and_pression+0x1ac>)
 80014d0:	4829      	ldr	r0, [pc, #164]	; (8001578 <read_temperature_and_pression+0x1b0>)
 80014d2:	f006 fca5 	bl	8007e20 <HAL_UART_Transmit>

  }
  *data_t = temperature_degC;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <read_temperature_and_pression+0x1bc>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]

  lps22hh_reg_t reg1;

  lps22hh_read_reg(&dev_ctx1, LPS22HH_STATUS, (uint8_t *)&reg1, 1);
 80014de:	f107 0210 	add.w	r2, r7, #16
 80014e2:	2301      	movs	r3, #1
 80014e4:	2127      	movs	r1, #39	; 0x27
 80014e6:	4829      	ldr	r0, [pc, #164]	; (800158c <read_temperature_and_pression+0x1c4>)
 80014e8:	f003 f894 	bl	8004614 <lps22hh_read_reg>

  	 if (reg1.status.p_da) {
 80014ec:	7c3b      	ldrb	r3, [r7, #16]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d026      	beq.n	8001546 <read_temperature_and_pression+0x17e>
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <read_temperature_and_pression+0x1c8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
  	   memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
  	   lps22hh_pressure_raw_get(&dev_ctx1, &data_raw_pressure);
 80014fe:	4924      	ldr	r1, [pc, #144]	; (8001590 <read_temperature_and_pression+0x1c8>)
 8001500:	4822      	ldr	r0, [pc, #136]	; (800158c <read_temperature_and_pression+0x1c4>)
 8001502:	f003 f943 	bl	800478c <lps22hh_pressure_raw_get>
  	   pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <read_temperature_and_pression+0x1c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f8b2 	bl	8004674 <lps22hh_from_lsb_to_hpa>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <read_temperature_and_pression+0x1cc>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
  	   sprintf((char *)tx_buffer, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <read_temperature_and_pression+0x1cc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f812 	bl	8000548 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	491b      	ldr	r1, [pc, #108]	; (8001598 <read_temperature_and_pression+0x1d0>)
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <read_temperature_and_pression+0x1ac>)
 800152c:	f00a fdb8 	bl	800c0a0 <siprintf>
  	   HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer), 1000);
 8001530:	4810      	ldr	r0, [pc, #64]	; (8001574 <read_temperature_and_pression+0x1ac>)
 8001532:	f7fe fe9d 	bl	8000270 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	b29a      	uxth	r2, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	490d      	ldr	r1, [pc, #52]	; (8001574 <read_temperature_and_pression+0x1ac>)
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <read_temperature_and_pression+0x1b0>)
 8001542:	f006 fc6d 	bl	8007e20 <HAL_UART_Transmit>
  	 }

  	*data_p = pressure_hPa;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <read_temperature_and_pression+0x1cc>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000610 	.word	0x20000610
 800155c:	20000210 	.word	0x20000210
 8001560:	20000630 	.word	0x20000630
 8001564:	20000214 	.word	0x20000214
 8001568:	42c80000 	.word	0x42c80000
 800156c:	42c80000 	.word	0x42c80000
 8001570:	0800e378 	.word	0x0800e378
 8001574:	2000021c 	.word	0x2000021c
 8001578:	20000880 	.word	0x20000880
 800157c:	20000212 	.word	0x20000212
 8001580:	20000640 	.word	0x20000640
 8001584:	20000218 	.word	0x20000218
 8001588:	0800e390 	.word	0x0800e390
 800158c:	20000620 	.word	0x20000620
 8001590:	20000604 	.word	0x20000604
 8001594:	20000608 	.word	0x20000608
 8001598:	0800e3ac 	.word	0x0800e3ac

0800159c <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80015aa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80015ae:	2b13      	cmp	r3, #19
 80015b0:	f200 8426 	bhi.w	8001e00 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80015b4:	f00a f80e 	bl	800b5d4 <rand>
 80015b8:	4603      	mov	r3, r0
 80015ba:	17da      	asrs	r2, r3, #31
 80015bc:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80015c0:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 80015c4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80015c8:	2200      	movs	r2, #0
 80015ca:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80015ce:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 80015d2:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 80015d6:	462b      	mov	r3, r5
 80015d8:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 80015dc:	4652      	mov	r2, sl
 80015de:	fb02 f203 	mul.w	r2, r2, r3
 80015e2:	465b      	mov	r3, fp
 80015e4:	4621      	mov	r1, r4
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	4622      	mov	r2, r4
 80015ee:	4651      	mov	r1, sl
 80015f0:	fba2 8901 	umull	r8, r9, r2, r1
 80015f4:	444b      	add	r3, r9
 80015f6:	4699      	mov	r9, r3
 80015f8:	4642      	mov	r2, r8
 80015fa:	464b      	mov	r3, r9
 80015fc:	1891      	adds	r1, r2, r2
 80015fe:	66b9      	str	r1, [r7, #104]	; 0x68
 8001600:	415b      	adcs	r3, r3
 8001602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001604:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001608:	eb12 0108 	adds.w	r1, r2, r8
 800160c:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8001610:	eb43 0309 	adc.w	r3, r3, r9
 8001614:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001618:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8001624:	f7ff fb10 	bl	8000c48 <__aeabi_uldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	f112 010a 	adds.w	r1, r2, #10
 8001630:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001634:	f143 0300 	adc.w	r3, r3, #0
 8001638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800163c:	4bec      	ldr	r3, [pc, #944]	; (80019f0 <Set_Random_Motion_Values+0x454>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001646:	4413      	add	r3, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4be9      	ldr	r3, [pc, #932]	; (80019f0 <Set_Random_Motion_Values+0x454>)
 800164c:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800164e:	f009 ffc1 	bl	800b5d4 <rand>
 8001652:	4603      	mov	r3, r0
 8001654:	17da      	asrs	r2, r3, #31
 8001656:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800165a:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 800165e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001662:	2200      	movs	r2, #0
 8001664:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8001668:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 800166c:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 8001670:	462b      	mov	r3, r5
 8001672:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 8001676:	4642      	mov	r2, r8
 8001678:	fb02 f203 	mul.w	r2, r2, r3
 800167c:	464b      	mov	r3, r9
 800167e:	4621      	mov	r1, r4
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	4622      	mov	r2, r4
 8001688:	4641      	mov	r1, r8
 800168a:	fba2 1201 	umull	r1, r2, r2, r1
 800168e:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8001692:	460a      	mov	r2, r1
 8001694:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 8001698:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 80016a2:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 80016a6:	4622      	mov	r2, r4
 80016a8:	462b      	mov	r3, r5
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0099      	lsls	r1, r3, #2
 80016b4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80016b8:	0090      	lsls	r0, r2, #2
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4621      	mov	r1, r4
 80016c0:	1851      	adds	r1, r2, r1
 80016c2:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 80016c6:	4629      	mov	r1, r5
 80016c8:	eb43 0101 	adc.w	r1, r3, r1
 80016cc:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 80016d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 80016dc:	f7ff fab4 	bl	8000c48 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	f06f 0009 	mvn.w	r0, #9
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	1a80      	subs	r0, r0, r2
 80016ee:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80016f2:	eb61 0303 	sbc.w	r3, r1, r3
 80016f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80016fa:	4bbd      	ldr	r3, [pc, #756]	; (80019f0 <Set_Random_Motion_Values+0x454>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	461a      	mov	r2, r3
 8001700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001704:	4413      	add	r3, r2
 8001706:	461a      	mov	r2, r3
 8001708:	4bb9      	ldr	r3, [pc, #740]	; (80019f0 <Set_Random_Motion_Values+0x454>)
 800170a:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800170c:	f009 ff62 	bl	800b5d4 <rand>
 8001710:	4603      	mov	r3, r0
 8001712:	17da      	asrs	r2, r3, #31
 8001714:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8001718:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 800171c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001720:	2200      	movs	r2, #0
 8001722:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8001726:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 800172a:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 800172e:	462b      	mov	r3, r5
 8001730:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 8001734:	4642      	mov	r2, r8
 8001736:	fb02 f203 	mul.w	r2, r2, r3
 800173a:	464b      	mov	r3, r9
 800173c:	4621      	mov	r1, r4
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	4622      	mov	r2, r4
 8001746:	4641      	mov	r1, r8
 8001748:	fba2 1201 	umull	r1, r2, r2, r1
 800174c:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8001750:	460a      	mov	r2, r1
 8001752:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 8001756:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 800175a:	4413      	add	r3, r2
 800175c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001760:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 8001764:	4622      	mov	r2, r4
 8001766:	462b      	mov	r3, r5
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	00d9      	lsls	r1, r3, #3
 8001772:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001776:	00d0      	lsls	r0, r2, #3
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4621      	mov	r1, r4
 800177e:	1a51      	subs	r1, r2, r1
 8001780:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800178e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 800179a:	f7ff fa55 	bl	8000c48 <__aeabi_uldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	f112 010a 	adds.w	r1, r2, #10
 80017a6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80017aa:	f143 0300 	adc.w	r3, r3, #0
 80017ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017b2:	4b8f      	ldr	r3, [pc, #572]	; (80019f0 <Set_Random_Motion_Values+0x454>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <Set_Random_Motion_Values+0x454>)
 80017c2:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80017c4:	f009 ff06 	bl	800b5d4 <rand>
 80017c8:	4603      	mov	r3, r0
 80017ca:	17da      	asrs	r2, r3, #31
 80017cc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80017d0:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 80017d4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80017d8:	2200      	movs	r2, #0
 80017da:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 80017de:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 80017e2:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 80017e6:	462b      	mov	r3, r5
 80017e8:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 80017ec:	4642      	mov	r2, r8
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	464b      	mov	r3, r9
 80017f4:	4621      	mov	r1, r4
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	4622      	mov	r2, r4
 80017fe:	4641      	mov	r1, r8
 8001800:	fba2 1201 	umull	r1, r2, r2, r1
 8001804:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8001808:	460a      	mov	r2, r1
 800180a:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 800180e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8001812:	4413      	add	r3, r2
 8001814:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8001818:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 800181c:	460b      	mov	r3, r1
 800181e:	18db      	adds	r3, r3, r3
 8001820:	663b      	str	r3, [r7, #96]	; 0x60
 8001822:	4613      	mov	r3, r2
 8001824:	eb42 0303 	adc.w	r3, r2, r3
 8001828:	667b      	str	r3, [r7, #100]	; 0x64
 800182a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800182e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	f7ff fa07 	bl	8000c48 <__aeabi_uldivmod>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001842:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001846:	f143 0300 	adc.w	r3, r3, #0
 800184a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800184e:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <Set_Random_Motion_Values+0x458>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001858:	4413      	add	r3, r2
 800185a:	461a      	mov	r2, r3
 800185c:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <Set_Random_Motion_Values+0x458>)
 800185e:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001860:	f009 feb8 	bl	800b5d4 <rand>
 8001864:	4603      	mov	r3, r0
 8001866:	17da      	asrs	r2, r3, #31
 8001868:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800186c:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 8001870:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001874:	2200      	movs	r2, #0
 8001876:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 800187a:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 800187e:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8001882:	462b      	mov	r3, r5
 8001884:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 8001888:	4642      	mov	r2, r8
 800188a:	fb02 f203 	mul.w	r2, r2, r3
 800188e:	464b      	mov	r3, r9
 8001890:	4621      	mov	r1, r4
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	4622      	mov	r2, r4
 800189a:	4641      	mov	r1, r8
 800189c:	fba2 1201 	umull	r1, r2, r2, r1
 80018a0:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 80018a4:	460a      	mov	r2, r1
 80018a6:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 80018aa:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80018ae:	4413      	add	r3, r2
 80018b0:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 80018c0:	462b      	mov	r3, r5
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	4623      	mov	r3, r4
 80018c6:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80018ca:	4623      	mov	r3, r4
 80018cc:	0098      	lsls	r0, r3, #2
 80018ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f7ff f9b7 	bl	8000c48 <__aeabi_uldivmod>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80018e2:	f04f 31ff 	mov.w	r1, #4294967295
 80018e6:	1a80      	subs	r0, r0, r2
 80018e8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80018ec:	eb61 0303 	sbc.w	r3, r1, r3
 80018f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <Set_Random_Motion_Values+0x458>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <Set_Random_Motion_Values+0x458>)
 8001904:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001906:	f009 fe65 	bl	800b5d4 <rand>
 800190a:	4603      	mov	r3, r0
 800190c:	17da      	asrs	r2, r3, #31
 800190e:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001912:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8001916:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800191a:	2200      	movs	r2, #0
 800191c:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001920:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8001924:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8001928:	462b      	mov	r3, r5
 800192a:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 800192e:	4642      	mov	r2, r8
 8001930:	fb02 f203 	mul.w	r2, r2, r3
 8001934:	464b      	mov	r3, r9
 8001936:	4621      	mov	r1, r4
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	4622      	mov	r2, r4
 8001940:	4641      	mov	r1, r8
 8001942:	fba2 1201 	umull	r1, r2, r2, r1
 8001946:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 800194a:	460a      	mov	r2, r1
 800194c:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 8001950:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800195a:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	1891      	adds	r1, r2, r2
 8001964:	65b9      	str	r1, [r7, #88]	; 0x58
 8001966:	415b      	adcs	r3, r3
 8001968:	65fb      	str	r3, [r7, #92]	; 0x5c
 800196a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800196e:	4621      	mov	r1, r4
 8001970:	1851      	adds	r1, r2, r1
 8001972:	6539      	str	r1, [r7, #80]	; 0x50
 8001974:	4629      	mov	r1, r5
 8001976:	eb43 0101 	adc.w	r1, r3, r1
 800197a:	6579      	str	r1, [r7, #84]	; 0x54
 800197c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001980:	460b      	mov	r3, r1
 8001982:	18db      	adds	r3, r3, r3
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
 8001986:	4613      	mov	r3, r2
 8001988:	eb42 0303 	adc.w	r3, r2, r3
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800198e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001992:	4618      	mov	r0, r3
 8001994:	4621      	mov	r1, r4
 8001996:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f7ff f953 	bl	8000c48 <__aeabi_uldivmod>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80019aa:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80019ae:	f143 0300 	adc.w	r3, r3, #0
 80019b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <Set_Random_Motion_Values+0x458>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019c0:	4413      	add	r3, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <Set_Random_Motion_Values+0x458>)
 80019c6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80019c8:	f009 fe04 	bl	800b5d4 <rand>
 80019cc:	4603      	mov	r3, r0
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80019d4:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 80019d8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80019dc:	2200      	movs	r2, #0
 80019de:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80019e2:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 80019e6:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 80019ea:	462b      	mov	r3, r5
 80019ec:	e004      	b.n	80019f8 <Set_Random_Motion_Values+0x45c>
 80019ee:	bf00      	nop
 80019f0:	200007e4 	.word	0x200007e4
 80019f4:	200007f0 	.word	0x200007f0
 80019f8:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 80019fc:	4642      	mov	r2, r8
 80019fe:	fb02 f203 	mul.w	r2, r2, r3
 8001a02:	464b      	mov	r3, r9
 8001a04:	4621      	mov	r1, r4
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	4641      	mov	r1, r8
 8001a10:	fba2 1201 	umull	r1, r2, r2, r1
 8001a14:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8001a18:	460a      	mov	r2, r1
 8001a1a:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 8001a1e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8001a22:	4413      	add	r3, r2
 8001a24:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8001a28:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	462b      	mov	r3, r5
 8001a30:	1891      	adds	r1, r2, r2
 8001a32:	6439      	str	r1, [r7, #64]	; 0x40
 8001a34:	415b      	adcs	r3, r3
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
 8001a38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	1851      	adds	r1, r2, r1
 8001a40:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8001a44:	4629      	mov	r1, r5
 8001a46:	eb43 0101 	adc.w	r1, r3, r1
 8001a4a:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8001a4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8001a5a:	f7ff f8f5 	bl	8000c48 <__aeabi_uldivmod>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	1cd1      	adds	r1, r2, #3
 8001a64:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001a68:	f143 0300 	adc.w	r3, r3, #0
 8001a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a70:	4be1      	ldr	r3, [pc, #900]	; (8001df8 <Set_Random_Motion_Values+0x85c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a7a:	4413      	add	r3, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4bde      	ldr	r3, [pc, #888]	; (8001df8 <Set_Random_Motion_Values+0x85c>)
 8001a80:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001a82:	f009 fda7 	bl	800b5d4 <rand>
 8001a86:	4603      	mov	r3, r0
 8001a88:	17da      	asrs	r2, r3, #31
 8001a8a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8001a8e:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 8001a92:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001a96:	2200      	movs	r2, #0
 8001a98:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001a9c:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 8001aa0:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 8001aaa:	4642      	mov	r2, r8
 8001aac:	fb02 f203 	mul.w	r2, r2, r3
 8001ab0:	464b      	mov	r3, r9
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	4622      	mov	r2, r4
 8001abc:	4641      	mov	r1, r8
 8001abe:	fba2 1201 	umull	r1, r2, r2, r1
 8001ac2:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 8001acc:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8001ae2:	462b      	mov	r3, r5
 8001ae4:	0099      	lsls	r1, r3, #2
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001aec:	4623      	mov	r3, r4
 8001aee:	0098      	lsls	r0, r3, #2
 8001af0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f7ff f8a6 	bl	8000c48 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	f06f 0002 	mvn.w	r0, #2
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	1a80      	subs	r0, r0, r2
 8001b0a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8001b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8001b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b16:	4bb8      	ldr	r3, [pc, #736]	; (8001df8 <Set_Random_Motion_Values+0x85c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b20:	4413      	add	r3, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4bb4      	ldr	r3, [pc, #720]	; (8001df8 <Set_Random_Motion_Values+0x85c>)
 8001b26:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001b28:	f009 fd54 	bl	800b5d4 <rand>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	17da      	asrs	r2, r3, #31
 8001b30:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001b34:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 8001b38:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8001b42:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 8001b46:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 8001b50:	4642      	mov	r2, r8
 8001b52:	fb02 f203 	mul.w	r2, r2, r3
 8001b56:	464b      	mov	r3, r9
 8001b58:	4621      	mov	r1, r4
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	4622      	mov	r2, r4
 8001b62:	4641      	mov	r1, r8
 8001b64:	fba2 1201 	umull	r1, r2, r2, r1
 8001b68:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 8001b72:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001b76:	4413      	add	r3, r2
 8001b78:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001b7c:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8001b80:	4622      	mov	r2, r4
 8001b82:	462b      	mov	r3, r5
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	0099      	lsls	r1, r3, #2
 8001b8e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b92:	0090      	lsls	r0, r2, #2
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4621      	mov	r1, r4
 8001b9a:	1851      	adds	r1, r2, r1
 8001b9c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	eb43 0101 	adc.w	r1, r3, r1
 8001ba6:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8001baa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8001bb6:	f7ff f847 	bl	8000c48 <__aeabi_uldivmod>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	1cd1      	adds	r1, r2, #3
 8001bc0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001bc4:	f143 0300 	adc.w	r3, r3, #0
 8001bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001bcc:	4b8a      	ldr	r3, [pc, #552]	; (8001df8 <Set_Random_Motion_Values+0x85c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b87      	ldr	r3, [pc, #540]	; (8001df8 <Set_Random_Motion_Values+0x85c>)
 8001bdc:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001bde:	f009 fcf9 	bl	800b5d4 <rand>
 8001be2:	4603      	mov	r3, r0
 8001be4:	17da      	asrs	r2, r3, #31
 8001be6:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8001bea:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 8001bee:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001bf8:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 8001bfc:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8001c00:	462b      	mov	r3, r5
 8001c02:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 8001c06:	4642      	mov	r2, r8
 8001c08:	fb02 f203 	mul.w	r2, r2, r3
 8001c0c:	464b      	mov	r3, r9
 8001c0e:	4621      	mov	r1, r4
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	4622      	mov	r2, r4
 8001c18:	4641      	mov	r1, r8
 8001c1a:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1e:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8001c22:	460a      	mov	r2, r1
 8001c24:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 8001c28:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001c32:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	1891      	adds	r1, r2, r2
 8001c3c:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c3e:	415b      	adcs	r3, r3
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c46:	4621      	mov	r1, r4
 8001c48:	1851      	adds	r1, r2, r1
 8001c4a:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8001c4e:	4629      	mov	r1, r5
 8001c50:	eb43 0101 	adc.w	r1, r3, r1
 8001c54:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8001c58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 8001c64:	f7fe fff0 	bl	8000c48 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001c70:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001c74:	f143 0300 	adc.w	r3, r3, #0
 8001c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c7c:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <Set_Random_Motion_Values+0x860>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <Set_Random_Motion_Values+0x860>)
 8001c8c:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001c8e:	f009 fca1 	bl	800b5d4 <rand>
 8001c92:	4603      	mov	r3, r0
 8001c94:	17da      	asrs	r2, r3, #31
 8001c96:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8001c9a:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8001c9e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8001ca8:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8001cac:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 8001cb6:	4642      	mov	r2, r8
 8001cb8:	fb02 f203 	mul.w	r2, r2, r3
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	4641      	mov	r1, r8
 8001cca:	fba2 1201 	umull	r1, r2, r2, r1
 8001cce:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 8001cd8:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001cdc:	4413      	add	r3, r2
 8001cde:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001ce2:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	462b      	mov	r3, r5
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0099      	lsls	r1, r3, #2
 8001cf4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001cf8:	0090      	lsls	r0, r2, #2
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4621      	mov	r1, r4
 8001d00:	1851      	adds	r1, r2, r1
 8001d02:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8001d06:	4629      	mov	r1, r5
 8001d08:	eb43 0101 	adc.w	r1, r3, r1
 8001d0c:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8001d10:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8001d1c:	f7fe ff94 	bl	8000c48 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001d28:	67b9      	str	r1, [r7, #120]	; 0x78
 8001d2a:	f143 0300 	adc.w	r3, r3, #0
 8001d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d30:	4b32      	ldr	r3, [pc, #200]	; (8001dfc <Set_Random_Motion_Values+0x860>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	461a      	mov	r2, r3
 8001d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d38:	4413      	add	r3, r2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <Set_Random_Motion_Values+0x860>)
 8001d3e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001d40:	f009 fc48 	bl	800b5d4 <rand>
 8001d44:	4603      	mov	r3, r0
 8001d46:	17da      	asrs	r2, r3, #31
 8001d48:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8001d4c:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8001d50:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001d54:	2200      	movs	r2, #0
 8001d56:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001d5a:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8001d5e:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8001d62:	462b      	mov	r3, r5
 8001d64:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 8001d68:	4642      	mov	r2, r8
 8001d6a:	fb02 f203 	mul.w	r2, r2, r3
 8001d6e:	464b      	mov	r3, r9
 8001d70:	4621      	mov	r1, r4
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	4622      	mov	r2, r4
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	fba2 1201 	umull	r1, r2, r2, r1
 8001d80:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8001d84:	460a      	mov	r2, r1
 8001d86:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 8001d8a:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001d8e:	4413      	add	r3, r2
 8001d90:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001d94:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8001d98:	4622      	mov	r2, r4
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	00d9      	lsls	r1, r3, #3
 8001da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001daa:	00d0      	lsls	r0, r2, #3
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4621      	mov	r1, r4
 8001db2:	1a51      	subs	r1, r2, r1
 8001db4:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8001db8:	4629      	mov	r1, r5
 8001dba:	eb63 0301 	sbc.w	r3, r3, r1
 8001dbe:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001dc2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8001dce:	f7fe ff3b 	bl	8000c48 <__aeabi_uldivmod>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001dda:	6739      	str	r1, [r7, #112]	; 0x70
 8001ddc:	f143 0300 	adc.w	r3, r3, #0
 8001de0:	677b      	str	r3, [r7, #116]	; 0x74
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <Set_Random_Motion_Values+0x860>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	461a      	mov	r2, r3
 8001de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <Set_Random_Motion_Values+0x860>)
 8001df0:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8001df2:	f000 bc37 	b.w	8002664 <Set_Random_Motion_Values+0x10c8>
 8001df6:	bf00      	nop
 8001df8:	200007fc 	.word	0x200007fc
 8001dfc:	20000808 	.word	0x20000808
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001e00:	f009 fbe8 	bl	800b5d4 <rand>
 8001e04:	4603      	mov	r3, r0
 8001e06:	17da      	asrs	r2, r3, #31
 8001e08:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001e0c:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001e10:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001e14:	2200      	movs	r2, #0
 8001e16:	469a      	mov	sl, r3
 8001e18:	4693      	mov	fp, r2
 8001e1a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8001e1e:	460b      	mov	r3, r1
 8001e20:	fb0a f203 	mul.w	r2, sl, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	fb03 f30b 	mul.w	r3, r3, fp
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	fba2 450a 	umull	r4, r5, r2, sl
 8001e32:	442b      	add	r3, r5
 8001e34:	461d      	mov	r5, r3
 8001e36:	4622      	mov	r2, r4
 8001e38:	462b      	mov	r3, r5
 8001e3a:	1891      	adds	r1, r2, r2
 8001e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8001e3e:	415b      	adcs	r3, r3
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
 8001e42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e46:	1911      	adds	r1, r2, r4
 8001e48:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8001e4c:	416b      	adcs	r3, r5
 8001e4e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001e52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8001e5e:	f7fe fef3 	bl	8000c48 <__aeabi_uldivmod>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	f06f 0009 	mvn.w	r0, #9
 8001e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6e:	1a80      	subs	r0, r0, r2
 8001e70:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8001e74:	eb61 0303 	sbc.w	r3, r1, r3
 8001e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e7c:	4beb      	ldr	r3, [pc, #940]	; (800222c <Set_Random_Motion_Values+0xc90>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e86:	4413      	add	r3, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4be8      	ldr	r3, [pc, #928]	; (800222c <Set_Random_Motion_Values+0xc90>)
 8001e8c:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001e8e:	f009 fba1 	bl	800b5d4 <rand>
 8001e92:	4603      	mov	r3, r0
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001e9a:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001e9e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001ea8:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8001eac:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8001eb0:	462b      	mov	r3, r5
 8001eb2:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	fb02 f203 	mul.w	r2, r2, r3
 8001ebc:	464b      	mov	r3, r9
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	4641      	mov	r1, r8
 8001eca:	fba2 1201 	umull	r1, r2, r2, r1
 8001ece:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8001ed2:	460a      	mov	r2, r1
 8001ed4:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8001ed8:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001edc:	4413      	add	r3, r2
 8001ede:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001ee2:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	462b      	mov	r3, r5
 8001eea:	f04f 0000 	mov.w	r0, #0
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ef8:	0090      	lsls	r0, r2, #2
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4621      	mov	r1, r4
 8001f00:	1851      	adds	r1, r2, r1
 8001f02:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8001f06:	4629      	mov	r1, r5
 8001f08:	eb43 0101 	adc.w	r1, r3, r1
 8001f0c:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8001f10:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8001f1c:	f7fe fe94 	bl	8000c48 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	f112 010a 	adds.w	r1, r2, #10
 8001f28:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8001f2c:	f143 0300 	adc.w	r3, r3, #0
 8001f30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f34:	4bbd      	ldr	r3, [pc, #756]	; (800222c <Set_Random_Motion_Values+0xc90>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4bba      	ldr	r3, [pc, #744]	; (800222c <Set_Random_Motion_Values+0xc90>)
 8001f44:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001f46:	f009 fb45 	bl	800b5d4 <rand>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	17da      	asrs	r2, r3, #31
 8001f4e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001f52:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001f56:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001f60:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8001f64:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8001f68:	462b      	mov	r3, r5
 8001f6a:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8001f6e:	4642      	mov	r2, r8
 8001f70:	fb02 f203 	mul.w	r2, r2, r3
 8001f74:	464b      	mov	r3, r9
 8001f76:	4621      	mov	r1, r4
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4622      	mov	r2, r4
 8001f80:	4641      	mov	r1, r8
 8001f82:	fba2 1201 	umull	r1, r2, r2, r1
 8001f86:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 8001f90:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8001f94:	4413      	add	r3, r2
 8001f96:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8001f9a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	00d9      	lsls	r1, r3, #3
 8001fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fb0:	00d0      	lsls	r0, r2, #3
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	1a51      	subs	r1, r2, r1
 8001fba:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001fc8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001fd4:	f7fe fe38 	bl	8000c48 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	f06f 0009 	mvn.w	r0, #9
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	1a80      	subs	r0, r0, r2
 8001fe6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8001fea:	eb61 0303 	sbc.w	r3, r1, r3
 8001fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ff2:	4b8e      	ldr	r3, [pc, #568]	; (800222c <Set_Random_Motion_Values+0xc90>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ffc:	4413      	add	r3, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b8a      	ldr	r3, [pc, #552]	; (800222c <Set_Random_Motion_Values+0xc90>)
 8002002:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8002004:	f009 fae6 	bl	800b5d4 <rand>
 8002008:	4603      	mov	r3, r0
 800200a:	17da      	asrs	r2, r3, #31
 800200c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002010:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8002014:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002018:	2200      	movs	r2, #0
 800201a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800201e:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8002022:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8002026:	462b      	mov	r3, r5
 8002028:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 800202c:	4642      	mov	r2, r8
 800202e:	fb02 f203 	mul.w	r2, r2, r3
 8002032:	464b      	mov	r3, r9
 8002034:	4621      	mov	r1, r4
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	4622      	mov	r2, r4
 800203e:	4641      	mov	r1, r8
 8002040:	fba2 1201 	umull	r1, r2, r2, r1
 8002044:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8002048:	460a      	mov	r2, r1
 800204a:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 800204e:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8002052:	4413      	add	r3, r2
 8002054:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8002058:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 800205c:	460b      	mov	r3, r1
 800205e:	18db      	adds	r3, r3, r3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
 8002062:	4613      	mov	r3, r2
 8002064:	eb42 0303 	adc.w	r3, r2, r3
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800206e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	f7fe fde7 	bl	8000c48 <__aeabi_uldivmod>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8002082:	f04f 31ff 	mov.w	r1, #4294967295
 8002086:	1a80      	subs	r0, r0, r2
 8002088:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 800208c:	eb61 0303 	sbc.w	r3, r1, r3
 8002090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002094:	4b66      	ldr	r3, [pc, #408]	; (8002230 <Set_Random_Motion_Values+0xc94>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800209e:	4413      	add	r3, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <Set_Random_Motion_Values+0xc94>)
 80020a4:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80020a6:	f009 fa95 	bl	800b5d4 <rand>
 80020aa:	4603      	mov	r3, r0
 80020ac:	17da      	asrs	r2, r3, #31
 80020ae:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80020b2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80020b6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80020c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 80020c4:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 80020c8:	462b      	mov	r3, r5
 80020ca:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 80020ce:	4642      	mov	r2, r8
 80020d0:	fb02 f203 	mul.w	r2, r2, r3
 80020d4:	464b      	mov	r3, r9
 80020d6:	4621      	mov	r1, r4
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	4622      	mov	r2, r4
 80020e0:	4641      	mov	r1, r8
 80020e2:	fba2 1201 	umull	r1, r2, r2, r1
 80020e6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80020ea:	460a      	mov	r2, r1
 80020ec:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 80020f0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80020f4:	4413      	add	r3, r2
 80020f6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8002106:	462b      	mov	r3, r5
 8002108:	0099      	lsls	r1, r3, #2
 800210a:	4623      	mov	r3, r4
 800210c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8002110:	4623      	mov	r3, r4
 8002112:	0098      	lsls	r0, r3, #2
 8002114:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f7fe fd94 	bl	8000c48 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8002128:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800212c:	f143 0300 	adc.w	r3, r3, #0
 8002130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <Set_Random_Motion_Values+0xc94>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	461a      	mov	r2, r3
 800213a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800213e:	4413      	add	r3, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <Set_Random_Motion_Values+0xc94>)
 8002144:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8002146:	f009 fa45 	bl	800b5d4 <rand>
 800214a:	4603      	mov	r3, r0
 800214c:	17da      	asrs	r2, r3, #31
 800214e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002152:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8002156:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800215a:	2200      	movs	r2, #0
 800215c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002160:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8002164:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8002168:	462b      	mov	r3, r5
 800216a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800216e:	4642      	mov	r2, r8
 8002170:	fb02 f203 	mul.w	r2, r2, r3
 8002174:	464b      	mov	r3, r9
 8002176:	4621      	mov	r1, r4
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	4622      	mov	r2, r4
 8002180:	4641      	mov	r1, r8
 8002182:	fba2 1201 	umull	r1, r2, r2, r1
 8002186:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 800218a:	460a      	mov	r2, r1
 800218c:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8002190:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8002194:	4413      	add	r3, r2
 8002196:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800219a:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 800219e:	4622      	mov	r2, r4
 80021a0:	462b      	mov	r3, r5
 80021a2:	1891      	adds	r1, r2, r2
 80021a4:	6239      	str	r1, [r7, #32]
 80021a6:	415b      	adcs	r3, r3
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021ae:	4621      	mov	r1, r4
 80021b0:	1851      	adds	r1, r2, r1
 80021b2:	61b9      	str	r1, [r7, #24]
 80021b4:	4629      	mov	r1, r5
 80021b6:	eb43 0101 	adc.w	r1, r3, r1
 80021ba:	61f9      	str	r1, [r7, #28]
 80021bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021c0:	460b      	mov	r3, r1
 80021c2:	18db      	adds	r3, r3, r3
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4613      	mov	r3, r2
 80021c8:	eb42 0303 	adc.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021d2:	4618      	mov	r0, r3
 80021d4:	4621      	mov	r1, r4
 80021d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	f7fe fd33 	bl	8000c48 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80021ea:	f04f 31ff 	mov.w	r1, #4294967295
 80021ee:	1a80      	subs	r0, r0, r2
 80021f0:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80021f4:	eb61 0303 	sbc.w	r3, r1, r3
 80021f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <Set_Random_Motion_Values+0xc94>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	461a      	mov	r2, r3
 8002202:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002206:	4413      	add	r3, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <Set_Random_Motion_Values+0xc94>)
 800220c:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800220e:	f009 f9e1 	bl	800b5d4 <rand>
 8002212:	4603      	mov	r3, r0
 8002214:	17da      	asrs	r2, r3, #31
 8002216:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800221a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800221e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002228:	e004      	b.n	8002234 <Set_Random_Motion_Values+0xc98>
 800222a:	bf00      	nop
 800222c:	200007e4 	.word	0x200007e4
 8002230:	200007f0 	.word	0x200007f0
 8002234:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8002238:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 800223c:	462b      	mov	r3, r5
 800223e:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 8002242:	4642      	mov	r2, r8
 8002244:	fb02 f203 	mul.w	r2, r2, r3
 8002248:	464b      	mov	r3, r9
 800224a:	4621      	mov	r1, r4
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	4622      	mov	r2, r4
 8002254:	4641      	mov	r1, r8
 8002256:	fba2 1201 	umull	r1, r2, r2, r1
 800225a:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 800225e:	460a      	mov	r2, r1
 8002260:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 8002264:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8002268:	4413      	add	r3, r2
 800226a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800226e:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8002272:	4622      	mov	r2, r4
 8002274:	462b      	mov	r3, r5
 8002276:	f04f 0000 	mov.w	r0, #0
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	00d9      	lsls	r1, r3, #3
 8002280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002284:	00d0      	lsls	r0, r2, #3
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4621      	mov	r1, r4
 800228c:	1a51      	subs	r1, r2, r1
 800228e:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8002292:	4629      	mov	r1, r5
 8002294:	eb63 0301 	sbc.w	r3, r3, r1
 8002298:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800229c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80022a8:	f7fe fcce 	bl	8000c48 <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	f06f 0002 	mvn.w	r0, #2
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	1a80      	subs	r0, r0, r2
 80022ba:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80022be:	eb61 0303 	sbc.w	r3, r1, r3
 80022c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022c6:	4bea      	ldr	r3, [pc, #936]	; (8002670 <Set_Random_Motion_Values+0x10d4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022d0:	4413      	add	r3, r2
 80022d2:	461a      	mov	r2, r3
 80022d4:	4be6      	ldr	r3, [pc, #920]	; (8002670 <Set_Random_Motion_Values+0x10d4>)
 80022d6:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 80022d8:	f009 f97c 	bl	800b5d4 <rand>
 80022dc:	4603      	mov	r3, r0
 80022de:	17da      	asrs	r2, r3, #31
 80022e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022e4:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 80022e8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80022f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80022f6:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 80022fa:	462b      	mov	r3, r5
 80022fc:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 8002300:	4642      	mov	r2, r8
 8002302:	fb02 f203 	mul.w	r2, r2, r3
 8002306:	464b      	mov	r3, r9
 8002308:	4621      	mov	r1, r4
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	4622      	mov	r2, r4
 8002312:	4641      	mov	r1, r8
 8002314:	fba2 1201 	umull	r1, r2, r2, r1
 8002318:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 800231c:	460a      	mov	r2, r1
 800231e:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 8002322:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002326:	4413      	add	r3, r2
 8002328:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800232c:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8002330:	4622      	mov	r2, r4
 8002332:	462b      	mov	r3, r5
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	00d9      	lsls	r1, r3, #3
 800233e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002342:	00d0      	lsls	r0, r2, #3
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4621      	mov	r1, r4
 800234a:	1851      	adds	r1, r2, r1
 800234c:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8002350:	4629      	mov	r1, r5
 8002352:	eb43 0101 	adc.w	r1, r3, r1
 8002356:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800235a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002366:	f7fe fc6f 	bl	8000c48 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	1cd1      	adds	r1, r2, #3
 8002370:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8002374:	f143 0300 	adc.w	r3, r3, #0
 8002378:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800237c:	4bbc      	ldr	r3, [pc, #752]	; (8002670 <Set_Random_Motion_Values+0x10d4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	461a      	mov	r2, r3
 8002382:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002386:	4413      	add	r3, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4bb9      	ldr	r3, [pc, #740]	; (8002670 <Set_Random_Motion_Values+0x10d4>)
 800238c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800238e:	f009 f921 	bl	800b5d4 <rand>
 8002392:	4603      	mov	r3, r0
 8002394:	17da      	asrs	r2, r3, #31
 8002396:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800239a:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800239e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023a8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80023ac:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80023b0:	462b      	mov	r3, r5
 80023b2:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 80023b6:	4642      	mov	r2, r8
 80023b8:	fb02 f203 	mul.w	r2, r2, r3
 80023bc:	464b      	mov	r3, r9
 80023be:	4621      	mov	r1, r4
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	4622      	mov	r2, r4
 80023c8:	4641      	mov	r1, r8
 80023ca:	fba2 1201 	umull	r1, r2, r2, r1
 80023ce:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80023d2:	460a      	mov	r2, r1
 80023d4:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 80023d8:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 80023dc:	4413      	add	r3, r2
 80023de:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80023e2:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 80023e6:	4622      	mov	r2, r4
 80023e8:	462b      	mov	r3, r5
 80023ea:	1891      	adds	r1, r2, r2
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	415b      	adcs	r3, r3
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f6:	4621      	mov	r1, r4
 80023f8:	1851      	adds	r1, r2, r1
 80023fa:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 80023fe:	4629      	mov	r1, r5
 8002400:	eb43 0101 	adc.w	r1, r3, r1
 8002404:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8002408:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002414:	f7fe fc18 	bl	8000c48 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	f06f 0002 	mvn.w	r0, #2
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	1a80      	subs	r0, r0, r2
 8002426:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 800242a:	eb61 0303 	sbc.w	r3, r1, r3
 800242e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002432:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <Set_Random_Motion_Values+0x10d4>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	461a      	mov	r2, r3
 8002438:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800243c:	4413      	add	r3, r2
 800243e:	461a      	mov	r2, r3
 8002440:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <Set_Random_Motion_Values+0x10d4>)
 8002442:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002444:	f009 f8c6 	bl	800b5d4 <rand>
 8002448:	4603      	mov	r3, r0
 800244a:	17da      	asrs	r2, r3, #31
 800244c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002450:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002454:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002458:	2200      	movs	r2, #0
 800245a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800245e:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8002462:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8002466:	462b      	mov	r3, r5
 8002468:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 800246c:	4642      	mov	r2, r8
 800246e:	fb02 f203 	mul.w	r2, r2, r3
 8002472:	464b      	mov	r3, r9
 8002474:	4621      	mov	r1, r4
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	4622      	mov	r2, r4
 800247e:	4641      	mov	r1, r8
 8002480:	fba2 1201 	umull	r1, r2, r2, r1
 8002484:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8002488:	460a      	mov	r2, r1
 800248a:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 800248e:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8002492:	4413      	add	r3, r2
 8002494:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8002498:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 800249c:	4622      	mov	r2, r4
 800249e:	462b      	mov	r3, r5
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	00d9      	lsls	r1, r3, #3
 80024aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ae:	00d0      	lsls	r0, r2, #3
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4621      	mov	r1, r4
 80024b6:	1a51      	subs	r1, r2, r1
 80024b8:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80024bc:	4629      	mov	r1, r5
 80024be:	eb63 0301 	sbc.w	r3, r3, r1
 80024c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80024c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80024d2:	f7fe fbb9 	bl	8000c48 <__aeabi_uldivmod>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 80024de:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80024e2:	f143 0300 	adc.w	r3, r3, #0
 80024e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024ea:	4b62      	ldr	r3, [pc, #392]	; (8002674 <Set_Random_Motion_Values+0x10d8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f4:	4413      	add	r3, r2
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <Set_Random_Motion_Values+0x10d8>)
 80024fa:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80024fc:	f009 f86a 	bl	800b5d4 <rand>
 8002500:	4603      	mov	r3, r0
 8002502:	17da      	asrs	r2, r3, #31
 8002504:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002508:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800250c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002516:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800251a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800251e:	462b      	mov	r3, r5
 8002520:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8002524:	4642      	mov	r2, r8
 8002526:	fb02 f203 	mul.w	r2, r2, r3
 800252a:	464b      	mov	r3, r9
 800252c:	4621      	mov	r1, r4
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	4622      	mov	r2, r4
 8002536:	4641      	mov	r1, r8
 8002538:	fba2 1201 	umull	r1, r2, r2, r1
 800253c:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 8002540:	460a      	mov	r2, r1
 8002542:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 8002546:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 800254a:	4413      	add	r3, r2
 800254c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8002550:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8002554:	4622      	mov	r2, r4
 8002556:	462b      	mov	r3, r5
 8002558:	1891      	adds	r1, r2, r2
 800255a:	6039      	str	r1, [r7, #0]
 800255c:	415b      	adcs	r3, r3
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002564:	4621      	mov	r1, r4
 8002566:	1851      	adds	r1, r2, r1
 8002568:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800256c:	4629      	mov	r1, r5
 800256e:	eb43 0101 	adc.w	r1, r3, r1
 8002572:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8002576:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8002582:	f7fe fb61 	bl	8000c48 <__aeabi_uldivmod>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 800258e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002592:	f143 0300 	adc.w	r3, r3, #0
 8002596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <Set_Random_Motion_Values+0x10d8>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <Set_Random_Motion_Values+0x10d8>)
 80025aa:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80025ac:	f009 f812 	bl	800b5d4 <rand>
 80025b0:	4603      	mov	r3, r0
 80025b2:	17da      	asrs	r2, r3, #31
 80025b4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80025b8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80025bc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80025c6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80025ca:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 80025ce:	462b      	mov	r3, r5
 80025d0:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80025d4:	4642      	mov	r2, r8
 80025d6:	fb02 f203 	mul.w	r2, r2, r3
 80025da:	464b      	mov	r3, r9
 80025dc:	4621      	mov	r1, r4
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	4622      	mov	r2, r4
 80025e6:	4641      	mov	r1, r8
 80025e8:	fba2 1201 	umull	r1, r2, r2, r1
 80025ec:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 80025f0:	460a      	mov	r2, r1
 80025f2:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 80025f6:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80025fa:	4413      	add	r3, r2
 80025fc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8002600:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8002604:	4622      	mov	r2, r4
 8002606:	462b      	mov	r3, r5
 8002608:	f04f 0000 	mov.w	r0, #0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	0099      	lsls	r1, r3, #2
 8002612:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002616:	0090      	lsls	r0, r2, #2
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4621      	mov	r1, r4
 800261e:	1851      	adds	r1, r2, r1
 8002620:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8002624:	4629      	mov	r1, r5
 8002626:	eb43 0101 	adc.w	r1, r3, r1
 800262a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800262e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800263a:	f7fe fb05 	bl	8000c48 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	f112 010a 	adds.w	r1, r2, #10
 8002646:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800264a:	f143 0300 	adc.w	r3, r3, #0
 800264e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <Set_Random_Motion_Values+0x10d8>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	461a      	mov	r2, r3
 8002658:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800265c:	4413      	add	r3, r2
 800265e:	461a      	mov	r2, r3
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <Set_Random_Motion_Values+0x10d8>)
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 800266a:	46bd      	mov	sp, r7
 800266c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002670:	200007fc 	.word	0x200007fc
 8002674:	20000808 	.word	0x20000808

08002678 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 800267c:	4b6e      	ldr	r3, [pc, #440]	; (8002838 <Reset_Motion_Values+0x1c0>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b6e      	ldr	r3, [pc, #440]	; (800283c <Reset_Motion_Values+0x1c4>)
 8002682:	fb83 1302 	smull	r1, r3, r3, r2
 8002686:	11d9      	asrs	r1, r3, #7
 8002688:	17d3      	asrs	r3, r2, #31
 800268a:	1acb      	subs	r3, r1, r3
 800268c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <Reset_Motion_Values+0x2a>
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <Reset_Motion_Values+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	425b      	negs	r3, r3
 80026a0:	e000      	b.n	80026a4 <Reset_Motion_Values+0x2c>
 80026a2:	230a      	movs	r3, #10
 80026a4:	4a64      	ldr	r2, [pc, #400]	; (8002838 <Reset_Motion_Values+0x1c0>)
 80026a6:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 80026a8:	4b63      	ldr	r3, [pc, #396]	; (8002838 <Reset_Motion_Values+0x1c0>)
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4b63      	ldr	r3, [pc, #396]	; (800283c <Reset_Motion_Values+0x1c4>)
 80026ae:	fb83 1302 	smull	r1, r3, r3, r2
 80026b2:	11d9      	asrs	r1, r3, #7
 80026b4:	17d3      	asrs	r3, r2, #31
 80026b6:	1acb      	subs	r3, r1, r3
 80026b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <Reset_Motion_Values+0x56>
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <Reset_Motion_Values+0x1c0>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	425b      	negs	r3, r3
 80026cc:	e001      	b.n	80026d2 <Reset_Motion_Values+0x5a>
 80026ce:	f06f 0309 	mvn.w	r3, #9
 80026d2:	4a59      	ldr	r2, [pc, #356]	; (8002838 <Reset_Motion_Values+0x1c0>)
 80026d4:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 80026d6:	4b58      	ldr	r3, [pc, #352]	; (8002838 <Reset_Motion_Values+0x1c0>)
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <Reset_Motion_Values+0x1c4>)
 80026dc:	fb83 1302 	smull	r1, r3, r3, r2
 80026e0:	11d9      	asrs	r1, r3, #7
 80026e2:	17d3      	asrs	r3, r2, #31
 80026e4:	1acb      	subs	r3, r1, r3
 80026e6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <Reset_Motion_Values+0x84>
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <Reset_Motion_Values+0x1c0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	425b      	negs	r3, r3
 80026fa:	e000      	b.n	80026fe <Reset_Motion_Values+0x86>
 80026fc:	230a      	movs	r3, #10
 80026fe:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <Reset_Motion_Values+0x1c0>)
 8002700:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <Reset_Motion_Values+0x1c8>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <Reset_Motion_Values+0x1c4>)
 8002708:	fb83 1302 	smull	r1, r3, r3, r2
 800270c:	11d9      	asrs	r1, r3, #7
 800270e:	17d3      	asrs	r3, r2, #31
 8002710:	1acb      	subs	r3, r1, r3
 8002712:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d103      	bne.n	8002728 <Reset_Motion_Values+0xb0>
 8002720:	4b47      	ldr	r3, [pc, #284]	; (8002840 <Reset_Motion_Values+0x1c8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	425b      	negs	r3, r3
 8002726:	e000      	b.n	800272a <Reset_Motion_Values+0xb2>
 8002728:	2364      	movs	r3, #100	; 0x64
 800272a:	4a45      	ldr	r2, [pc, #276]	; (8002840 <Reset_Motion_Values+0x1c8>)
 800272c:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <Reset_Motion_Values+0x1c8>)
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4b42      	ldr	r3, [pc, #264]	; (800283c <Reset_Motion_Values+0x1c4>)
 8002734:	fb83 1302 	smull	r1, r3, r3, r2
 8002738:	11d9      	asrs	r1, r3, #7
 800273a:	17d3      	asrs	r3, r2, #31
 800273c:	1acb      	subs	r3, r1, r3
 800273e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <Reset_Motion_Values+0xdc>
 800274c:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <Reset_Motion_Values+0x1c8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	425b      	negs	r3, r3
 8002752:	e001      	b.n	8002758 <Reset_Motion_Values+0xe0>
 8002754:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002758:	4a39      	ldr	r2, [pc, #228]	; (8002840 <Reset_Motion_Values+0x1c8>)
 800275a:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 800275c:	4b38      	ldr	r3, [pc, #224]	; (8002840 <Reset_Motion_Values+0x1c8>)
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <Reset_Motion_Values+0x1c4>)
 8002762:	fb83 1302 	smull	r1, r3, r3, r2
 8002766:	11d9      	asrs	r1, r3, #7
 8002768:	17d3      	asrs	r3, r2, #31
 800276a:	1acb      	subs	r3, r1, r3
 800276c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <Reset_Motion_Values+0x10a>
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <Reset_Motion_Values+0x1c8>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	425b      	negs	r3, r3
 8002780:	e000      	b.n	8002784 <Reset_Motion_Values+0x10c>
 8002782:	2364      	movs	r3, #100	; 0x64
 8002784:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <Reset_Motion_Values+0x1c8>)
 8002786:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <Reset_Motion_Values+0x1c8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <Reset_Motion_Values+0x1c4>)
 800278e:	fb83 1302 	smull	r1, r3, r3, r2
 8002792:	11d9      	asrs	r1, r3, #7
 8002794:	17d3      	asrs	r3, r2, #31
 8002796:	1acb      	subs	r3, r1, r3
 8002798:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <Reset_Motion_Values+0x136>
 80027a6:	4b27      	ldr	r3, [pc, #156]	; (8002844 <Reset_Motion_Values+0x1cc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	425b      	negs	r3, r3
 80027ac:	e000      	b.n	80027b0 <Reset_Motion_Values+0x138>
 80027ae:	2303      	movs	r3, #3
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <Reset_Motion_Values+0x1cc>)
 80027b2:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <Reset_Motion_Values+0x1c8>)
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4b20      	ldr	r3, [pc, #128]	; (800283c <Reset_Motion_Values+0x1c4>)
 80027ba:	fb83 1302 	smull	r1, r3, r3, r2
 80027be:	11d9      	asrs	r1, r3, #7
 80027c0:	17d3      	asrs	r3, r2, #31
 80027c2:	1acb      	subs	r3, r1, r3
 80027c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <Reset_Motion_Values+0x162>
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <Reset_Motion_Values+0x1cc>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	425b      	negs	r3, r3
 80027d8:	e001      	b.n	80027de <Reset_Motion_Values+0x166>
 80027da:	f06f 0302 	mvn.w	r3, #2
 80027de:	4a19      	ldr	r2, [pc, #100]	; (8002844 <Reset_Motion_Values+0x1cc>)
 80027e0:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <Reset_Motion_Values+0x1c8>)
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <Reset_Motion_Values+0x1c4>)
 80027e8:	fb83 1302 	smull	r1, r3, r3, r2
 80027ec:	11d9      	asrs	r1, r3, #7
 80027ee:	17d3      	asrs	r3, r2, #31
 80027f0:	1acb      	subs	r3, r1, r3
 80027f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <Reset_Motion_Values+0x190>
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <Reset_Motion_Values+0x1cc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	425b      	negs	r3, r3
 8002806:	e000      	b.n	800280a <Reset_Motion_Values+0x192>
 8002808:	2303      	movs	r3, #3
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <Reset_Motion_Values+0x1cc>)
 800280c:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <Reset_Motion_Values+0x1d0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	425b      	negs	r3, r3
 8002814:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <Reset_Motion_Values+0x1d0>)
 8002816:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <Reset_Motion_Values+0x1d0>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	425b      	negs	r3, r3
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <Reset_Motion_Values+0x1d0>)
 8002820:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <Reset_Motion_Values+0x1d0>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	425b      	negs	r3, r3
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <Reset_Motion_Values+0x1d0>)
 800282a:	6093      	str	r3, [r2, #8]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	200007e4 	.word	0x200007e4
 800283c:	10624dd3 	.word	0x10624dd3
 8002840:	200007f0 	.word	0x200007f0
 8002844:	200007fc 	.word	0x200007fc
 8002848:	20000808 	.word	0x20000808

0800284c <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af02      	add	r7, sp, #8
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 8002856:	f107 0410 	add.w	r4, r7, #16
 800285a:	f107 0215 	add.w	r2, r7, #21
 800285e:	f107 0112 	add.w	r1, r7, #18
 8002862:	f107 0016 	add.w	r0, r7, #22
 8002866:	f107 030e 	add.w	r3, r7, #14
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	4623      	mov	r3, r4
 800286e:	f008 fa20 	bl	800acb2 <hci_read_local_version_information>
 8002872:	4603      	mov	r3, r0
 8002874:	75fb      	strb	r3, [r7, #23]
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d126      	bne.n	80028ca <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800287c:	8a7b      	ldrh	r3, [r7, #18]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8002888:	8a7b      	ldrh	r3, [r7, #18]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b29a      	uxth	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b21a      	sxth	r2, r3
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	b29b      	uxth	r3, r3
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	4313      	orrs	r3, r2
 80028a8:	b21b      	sxth	r3, r3
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b21a      	sxth	r2, r3
 80028b6:	89fb      	ldrh	r3, [r7, #14]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <BSP_PB_Callback+0x1c>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	2000020e 	.word	0x2000020e

080028f4 <platform_write>:


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	460b      	mov	r3, r1
 8002902:	72fb      	strb	r3, [r7, #11]
 8002904:	4613      	mov	r3, r2
 8002906:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 8002908:	7afb      	ldrb	r3, [r7, #11]
 800290a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800290e:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b29a      	uxth	r2, r3
 8002914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	893b      	ldrh	r3, [r7, #8]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	21bf      	movs	r1, #191	; 0xbf
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f002 fd64 	bl	80053f4 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af04      	add	r7, sp, #16
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	460b      	mov	r3, r1
 8002944:	72fb      	strb	r3, [r7, #11]
 8002946:	4613      	mov	r3, r2
 8002948:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 800294a:	7afb      	ldrb	r3, [r7, #11]
 800294c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002950:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	b29a      	uxth	r2, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	893b      	ldrh	r3, [r7, #8]
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	21bf      	movs	r1, #191	; 0xbf
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f002 fe57 	bl	800561c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <platform_write_lps>:

static int32_t platform_write_lps(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af04      	add	r7, sp, #16
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	461a      	mov	r2, r3
 8002984:	460b      	mov	r3, r1
 8002986:	72fb      	strb	r3, [r7, #11]
 8002988:	4613      	mov	r3, r2
 800298a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 800298c:	7afb      	ldrb	r3, [r7, #11]
 800298e:	b29a      	uxth	r2, r3
 8002990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	893b      	ldrh	r3, [r7, #8]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	21bb      	movs	r1, #187	; 0xbb
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f002 fd26 	bl	80053f4 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <platform_read_lps>:


static int32_t platform_read_lps(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b088      	sub	sp, #32
 80029b6:	af04      	add	r7, sp, #16
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	461a      	mov	r2, r3
 80029be:	460b      	mov	r3, r1
 80029c0:	72fb      	strb	r3, [r7, #11]
 80029c2:	4613      	mov	r3, r2
 80029c4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 80029c6:	7afb      	ldrb	r3, [r7, #11]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	21bb      	movs	r1, #187	; 0xbb
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f002 fe1d 	bl	800561c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	71fb      	strb	r3, [r7, #7]
 80029fe:	4603      	mov	r3, r0
 8002a00:	80bb      	strh	r3, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	71bb      	strb	r3, [r7, #6]
 8002a06:	4613      	mov	r3, r2
 8002a08:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <hci_le_connection_complete_event+0x38>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  connection_handle = Connection_Handle;
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <hci_le_connection_complete_event+0x3c>)
 8002a12:	88bb      	ldrh	r3, [r7, #4]
 8002a14:	8013      	strh	r3, [r2, #0]

  BSP_LED_Off(LED2); //activity led
 8002a16:	2000      	movs	r0, #0
 8002a18:	f001 fa14 	bl	8003e44 <BSP_LED_Off>
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	200007e0 	.word	0x200007e0
 8002a28:	200007dc 	.word	0x200007dc

08002a2c <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
 8002a36:	460b      	mov	r3, r1
 8002a38:	80bb      	strh	r3, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <hci_disconnection_complete_event+0x34>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
  /* Make the device connectable again */
  set_connectable = TRUE;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <hci_disconnection_complete_event+0x38>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
  connection_handle =0;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <hci_disconnection_complete_event+0x3c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected\r\n");

  BSP_LED_On(LED2); //activity led
 8002a50:	2000      	movs	r0, #0
 8002a52:	f001 f9e1 	bl	8003e18 <BSP_LED_On>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200007e0 	.word	0x200007e0
 8002a64:	20000001 	.word	0x20000001
 8002a68:	200007dc 	.word	0x200007dc

08002a6c <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
 8002a76:	460b      	mov	r3, r1
 8002a78:	80bb      	strh	r3, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 8002a7e:	88bb      	ldrh	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa45 	bl	8002f10 <Read_Request_CB>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08d      	sub	sp, #52	; 0x34
 8002a94:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 8002a96:	2305      	movs	r3, #5
 8002a98:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	0052      	lsls	r2, r2, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002aa8:	231b      	movs	r3, #27
 8002aaa:	713b      	strb	r3, [r7, #4]
 8002aac:	23c5      	movs	r3, #197	; 0xc5
 8002aae:	717b      	strb	r3, [r7, #5]
 8002ab0:	23d5      	movs	r3, #213	; 0xd5
 8002ab2:	71bb      	strb	r3, [r7, #6]
 8002ab4:	23a5      	movs	r3, #165	; 0xa5
 8002ab6:	71fb      	strb	r3, [r7, #7]
 8002ab8:	2302      	movs	r3, #2
 8002aba:	723b      	strb	r3, [r7, #8]
 8002abc:	2300      	movs	r3, #0
 8002abe:	727b      	strb	r3, [r7, #9]
 8002ac0:	23b4      	movs	r3, #180	; 0xb4
 8002ac2:	72bb      	strb	r3, [r7, #10]
 8002ac4:	239a      	movs	r3, #154	; 0x9a
 8002ac6:	72fb      	strb	r3, [r7, #11]
 8002ac8:	23e1      	movs	r3, #225	; 0xe1
 8002aca:	733b      	strb	r3, [r7, #12]
 8002acc:	2311      	movs	r3, #17
 8002ace:	737b      	strb	r3, [r7, #13]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73bb      	strb	r3, [r7, #14]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	743b      	strb	r3, [r7, #16]
 8002adc:	2300      	movs	r3, #0
 8002ade:	747b      	strb	r3, [r7, #17]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	74bb      	strb	r3, [r7, #18]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002ae8:	4b54      	ldr	r3, [pc, #336]	; (8002c3c <Add_HWServW2ST_Service+0x1ac>)
 8002aea:	461c      	mov	r4, r3
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002af4:	7dbb      	ldrb	r3, [r7, #22]
 8002af6:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <Add_HWServW2ST_Service+0x1b0>)
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	494f      	ldr	r1, [pc, #316]	; (8002c3c <Add_HWServW2ST_Service+0x1ac>)
 8002afe:	2002      	movs	r0, #2
 8002b00:	f006 f9ab 	bl	8008e5a <aci_gatt_add_service>
 8002b04:	4603      	mov	r3, r0
 8002b06:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002b08:	7d7b      	ldrb	r3, [r7, #21]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 8002b0e:	2347      	movs	r3, #71	; 0x47
 8002b10:	e08f      	b.n	8002c32 <Add_HWServW2ST_Service+0x1a2>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002b12:	231b      	movs	r3, #27
 8002b14:	713b      	strb	r3, [r7, #4]
 8002b16:	23c5      	movs	r3, #197	; 0xc5
 8002b18:	717b      	strb	r3, [r7, #5]
 8002b1a:	23d5      	movs	r3, #213	; 0xd5
 8002b1c:	71bb      	strb	r3, [r7, #6]
 8002b1e:	23a5      	movs	r3, #165	; 0xa5
 8002b20:	71fb      	strb	r3, [r7, #7]
 8002b22:	2302      	movs	r3, #2
 8002b24:	723b      	strb	r3, [r7, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	727b      	strb	r3, [r7, #9]
 8002b2a:	2336      	movs	r3, #54	; 0x36
 8002b2c:	72bb      	strb	r3, [r7, #10]
 8002b2e:	23ac      	movs	r3, #172	; 0xac
 8002b30:	72fb      	strb	r3, [r7, #11]
 8002b32:	23e1      	movs	r3, #225	; 0xe1
 8002b34:	733b      	strb	r3, [r7, #12]
 8002b36:	2311      	movs	r3, #17
 8002b38:	737b      	strb	r3, [r7, #13]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73bb      	strb	r3, [r7, #14]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	2300      	movs	r3, #0
 8002b44:	743b      	strb	r3, [r7, #16]
 8002b46:	2300      	movs	r3, #0
 8002b48:	747b      	strb	r3, [r7, #17]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	74bb      	strb	r3, [r7, #18]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002b52:	7cbb      	ldrb	r3, [r7, #18]
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x08;/* Humidty value*/
 8002b5c:	7cbb      	ldrb	r3, [r7, #18]
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002b66:	7cbb      	ldrb	r3, [r7, #18]
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <Add_HWServW2ST_Service+0x1b4>)
 8002b72:	461c      	mov	r4, r3
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <Add_HWServW2ST_Service+0x1b0>)
 8002b7e:	8818      	ldrh	r0, [r3, #0]
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <Add_HWServW2ST_Service+0x1b8>)
 8002b82:	9305      	str	r3, [sp, #20]
 8002b84:	2300      	movs	r3, #0
 8002b86:	9304      	str	r3, [sp, #16]
 8002b88:	2310      	movs	r3, #16
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2312      	movs	r3, #18
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	230a      	movs	r3, #10
 8002b9a:	4a2a      	ldr	r2, [pc, #168]	; (8002c44 <Add_HWServW2ST_Service+0x1b4>)
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	f006 fa32 	bl	8009006 <aci_gatt_add_char>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	757b      	strb	r3, [r7, #21]
                           2+2+4+2,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002ba6:	7d7b      	ldrb	r3, [r7, #21]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <Add_HWServW2ST_Service+0x120>
    return BLE_STATUS_ERROR;
 8002bac:	2347      	movs	r3, #71	; 0x47
 8002bae:	e040      	b.n	8002c32 <Add_HWServW2ST_Service+0x1a2>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002bb0:	231b      	movs	r3, #27
 8002bb2:	713b      	strb	r3, [r7, #4]
 8002bb4:	23c5      	movs	r3, #197	; 0xc5
 8002bb6:	717b      	strb	r3, [r7, #5]
 8002bb8:	23d5      	movs	r3, #213	; 0xd5
 8002bba:	71bb      	strb	r3, [r7, #6]
 8002bbc:	23a5      	movs	r3, #165	; 0xa5
 8002bbe:	71fb      	strb	r3, [r7, #7]
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	723b      	strb	r3, [r7, #8]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	727b      	strb	r3, [r7, #9]
 8002bc8:	2336      	movs	r3, #54	; 0x36
 8002bca:	72bb      	strb	r3, [r7, #10]
 8002bcc:	23ac      	movs	r3, #172	; 0xac
 8002bce:	72fb      	strb	r3, [r7, #11]
 8002bd0:	23e1      	movs	r3, #225	; 0xe1
 8002bd2:	733b      	strb	r3, [r7, #12]
 8002bd4:	2311      	movs	r3, #17
 8002bd6:	737b      	strb	r3, [r7, #13]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73bb      	strb	r3, [r7, #14]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	2300      	movs	r3, #0
 8002be2:	743b      	strb	r3, [r7, #16]
 8002be4:	2300      	movs	r3, #0
 8002be6:	747b      	strb	r3, [r7, #17]
 8002be8:	23e0      	movs	r3, #224	; 0xe0
 8002bea:	74bb      	strb	r3, [r7, #18]
 8002bec:	2300      	movs	r3, #0
 8002bee:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <Add_HWServW2ST_Service+0x1b4>)
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <Add_HWServW2ST_Service+0x1b0>)
 8002bfe:	8818      	ldrh	r0, [r3, #0]
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <Add_HWServW2ST_Service+0x1bc>)
 8002c02:	9305      	str	r3, [sp, #20]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9304      	str	r3, [sp, #16]
 8002c08:	2310      	movs	r3, #16
 8002c0a:	9303      	str	r3, [sp, #12]
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	9302      	str	r3, [sp, #8]
 8002c10:	2300      	movs	r3, #0
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	2310      	movs	r3, #16
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2314      	movs	r3, #20
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <Add_HWServW2ST_Service+0x1b4>)
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	f006 f9f2 	bl	8009006 <aci_gatt_add_char>
 8002c22:	4603      	mov	r3, r0
 8002c24:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002c26:	7d7b      	ldrb	r3, [r7, #21]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <Add_HWServW2ST_Service+0x1a0>
    return BLE_STATUS_ERROR;
 8002c2c:	2347      	movs	r3, #71	; 0x47
 8002c2e:	e000      	b.n	8002c32 <Add_HWServW2ST_Service+0x1a2>

  return BLE_STATUS_SUCCESS;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000660 	.word	0x20000660
 8002c40:	20000654 	.word	0x20000654
 8002c44:	20000670 	.word	0x20000670
 8002c48:	20000656 	.word	0x20000656
 8002c4c:	20000658 	.word	0x20000658

08002c50 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b08d      	sub	sp, #52	; 0x34
 8002c54:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	0052      	lsls	r2, r2, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002c68:	231b      	movs	r3, #27
 8002c6a:	713b      	strb	r3, [r7, #4]
 8002c6c:	23c5      	movs	r3, #197	; 0xc5
 8002c6e:	717b      	strb	r3, [r7, #5]
 8002c70:	23d5      	movs	r3, #213	; 0xd5
 8002c72:	71bb      	strb	r3, [r7, #6]
 8002c74:	23a5      	movs	r3, #165	; 0xa5
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	2302      	movs	r3, #2
 8002c7a:	723b      	strb	r3, [r7, #8]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	727b      	strb	r3, [r7, #9]
 8002c80:	23b4      	movs	r3, #180	; 0xb4
 8002c82:	72bb      	strb	r3, [r7, #10]
 8002c84:	239a      	movs	r3, #154	; 0x9a
 8002c86:	72fb      	strb	r3, [r7, #11]
 8002c88:	23e1      	movs	r3, #225	; 0xe1
 8002c8a:	733b      	strb	r3, [r7, #12]
 8002c8c:	2311      	movs	r3, #17
 8002c8e:	737b      	strb	r3, [r7, #13]
 8002c90:	2302      	movs	r3, #2
 8002c92:	73bb      	strb	r3, [r7, #14]
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	743b      	strb	r3, [r7, #16]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	747b      	strb	r3, [r7, #17]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	74bb      	strb	r3, [r7, #18]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <Add_SWServW2ST_Service+0x110>)
 8002caa:	461c      	mov	r4, r3
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002cb4:	7dbb      	ldrb	r3, [r7, #22]
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <Add_SWServW2ST_Service+0x114>)
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4928      	ldr	r1, [pc, #160]	; (8002d60 <Add_SWServW2ST_Service+0x110>)
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f006 f8cb 	bl	8008e5a <aci_gatt_add_service>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002cc8:	7d7b      	ldrb	r3, [r7, #21]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d13f      	bne.n	8002d4e <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002cce:	231b      	movs	r3, #27
 8002cd0:	713b      	strb	r3, [r7, #4]
 8002cd2:	23c5      	movs	r3, #197	; 0xc5
 8002cd4:	717b      	strb	r3, [r7, #5]
 8002cd6:	23d5      	movs	r3, #213	; 0xd5
 8002cd8:	71bb      	strb	r3, [r7, #6]
 8002cda:	23a5      	movs	r3, #165	; 0xa5
 8002cdc:	71fb      	strb	r3, [r7, #7]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	723b      	strb	r3, [r7, #8]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	727b      	strb	r3, [r7, #9]
 8002ce6:	2336      	movs	r3, #54	; 0x36
 8002ce8:	72bb      	strb	r3, [r7, #10]
 8002cea:	23ac      	movs	r3, #172	; 0xac
 8002cec:	72fb      	strb	r3, [r7, #11]
 8002cee:	23e1      	movs	r3, #225	; 0xe1
 8002cf0:	733b      	strb	r3, [r7, #12]
 8002cf2:	2311      	movs	r3, #17
 8002cf4:	737b      	strb	r3, [r7, #13]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73bb      	strb	r3, [r7, #14]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	743b      	strb	r3, [r7, #16]
 8002d02:	2301      	movs	r3, #1
 8002d04:	747b      	strb	r3, [r7, #17]
 8002d06:	2300      	movs	r3, #0
 8002d08:	74bb      	strb	r3, [r7, #18]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <Add_SWServW2ST_Service+0x118>)
 8002d10:	461c      	mov	r4, r3
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <Add_SWServW2ST_Service+0x114>)
 8002d1c:	8818      	ldrh	r0, [r3, #0]
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <Add_SWServW2ST_Service+0x11c>)
 8002d20:	9305      	str	r3, [sp, #20]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9304      	str	r3, [sp, #16]
 8002d26:	2310      	movs	r3, #16
 8002d28:	9303      	str	r3, [sp, #12]
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2310      	movs	r3, #16
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2308      	movs	r3, #8
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <Add_SWServW2ST_Service+0x118>)
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	f006 f963 	bl	8009006 <aci_gatt_add_char>
 8002d40:	4603      	mov	r3, r0
 8002d42:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002d44:	7d7b      	ldrb	r3, [r7, #21]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e003      	b.n	8002d56 <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8002d52:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002d54:	2347      	movs	r3, #71	; 0x47
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000660 	.word	0x20000660
 8002d64:	2000065a 	.word	0x2000065a
 8002d68:	20000670 	.word	0x20000670
 8002d6c:	2000065c 	.word	0x2000065c

08002d70 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	; 0x30
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002d7c:	f001 fdf0 	bl	8004960 <HAL_GetTick>
 8002d80:	4603      	mov	r3, r0
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	743b      	strb	r3, [r7, #16]
 8002d88:	f001 fdea 	bl	8004960 <HAL_GetTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	0adb      	lsrs	r3, r3, #11
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	425b      	negs	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	74bb      	strb	r3, [r7, #18]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	425b      	negs	r3, r3
 8002da6:	121b      	asrs	r3, r3, #8
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	753b      	strb	r3, [r7, #20]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	121b      	asrs	r3, r3, #8
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	75bb      	strb	r3, [r7, #22]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	425b      	negs	r3, r3
 8002dd0:	121b      	asrs	r3, r3, #8
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	763b      	strb	r3, [r7, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	121b      	asrs	r3, r3, #8
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	76bb      	strb	r3, [r7, #26]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	121b      	asrs	r3, r3, #8
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	773b      	strb	r3, [r7, #28]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	121b      	asrs	r3, r3, #8
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	77bb      	strb	r3, [r7, #30]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	121b      	asrs	r3, r3, #8
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f887 3020 	strb.w	r3, [r7, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	121b      	asrs	r3, r3, #8
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	121b      	asrs	r3, r3, #8
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <Acc_Update+0x10c>)
 8002e4c:	8818      	ldrh	r0, [r3, #0]
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <Acc_Update+0x110>)
 8002e50:	8819      	ldrh	r1, [r3, #0]
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2314      	movs	r3, #20
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f006 f9db 	bl	8009216 <aci_gatt_update_char_value>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <Acc_Update+0x102>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002e6e:	2347      	movs	r3, #71	; 0x47
 8002e70:	e000      	b.n	8002e74 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000654 	.word	0x20000654
 8002e80:	20000658 	.word	0x20000658

08002e84 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002e8c:	f001 fd68 	bl	8004960 <HAL_GetTick>
 8002e90:	4603      	mov	r3, r0
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	733b      	strb	r3, [r7, #12]
 8002e98:	f001 fd62 	bl	8004960 <HAL_GetTick>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	0adb      	lsrs	r3, r3, #11
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	73bb      	strb	r3, [r7, #14]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	121b      	asrs	r3, r3, #8
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	743b      	strb	r3, [r7, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	121b      	asrs	r3, r3, #8
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	74bb      	strb	r3, [r7, #18]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	121b      	asrs	r3, r3, #8
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <Quat_Update+0x84>)
 8002edc:	8818      	ldrh	r0, [r3, #0]
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <Quat_Update+0x88>)
 8002ee0:	8819      	ldrh	r1, [r3, #0]
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2308      	movs	r3, #8
 8002eea:	2200      	movs	r2, #0
 8002eec:	f006 f993 	bl	8009216 <aci_gatt_update_char_value>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <Quat_Update+0x7a>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002efa:	2347      	movs	r3, #71	; 0x47
 8002efc:	e000      	b.n	8002f00 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	2000065a 	.word	0x2000065a
 8002f0c:	2000065c 	.word	0x2000065c

08002f10 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b08e      	sub	sp, #56	; 0x38
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	84fb      	strh	r3, [r7, #38]	; 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002f1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <Read_Request_CB+0x188>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d105      	bne.n	8002f34 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002f28:	4a5c      	ldr	r2, [pc, #368]	; (800309c <Read_Request_CB+0x18c>)
 8002f2a:	495d      	ldr	r1, [pc, #372]	; (80030a0 <Read_Request_CB+0x190>)
 8002f2c:	485d      	ldr	r0, [pc, #372]	; (80030a4 <Read_Request_CB+0x194>)
 8002f2e:	f7ff ff1f 	bl	8002d70 <Acc_Update>
 8002f32:	e09e      	b.n	8003072 <Read_Request_CB+0x162>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002f34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f36:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <Read_Request_CB+0x198>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f040 8098 	bne.w	8003072 <Read_Request_CB+0x162>
  {
    float data_t, data_p, data_h;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002f42:	f008 fb47 	bl	800b5d4 <rand>
 8002f46:	4603      	mov	r3, r0
 8002f48:	17da      	asrs	r2, r3, #31
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	61fa      	str	r2, [r7, #28]
 8002f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f60:	0090      	lsls	r0, r2, #2
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	1851      	adds	r1, r2, r1
 8002f6a:	6139      	str	r1, [r7, #16]
 8002f6c:	69f9      	ldr	r1, [r7, #28]
 8002f6e:	eb43 0101 	adc.w	r1, r3, r1
 8002f72:	6179      	str	r1, [r7, #20]
 8002f74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f80:	f7fd fe62 	bl	8000c48 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fd fafe 	bl	800058c <__aeabi_ul2d>
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	4b45      	ldr	r3, [pc, #276]	; (80030ac <Read_Request_CB+0x19c>)
 8002f96:	f7fd f979 	bl	800028c <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fe01 	bl	8000ba8 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002faa:	f008 fb13 	bl	800b5d4 <rand>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	17da      	asrs	r2, r3, #31
 8002fb2:	4698      	mov	r8, r3
 8002fb4:	4691      	mov	r9, r2
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc6:	eb12 0408 	adds.w	r4, r2, r8
 8002fca:	eb43 0509 	adc.w	r5, r3, r9
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	016b      	lsls	r3, r5, #5
 8002fd8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002fdc:	0162      	lsls	r2, r4, #5
 8002fde:	eb14 0a02 	adds.w	sl, r4, r2
 8002fe2:	eb45 0b03 	adc.w	fp, r5, r3
 8002fe6:	eb1a 0308 	adds.w	r3, sl, r8
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	eb4b 0309 	adc.w	r3, fp, r9
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ffe:	f7fd fe23 	bl	8000c48 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fabf 	bl	800058c <__aeabi_ul2d>
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <Read_Request_CB+0x1a0>)
 8003014:	f7fd f93a 	bl	800028c <__adddf3>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f7fd fdc2 	bl	8000ba8 <__aeabi_d2f>
 8003024:	4603      	mov	r3, r0
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
    data_h = 10;
 8003028:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <Read_Request_CB+0x1a4>)
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10) ,(int16_t)(data_h * 10));
 800302c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003030:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80030b8 <Read_Request_CB+0x1a8>
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800303c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003040:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304c:	ee17 3a90 	vmov	r3, s15
 8003050:	b21b      	sxth	r3, r3
 8003052:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003056:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800305a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003062:	ee17 2a90 	vmov	r2, s15
 8003066:	b212      	sxth	r2, r2
 8003068:	4619      	mov	r1, r3
 800306a:	ee16 0a90 	vmov	r0, s13
 800306e:	f000 f827 	bl	80030c0 <Environmental_Update>
  }

  if(connection_handle !=0)
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <Read_Request_CB+0x1ac>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <Read_Request_CB+0x17e>
  {
    ret = aci_gatt_allow_read(connection_handle);
 800307c:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <Read_Request_CB+0x1ac>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f006 f979 	bl	800937a <aci_gatt_allow_read>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 800308e:	bf00      	nop
 8003090:	3738      	adds	r7, #56	; 0x38
 8003092:	46bd      	mov	sp, r7
 8003094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003098:	20000658 	.word	0x20000658
 800309c:	200007fc 	.word	0x200007fc
 80030a0:	200007f0 	.word	0x200007f0
 80030a4:	200007e4 	.word	0x200007e4
 80030a8:	20000656 	.word	0x20000656
 80030ac:	403b0000 	.word	0x403b0000
 80030b0:	408f4000 	.word	0x408f4000
 80030b4:	41200000 	.word	0x41200000
 80030b8:	42c80000 	.word	0x42c80000
 80030bc:	200007dc 	.word	0x200007dc

080030c0 <Environmental_Update>:

tBleStatus Environmental_Update(int32_t press, int16_t temp , int16_t humi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	803b      	strh	r3, [r7, #0]
  tBleStatus ret;
  uint8_t buff[10];
  //HOST_TO_LE_16(buff, HAL_GetTick()>>3);
  HOST_TO_LE_16(buff, 0);
 80030d0:	2300      	movs	r3, #0
 80030d2:	733b      	strb	r3, [r7, #12]
 80030d4:	2300      	movs	r3, #0
 80030d6:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	73bb      	strb	r3, [r7, #14]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	121b      	asrs	r3, r3, #8
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	141b      	asrs	r3, r3, #16
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	743b      	strb	r3, [r7, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	161b      	asrs	r3, r3, #24
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_32(buff+6,humi);
 80030f6:	883b      	ldrh	r3, [r7, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	74bb      	strb	r3, [r7, #18]
 80030fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003100:	121b      	asrs	r3, r3, #8
 8003102:	b21b      	sxth	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	74fb      	strb	r3, [r7, #19]
 8003108:	f9b7 3000 	ldrsh.w	r3, [r7]
 800310c:	141b      	asrs	r3, r3, #16
 800310e:	b2db      	uxtb	r3, r3
 8003110:	753b      	strb	r3, [r7, #20]
 8003112:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003116:	161b      	asrs	r3, r3, #24
 8003118:	b2db      	uxtb	r3, r3
 800311a:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+8,temp);
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	753b      	strb	r3, [r7, #20]
 8003122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003126:	121b      	asrs	r3, r3, #8
 8003128:	b21b      	sxth	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	757b      	strb	r3, [r7, #21]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <Environmental_Update+0x9c>)
 8003130:	8818      	ldrh	r0, [r3, #0]
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <Environmental_Update+0xa0>)
 8003134:	8819      	ldrh	r1, [r3, #0]
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	230a      	movs	r3, #10
 800313e:	2200      	movs	r2, #0
 8003140:	f006 f869 	bl	8009216 <aci_gatt_update_char_value>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]
                                   0, 10, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <Environmental_Update+0x92>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 800314e:	2347      	movs	r3, #71	; 0x47
 8003150:	e000      	b.n	8003154 <Environmental_Update+0x94>
  }

  return BLE_STATUS_SUCCESS;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000654 	.word	0x20000654
 8003160:	20000656 	.word	0x20000656

08003164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <MX_GPIO_Init+0xe8>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	4a33      	ldr	r2, [pc, #204]	; (800324c <MX_GPIO_Init+0xe8>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <MX_GPIO_Init+0xe8>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <MX_GPIO_Init+0xe8>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	4a2d      	ldr	r2, [pc, #180]	; (800324c <MX_GPIO_Init+0xe8>)
 8003198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <MX_GPIO_Init+0xe8>)
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	4b28      	ldr	r3, [pc, #160]	; (800324c <MX_GPIO_Init+0xe8>)
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <MX_GPIO_Init+0xe8>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <MX_GPIO_Init+0xe8>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <MX_GPIO_Init+0xe8>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4a21      	ldr	r2, [pc, #132]	; (800324c <MX_GPIO_Init+0xe8>)
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <MX_GPIO_Init+0xe8>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80031da:	2200      	movs	r2, #0
 80031dc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f002 f844 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4619      	mov	r1, r3
 80031fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003200:	f001 fd80 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8003204:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003212:	2300      	movs	r3, #0
 8003214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003220:	f001 fd70 	bl	8004d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	2006      	movs	r0, #6
 800322a:	f001 fcc8 	bl	8004bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800322e:	2006      	movs	r0, #6
 8003230:	f001 fce1 	bl	8004bf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2100      	movs	r1, #0
 8003238:	2028      	movs	r0, #40	; 0x28
 800323a:	f001 fcc0 	bl	8004bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800323e:	2028      	movs	r0, #40	; 0x28
 8003240:	f001 fcd9 	bl	8004bf6 <HAL_NVIC_EnableIRQ>

}
 8003244:	bf00      	nop
 8003246:	3728      	adds	r7, #40	; 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000

08003250 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003254:	2006      	movs	r0, #6
 8003256:	f001 fcce 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}

0800325e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003262:	2006      	movs	r0, #6
 8003264:	f001 fcd5 	bl	8004c12 <HAL_NVIC_DisableIRQ>
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}

0800326c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003274:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HCI_TL_SPI_Init+0x94>)
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HCI_TL_SPI_Init+0x94>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003280:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <HCI_TL_SPI_Init+0x94>)
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800328c:	2301      	movs	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003290:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a4:	f001 fd2e 	bl	8004d04 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80032a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ae:	2301      	movs	r3, #1
 80032b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	4619      	mov	r1, r3
 80032c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c4:	f001 fd1e 	bl	8004d04 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80032c8:	2302      	movs	r3, #2
 80032ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032cc:	2301      	movs	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	4619      	mov	r1, r3
 80032de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e2:	f001 fd0f 	bl	8004d04 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80032e6:	2201      	movs	r2, #1
 80032e8:	2102      	movs	r1, #2
 80032ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ee:	f001 ffbf 	bl	8005270 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80032f2:	f000 fbbd 	bl	8003a70 <BSP_SPI1_Init>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8003308:	2101      	movs	r1, #1
 800330a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330e:	f001 fea3 	bl	8005058 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8003312:	2102      	movs	r1, #2
 8003314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003318:	f001 fe9e 	bl	8005058 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800331c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003324:	f001 fe98 	bl	8005058 <HAL_GPIO_DeInit>
  return 0;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	bd80      	pop	{r7, pc}

0800332e <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003332:	2201      	movs	r2, #1
 8003334:	2102      	movs	r1, #2
 8003336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333a:	f001 ff99 	bl	8005270 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800333e:	2200      	movs	r2, #0
 8003340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003348:	f001 ff92 	bl	8005270 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800334c:	2005      	movs	r0, #5
 800334e:	f001 fb13 	bl	8004978 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8003352:	2201      	movs	r2, #1
 8003354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335c:	f001 ff88 	bl	8005270 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003360:	2005      	movs	r0, #5
 8003362:	f001 fb09 	bl	8004978 <HAL_Delay>
  return 0;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}

0800336c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800337c:	2300      	movs	r3, #0
 800337e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <HCI_TL_SPI_Receive+0xb4>)
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800338a:	6018      	str	r0, [r3, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8003390:	f7ff ff65 	bl	800325e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003394:	2200      	movs	r2, #0
 8003396:	2102      	movs	r1, #2
 8003398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339c:	f001 ff68 	bl	8005270 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80033a0:	f107 010c 	add.w	r1, r7, #12
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	2205      	movs	r2, #5
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb90 	bl	8003ad0 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80033b0:	7c3b      	ldrb	r3, [r7, #16]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	b21a      	sxth	r2, r3
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b21b      	sxth	r3, r3
 80033be:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80033c0:	8bfb      	ldrh	r3, [r7, #30]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01e      	beq.n	8003404 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80033c6:	8bfa      	ldrh	r2, [r7, #30]
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d901      	bls.n	80033d2 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	777b      	strb	r3, [r7, #29]
 80033d6:	e010      	b.n	80033fa <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80033d8:	f107 011b 	add.w	r1, r7, #27
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	2201      	movs	r2, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fb74 	bl	8003ad0 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80033e8:	7f7b      	ldrb	r3, [r7, #29]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	7efa      	ldrb	r2, [r7, #27]
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80033f4:	7f7b      	ldrb	r3, [r7, #29]
 80033f6:	3301      	adds	r3, #1
 80033f8:	777b      	strb	r3, [r7, #29]
 80033fa:	7f7b      	ldrb	r3, [r7, #29]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	8bfa      	ldrh	r2, [r7, #30]
 8003400:	429a      	cmp	r2, r3
 8003402:	d8e9      	bhi.n	80033d8 <HCI_TL_SPI_Receive+0x6c>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003404:	2201      	movs	r2, #1
 8003406:	2102      	movs	r1, #2
 8003408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800340c:	f001 ff30 	bl	8005270 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8003410:	f7ff ff1e 	bl	8003250 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8003414:	7f7b      	ldrb	r3, [r7, #29]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	0800e3c4 	.word	0x0800e3c4

08003424 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003430:	4a36      	ldr	r2, [pc, #216]	; (800350c <HCI_TL_SPI_Send+0xe8>)
 8003432:	f107 0314 	add.w	r3, r7, #20
 8003436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800343a:	6018      	str	r0, [r3, #0]
 800343c:	3304      	adds	r3, #4
 800343e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8003440:	f001 fa8e 	bl	8004960 <HAL_GetTick>
 8003444:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8003446:	f7ff ff0a 	bl	800325e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800344a:	f001 fa89 	bl	8004960 <HAL_GetTick>
 800344e:	61f8      	str	r0, [r7, #28]

    result = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003454:	2200      	movs	r2, #0
 8003456:	2102      	movs	r1, #2
 8003458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800345c:	f001 ff08 	bl	8005270 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8003460:	e00a      	b.n	8003478 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8003462:	f001 fa7d 	bl	8004960 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d903      	bls.n	8003478 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8003470:	f06f 0302 	mvn.w	r3, #2
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003476:	e004      	b.n	8003482 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 8003478:	f000 f84c 	bl	8003514 <IsDataAvailable>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ef      	beq.n	8003462 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f113 0f03 	cmn.w	r3, #3
 8003488:	d106      	bne.n	8003498 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800348a:	2201      	movs	r2, #1
 800348c:	2102      	movs	r1, #2
 800348e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003492:	f001 feed 	bl	8005270 <HAL_GPIO_WritePin>
      break;
 8003496:	e031      	b.n	80034fc <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003498:	f107 010c 	add.w	r1, r7, #12
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2205      	movs	r2, #5
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fb14 	bl	8003ad0 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	b21a      	sxth	r2, r3
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	b21b      	sxth	r3, r3
 80034b2:	4313      	orrs	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80034b8:	8b7a      	ldrh	r2, [r7, #26]
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d306      	bcc.n	80034ce <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	461a      	mov	r2, r3
 80034c4:	4912      	ldr	r1, [pc, #72]	; (8003510 <HCI_TL_SPI_Send+0xec>)
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fb02 	bl	8003ad0 <BSP_SPI1_SendRecv>
 80034cc:	e002      	b.n	80034d4 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80034ce:	f06f 0301 	mvn.w	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80034d4:	2201      	movs	r2, #1
 80034d6:	2102      	movs	r1, #2
 80034d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034dc:	f001 fec8 	bl	8005270 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80034e0:	f001 fa3e 	bl	8004960 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d903      	bls.n	80034f6 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 80034ee:	f06f 0302 	mvn.w	r3, #2
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80034f4:	e002      	b.n	80034fc <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	dba6      	blt.n	800344a <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 80034fc:	f7ff fea8 	bl	8003250 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003502:	4618      	mov	r0, r3
 8003504:	3728      	adds	r7, #40	; 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	0800e3cc 	.word	0x0800e3cc
 8003510:	20000688 	.word	0x20000688

08003514 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003518:	2101      	movs	r1, #1
 800351a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351e:	f001 fe8f 	bl	8005240 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
}
 800352e:	4618      	mov	r0, r3
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <hci_tl_lowlevel_init+0x54>)
 800353c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <hci_tl_lowlevel_init+0x58>)
 8003540:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <hci_tl_lowlevel_init+0x5c>)
 8003544:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <hci_tl_lowlevel_init+0x60>)
 8003548:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <hci_tl_lowlevel_init+0x64>)
 800354c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <hci_tl_lowlevel_init+0x68>)
 8003550:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f007 fd47 	bl	800afe8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800355a:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 800355e:	4810      	ldr	r0, [pc, #64]	; (80035a0 <hci_tl_lowlevel_init+0x6c>)
 8003560:	f001 fb8b 	bl	8004c7a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003564:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <hci_tl_lowlevel_init+0x70>)
 8003566:	2100      	movs	r1, #0
 8003568:	480d      	ldr	r0, [pc, #52]	; (80035a0 <hci_tl_lowlevel_init+0x6c>)
 800356a:	f001 fb6c 	bl	8004c46 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	2006      	movs	r0, #6
 8003574:	f001 fb23 	bl	8004bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003578:	2006      	movs	r0, #6
 800357a:	f001 fb3c 	bl	8004bf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800357e:	bf00      	nop
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	0800326d 	.word	0x0800326d
 800358c:	08003305 	.word	0x08003305
 8003590:	08003425 	.word	0x08003425
 8003594:	0800336d 	.word	0x0800336d
 8003598:	0800332f 	.word	0x0800332f
 800359c:	08003b11 	.word	0x08003b11
 80035a0:	20000680 	.word	0x20000680
 80035a4:	080035a9 	.word	0x080035a9

080035a8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80035ac:	e005      	b.n	80035ba <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80035ae:	2000      	movs	r0, #0
 80035b0:	f007 fe7e 	bl	800b2b0 <hci_notify_asynch_evt>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80035ba:	f7ff ffab 	bl	8003514 <IsDataAvailable>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f4      	bne.n	80035ae <hci_tl_lowlevel_isr+0x6>
 80035c4:	e000      	b.n	80035c8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80035c6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <MX_I2C1_Init+0x74>)
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <MX_I2C1_Init+0x78>)
 80035d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <MX_I2C1_Init+0x74>)
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <MX_I2C1_Init+0x7c>)
 80035da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <MX_I2C1_Init+0x74>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <MX_I2C1_Init+0x74>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_I2C1_Init+0x74>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <MX_I2C1_Init+0x74>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_I2C1_Init+0x74>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_I2C1_Init+0x74>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_I2C1_Init+0x74>)
 8003602:	2200      	movs	r2, #0
 8003604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003606:	480e      	ldr	r0, [pc, #56]	; (8003640 <MX_I2C1_Init+0x74>)
 8003608:	f001 fe64 	bl	80052d4 <HAL_I2C_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003612:	f000 f8d9 	bl	80037c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003616:	2100      	movs	r1, #0
 8003618:	4809      	ldr	r0, [pc, #36]	; (8003640 <MX_I2C1_Init+0x74>)
 800361a:	f002 fbbf 	bl	8005d9c <HAL_I2CEx_ConfigAnalogFilter>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003624:	f000 f8d0 	bl	80037c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003628:	2100      	movs	r1, #0
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_I2C1_Init+0x74>)
 800362c:	f002 fc01 	bl	8005e32 <HAL_I2CEx_ConfigDigitalFilter>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003636:	f000 f8c7 	bl	80037c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000788 	.word	0x20000788
 8003644:	40005400 	.word	0x40005400
 8003648:	10707dbc 	.word	0x10707dbc

0800364c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b0ac      	sub	sp, #176	; 0xb0
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2288      	movs	r2, #136	; 0x88
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f008 fd7a 	bl	800c166 <memset>
  if(i2cHandle->Instance==I2C1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_I2C_MspInit+0xb0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d13b      	bne.n	80036f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800367c:	2340      	movs	r3, #64	; 0x40
 800367e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003680:	2300      	movs	r3, #0
 8003682:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4618      	mov	r0, r3
 800368a:	f003 fa83 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003694:	f000 f898 	bl	80037c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_I2C_MspInit+0xb4>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_I2C_MspInit+0xb4>)
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_I2C_MspInit+0xb4>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b8:	2312      	movs	r3, #18
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c4:	2303      	movs	r3, #3
 80036c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036ca:	2304      	movs	r3, #4
 80036cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036d4:	4619      	mov	r1, r3
 80036d6:	480b      	ldr	r0, [pc, #44]	; (8003704 <HAL_I2C_MspInit+0xb8>)
 80036d8:	f001 fb14 	bl	8004d04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_I2C_MspInit+0xb4>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_I2C_MspInit+0xb4>)
 80036e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_I2C_MspInit+0xb4>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036f4:	bf00      	nop
 80036f6:	37b0      	adds	r7, #176	; 0xb0
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40005400 	.word	0x40005400
 8003700:	40021000 	.word	0x40021000
 8003704:	48000400 	.word	0x48000400

08003708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800370c:	f001 f8b8 	bl	8004880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003710:	f000 f809 	bl	8003726 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003714:	f7ff fd26 	bl	8003164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003718:	f7ff ff58 	bl	80035cc <MX_I2C1_Init>
  MX_BlueNRG_2_Init();
 800371c:	f7fd fc78 	bl	8001010 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 8003720:	f7fd fd30 	bl	8001184 <MX_BlueNRG_2_Process>
 8003724:	e7fc      	b.n	8003720 <main+0x18>

08003726 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b096      	sub	sp, #88	; 0x58
 800372a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	2244      	movs	r2, #68	; 0x44
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f008 fd16 	bl	800c166 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800373a:	463b      	mov	r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003748:	f44f 7000 	mov.w	r0, #512	; 0x200
 800374c:	f002 fbcc 	bl	8005ee8 <HAL_PWREx_ControlVoltageScaling>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003756:	f000 f837 	bl	80037c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800375a:	2302      	movs	r3, #2
 800375c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800375e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003764:	2310      	movs	r3, #16
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003768:	2302      	movs	r3, #2
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800376c:	2302      	movs	r3, #2
 800376e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003774:	2308      	movs	r3, #8
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003778:	2307      	movs	r3, #7
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800377c:	2302      	movs	r3, #2
 800377e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003780:	2302      	movs	r3, #2
 8003782:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4618      	mov	r0, r3
 800378a:	f002 fc03 	bl	8005f94 <HAL_RCC_OscConfig>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003794:	f000 f818 	bl	80037c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003798:	230f      	movs	r3, #15
 800379a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800379c:	2303      	movs	r3, #3
 800379e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037ac:	463b      	mov	r3, r7
 80037ae:	2103      	movs	r1, #3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 ffcb 	bl	800674c <HAL_RCC_ClockConfig>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037bc:	f000 f804 	bl	80037c8 <Error_Handler>
  }
}
 80037c0:	bf00      	nop
 80037c2:	3758      	adds	r7, #88	; 0x58
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037cc:	b672      	cpsid	i
}
 80037ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <Error_Handler+0x8>
	...

080037d4 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b092      	sub	sp, #72	; 0x48
 80037d8:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80037da:	4a36      	ldr	r2, [pc, #216]	; (80038b4 <Set_DeviceConnectable+0xe0>)
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037e4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80037e8:	2302      	movs	r3, #2
 80037ea:	703b      	strb	r3, [r7, #0]
 80037ec:	230a      	movs	r3, #10
 80037ee:	707b      	strb	r3, [r7, #1]
 80037f0:	2300      	movs	r3, #0
 80037f2:	70bb      	strb	r3, [r7, #2]
 80037f4:	2308      	movs	r3, #8
 80037f6:	70fb      	strb	r3, [r7, #3]
 80037f8:	2309      	movs	r3, #9
 80037fa:	713b      	strb	r3, [r7, #4]
 80037fc:	2342      	movs	r3, #66	; 0x42
 80037fe:	717b      	strb	r3, [r7, #5]
 8003800:	236c      	movs	r3, #108	; 0x6c
 8003802:	71bb      	strb	r3, [r7, #6]
 8003804:	2375      	movs	r3, #117	; 0x75
 8003806:	71fb      	strb	r3, [r7, #7]
 8003808:	2365      	movs	r3, #101	; 0x65
 800380a:	723b      	strb	r3, [r7, #8]
 800380c:	234e      	movs	r3, #78	; 0x4e
 800380e:	727b      	strb	r3, [r7, #9]
 8003810:	2352      	movs	r3, #82	; 0x52
 8003812:	72bb      	strb	r3, [r7, #10]
 8003814:	2347      	movs	r3, #71	; 0x47
 8003816:	72fb      	strb	r3, [r7, #11]
 8003818:	230d      	movs	r3, #13
 800381a:	733b      	strb	r3, [r7, #12]
 800381c:	23ff      	movs	r3, #255	; 0xff
 800381e:	737b      	strb	r3, [r7, #13]
 8003820:	2301      	movs	r3, #1
 8003822:	73bb      	strb	r3, [r7, #14]
 8003824:	2302      	movs	r3, #2
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	2300      	movs	r3, #0
 800382a:	743b      	strb	r3, [r7, #16]
 800382c:	23f4      	movs	r3, #244	; 0xf4
 800382e:	747b      	strb	r3, [r7, #17]
 8003830:	2300      	movs	r3, #0
 8003832:	74bb      	strb	r3, [r7, #18]
 8003834:	2300      	movs	r3, #0
 8003836:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <Set_DeviceConnectable+0xe4>)
 800383a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 800383c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <Set_DeviceConnectable+0xe4>)
 8003840:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8003842:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <Set_DeviceConnectable+0xe4>)
 8003846:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8003848:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <Set_DeviceConnectable+0xe4>)
 800384c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800384e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <Set_DeviceConnectable+0xe4>)
 8003852:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8003854:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <Set_DeviceConnectable+0xe4>)
 8003858:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800385a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 800385c:	7cbb      	ldrb	r3, [r7, #18]
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	b2db      	uxtb	r3, r3
 8003864:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 8003866:	2100      	movs	r1, #0
 8003868:	2000      	movs	r0, #0
 800386a:	f007 fa68 	bl	800ad3e <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 800386e:	2300      	movs	r3, #0
 8003870:	9306      	str	r3, [sp, #24]
 8003872:	2300      	movs	r3, #0
 8003874:	9305      	str	r3, [sp, #20]
 8003876:	2300      	movs	r3, #0
 8003878:	9304      	str	r3, [sp, #16]
 800387a:	2300      	movs	r3, #0
 800387c:	9303      	str	r3, [sp, #12]
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	2308      	movs	r3, #8
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2301      	movs	r3, #1
 800388e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003896:	2000      	movs	r0, #0
 8003898:	f004 ffbd 	bl	8008816 <aci_gap_set_discoverable>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80038a2:	463b      	mov	r3, r7
 80038a4:	4619      	mov	r1, r3
 80038a6:	201a      	movs	r0, #26
 80038a8:	f005 fa32 	bl	8008d10 <aci_gap_update_adv_data>
  {
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80038ac:	bf00      	nop
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	0800e3d4 	.word	0x0800e3d4
 80038b8:	20000208 	.word	0x20000208

080038bc <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d163      	bne.n	8003998 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	3301      	adds	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b3e      	cmp	r3, #62	; 0x3e
 80038dc:	d11e      	bne.n	800391c <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3302      	adds	r3, #2
 80038e2:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e014      	b.n	8003914 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	492b      	ldr	r1, [pc, #172]	; (80039a0 <APP_UserEvtRx+0xe4>)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d108      	bne.n	800390e <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <APP_UserEvtRx+0xe4>)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	3201      	adds	r2, #1
 800390a:	4610      	mov	r0, r2
 800390c:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b09      	cmp	r3, #9
 8003918:	d9e7      	bls.n	80038ea <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800391a:	e03d      	b.n	8003998 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2bff      	cmp	r3, #255	; 0xff
 8003922:	d11e      	bne.n	8003962 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3302      	adds	r3, #2
 8003928:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e014      	b.n	800395a <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29a      	uxth	r2, r3
 8003936:	491b      	ldr	r1, [pc, #108]	; (80039a4 <APP_UserEvtRx+0xe8>)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800393e:	429a      	cmp	r2, r3
 8003940:	d108      	bne.n	8003954 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8003942:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <APP_UserEvtRx+0xe8>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	3202      	adds	r2, #2
 8003950:	4610      	mov	r0, r2
 8003952:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3301      	adds	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b2a      	cmp	r3, #42	; 0x2a
 800395e:	d9e7      	bls.n	8003930 <APP_UserEvtRx+0x74>
}
 8003960:	e01a      	b.n	8003998 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e014      	b.n	8003992 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b29a      	uxth	r2, r3
 800396e:	490e      	ldr	r1, [pc, #56]	; (80039a8 <APP_UserEvtRx+0xec>)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003976:	429a      	cmp	r2, r3
 8003978:	d108      	bne.n	800398c <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 800397a:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <APP_UserEvtRx+0xec>)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	3202      	adds	r2, #2
 8003988:	4610      	mov	r0, r2
 800398a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b06      	cmp	r3, #6
 8003996:	d9e7      	bls.n	8003968 <APP_UserEvtRx+0xac>
}
 8003998:	bf00      	nop
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	0800e470 	.word	0x0800e470
 80039a4:	0800e4c0 	.word	0x0800e4c0
 80039a8:	0800e438 	.word	0x0800e438

080039ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_MspInit+0x44>)
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <HAL_MspInit+0x44>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6613      	str	r3, [r2, #96]	; 0x60
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_MspInit+0x44>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_MspInit+0x44>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <HAL_MspInit+0x44>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6593      	str	r3, [r2, #88]	; 0x58
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_MspInit+0x44>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000

080039f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <NMI_Handler+0x4>

080039fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fe:	e7fe      	b.n	80039fe <HardFault_Handler+0x4>

08003a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <MemManage_Handler+0x4>

08003a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <BusFault_Handler+0x4>

08003a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <UsageFault_Handler+0x4>

08003a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a40:	f000 ff7a 	bl	8004938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <EXTI0_IRQHandler+0x10>)
 8003a4e:	f001 f929 	bl	8004ca4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000680 	.word	0x20000680

08003a5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <EXTI15_10_IRQHandler+0x10>)
 8003a62:	f001 f91f 	bl	8004ca4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <BSP_SPI1_Init+0x54>)
 8003a7c:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <BSP_SPI1_Init+0x58>)
 8003a7e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <BSP_SPI1_Init+0x5c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4911      	ldr	r1, [pc, #68]	; (8003acc <BSP_SPI1_Init+0x5c>)
 8003a88:	600a      	str	r2, [r1, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d114      	bne.n	8003ab8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003a8e:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <BSP_SPI1_Init+0x54>)
 8003a90:	f003 fffc 	bl	8007a8c <HAL_SPI_GetState>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <BSP_SPI1_Init+0x54>)
 8003a9c:	f000 f882 	bl	8003ba4 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003aa6:	4807      	ldr	r0, [pc, #28]	; (8003ac4 <BSP_SPI1_Init+0x54>)
 8003aa8:	f000 f83a 	bl	8003b20 <MX_SPI1_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003ab2:	f06f 0307 	mvn.w	r3, #7
 8003ab6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000814 	.word	0x20000814
 8003ac8:	40013000 	.word	0x40013000
 8003acc:	20000878 	.word	0x20000878

08003ad0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae8:	9200      	str	r2, [sp, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	4807      	ldr	r0, [pc, #28]	; (8003b0c <BSP_SPI1_SendRecv+0x3c>)
 8003af0:	f003 fdb9 	bl	8007666 <HAL_SPI_TransmitReceive>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003afa:	f06f 0305 	mvn.w	r3, #5
 8003afe:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003b00:	697b      	ldr	r3, [r7, #20]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000814 	.word	0x20000814

08003b10 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b14:	f000 ff24 	bl	8004960 <HAL_GetTick>
 8003b18:	4603      	mov	r3, r0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <MX_SPI1_Init+0x80>)
 8003b30:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b38:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b46:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2228      	movs	r2, #40	; 0x28
 8003b60:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2207      	movs	r2, #7
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f003 fcc0 	bl	800750c <HAL_SPI_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40013000 	.word	0x40013000

08003ba4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <SPI1_MspInit+0xbc>)
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003c04:	2305      	movs	r3, #5
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c12:	f001 f877 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003c26:	2305      	movs	r3, #5
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c34:	f001 f866 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003c38:	2308      	movs	r3, #8
 8003c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c44:	2303      	movs	r3, #3
 8003c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003c48:	2305      	movs	r3, #5
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	4619      	mov	r1, r3
 8003c52:	4804      	ldr	r0, [pc, #16]	; (8003c64 <SPI1_MspInit+0xc0>)
 8003c54:	f001 f856 	bl	8004d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	3728      	adds	r7, #40	; 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	48000400 	.word	0x48000400

08003c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return 1;
 8003c6c:	2301      	movs	r3, #1
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <_kill>:

int _kill(int pid, int sig)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c82:	f008 fac3 	bl	800c20c <__errno>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2216      	movs	r2, #22
 8003c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_exit>:

void _exit (int status)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ffe7 	bl	8003c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003caa:	e7fe      	b.n	8003caa <_exit+0x12>

08003cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e00a      	b.n	8003cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cbe:	f3af 8000 	nop.w
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	60ba      	str	r2, [r7, #8]
 8003cca:	b2ca      	uxtb	r2, r1
 8003ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	dbf0      	blt.n	8003cbe <_read+0x12>
  }

  return len;
 8003cdc:	687b      	ldr	r3, [r7, #4]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e009      	b.n	8003d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	60ba      	str	r2, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f9c3 	bl	800408c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dbf1      	blt.n	8003cf8 <_write+0x12>
  }
  return len;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <_close>:

int _close(int file)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d46:	605a      	str	r2, [r3, #4]
  return 0;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <_isatty>:

int _isatty(int file)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d5e:	2301      	movs	r3, #1
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <_sbrk+0x5c>)
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <_sbrk+0x60>)
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <_sbrk+0x64>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <_sbrk+0x64>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <_sbrk+0x68>)
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <_sbrk+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d207      	bcs.n	8003dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db8:	f008 fa28 	bl	800c20c <__errno>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	e009      	b.n	8003ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <_sbrk+0x64>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <_sbrk+0x64>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4a05      	ldr	r2, [pc, #20]	; (8003dec <_sbrk+0x64>)
 8003dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dda:	68fb      	ldr	r3, [r7, #12]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20018000 	.word	0x20018000
 8003de8:	00000800 	.word	0x00000800
 8003dec:	2000087c 	.word	0x2000087c
 8003df0:	20001000 	.word	0x20001000

08003df4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <BSP_LED_Init+0x20>)
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	0800e3dc 	.word	0x0800e3dc

08003e18 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <BSP_LED_On+0x28>)
 8003e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2a:	2120      	movs	r1, #32
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fa1e 	bl	8005270 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000004 	.word	0x20000004

08003e44 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <BSP_LED_Off+0x28>)
 8003e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e56:	2120      	movs	r1, #32
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fa08 	bl	8005270 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000004 	.word	0x20000004

08003e70 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <BSP_LED_Toggle+0x28>)
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	2220      	movs	r2, #32
 8003e84:	4611      	mov	r1, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fa0a 	bl	80052a0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000004 	.word	0x20000004

08003e9c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	71fb      	strb	r3, [r7, #7]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <BSP_PB_Init+0x94>)
 8003ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003eca:	79bb      	ldrb	r3, [r7, #6]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d132      	bne.n	8003f36 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <BSP_PB_Init+0x98>)
 8003ed6:	441a      	add	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	491b      	ldr	r1, [pc, #108]	; (8003f48 <BSP_PB_Init+0x9c>)
 8003edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 fec9 	bl	8004c7a <HAL_EXTI_GetHandle>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003eee:	f06f 0303 	mvn.w	r3, #3
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e01f      	b.n	8003f36 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <BSP_PB_Init+0x98>)
 8003efc:	1898      	adds	r0, r3, r2
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <BSP_PB_Init+0xa0>)
 8003f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f06:	461a      	mov	r2, r3
 8003f08:	2100      	movs	r1, #0
 8003f0a:	f000 fe9c 	bl	8004c46 <HAL_EXTI_RegisterCallback>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003f14:	f06f 0303 	mvn.w	r3, #3
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e00c      	b.n	8003f36 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003f1c:	2028      	movs	r0, #40	; 0x28
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <BSP_PB_Init+0xa4>)
 8003f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f26:	2200      	movs	r2, #0
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f000 fe48 	bl	8004bbe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003f2e:	2328      	movs	r3, #40	; 0x28
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fe60 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	0800e3e0 	.word	0x0800e3e0
 8003f44:	2000000c 	.word	0x2000000c
 8003f48:	0800e3e4 	.word	0x0800e3e4
 8003f4c:	0800e3e8 	.word	0x0800e3e8
 8003f50:	0800e3ec 	.word	0x0800e3ec

08003f54 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <BSP_PB_GetState+0x34>)
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 f967 	bl	8005240 <HAL_GPIO_ReadPin>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000008 	.word	0x20000008

08003f8c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7fe fc9f 	bl	80028d4 <BSP_PB_Callback>
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d903      	bls.n	8003fc4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fbc:	f06f 0301 	mvn.w	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e025      	b.n	8004010 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	79fa      	ldrb	r2, [r7, #7]
 8003fc8:	4914      	ldr	r1, [pc, #80]	; (800401c <BSP_COM_Init+0x74>)
 8003fca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fce:	4814      	ldr	r0, [pc, #80]	; (8004020 <BSP_COM_Init+0x78>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	015b      	lsls	r3, r3, #5
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4403      	add	r3, r0
 8003fda:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003fdc:	79fa      	ldrb	r2, [r7, #7]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	015b      	lsls	r3, r3, #5
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <BSP_COM_Init+0x78>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f86a 	bl	80040c4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003ff0:	79fa      	ldrb	r2, [r7, #7]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	015b      	lsls	r3, r3, #5
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <BSP_COM_Init+0x78>)
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f810 	bl	8004024 <MX_USART2_UART_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800400a:	f06f 0303 	mvn.w	r3, #3
 800400e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004010:	68fb      	ldr	r3, [r7, #12]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000014 	.word	0x20000014
 8004020:	20000880 	.word	0x20000880

08004024 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <MX_USART2_UART_Init+0x64>)
 8004034:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800403c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	220c      	movs	r2, #12
 8004054:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f003 fe7e 	bl	8007d70 <HAL_UART_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40004400 	.word	0x40004400

0800408c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <__io_putchar+0x30>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4613      	mov	r3, r2
 800409c:	015b      	lsls	r3, r3, #5
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <__io_putchar+0x34>)
 80040a4:	1898      	adds	r0, r3, r2
 80040a6:	1d39      	adds	r1, r7, #4
 80040a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ac:	2201      	movs	r2, #1
 80040ae:	f003 feb7 	bl	8007e20 <HAL_UART_Transmit>
  return ch;
 80040b2:	687b      	ldr	r3, [r7, #4]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000904 	.word	0x20000904
 80040c0:	20000880 	.word	0x20000880

080040c4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0ac      	sub	sp, #176	; 0xb0
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	2288      	movs	r2, #136	; 0x88
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f008 f846 	bl	800c166 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040da:	2302      	movs	r3, #2
 80040dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040de:	2300      	movs	r3, #0
 80040e0:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 fd54 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <USART2_MspInit+0xb8>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <USART2_MspInit+0xb8>)
 80040f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f6:	6593      	str	r3, [r2, #88]	; 0x58
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <USART2_MspInit+0xb8>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <USART2_MspInit+0xb8>)
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <USART2_MspInit+0xb8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <USART2_MspInit+0xb8>)
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800411c:	2304      	movs	r3, #4
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004122:	2302      	movs	r3, #2
 8004124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412e:	2300      	movs	r3, #0
 8004130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004134:	2307      	movs	r3, #7
 8004136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800413a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800413e:	4619      	mov	r1, r3
 8004140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004144:	f000 fdde 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004148:	2308      	movs	r3, #8
 800414a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004160:	2307      	movs	r3, #7
 8004162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004166:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004170:	f000 fdc8 	bl	8004d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004174:	bf00      	nop
 8004176:	37b0      	adds	r7, #176	; 0xb0
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000

08004180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <SystemInit+0x20>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <SystemInit+0x20>)
 800418c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	460b      	mov	r3, r1
 80041b2:	72fb      	strb	r3, [r7, #11]
 80041b4:	4613      	mov	r3, r2
 80041b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685c      	ldr	r4, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68d8      	ldr	r0, [r3, #12]
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	7af9      	ldrb	r1, [r7, #11]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	47a0      	blx	r4
 80041c8:	6178      	str	r0, [r7, #20]

  return ret;
 80041ca:	697b      	ldr	r3, [r7, #20]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}

080041d4 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	461a      	mov	r2, r3
 80041e0:	460b      	mov	r3, r1
 80041e2:	72fb      	strb	r3, [r7, #11]
 80041e4:	4613      	mov	r3, r2
 80041e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681c      	ldr	r4, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68d8      	ldr	r0, [r3, #12]
 80041f0:	893b      	ldrh	r3, [r7, #8]
 80041f2:	7af9      	ldrb	r1, [r7, #11]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	47a0      	blx	r4
 80041f8:	6178      	str	r0, [r7, #20]

  return ret;
 80041fa:	697b      	ldr	r3, [r7, #20]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	bd90      	pop	{r4, r7, pc}

08004204 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004210:	f107 0208 	add.w	r2, r7, #8
 8004214:	2301      	movs	r3, #1
 8004216:	2120      	movs	r1, #32
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ffc3 	bl	80041a4 <hts221_read_reg>
 800421e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10f      	bne.n	8004246 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	b2da      	uxtb	r2, r3
 800422e:	7a3b      	ldrb	r3, [r7, #8]
 8004230:	f362 0301 	bfi	r3, r2, #0, #2
 8004234:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004236:	f107 0208 	add.w	r2, r7, #8
 800423a:	2301      	movs	r3, #1
 800423c:	2120      	movs	r1, #32
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ffc8 	bl	80041d4 <hts221_write_reg>
 8004244:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800425c:	f107 0208 	add.w	r2, r7, #8
 8004260:	2301      	movs	r3, #1
 8004262:	2120      	movs	r1, #32
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff9d 	bl	80041a4 <hts221_read_reg>
 800426a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	b2da      	uxtb	r2, r3
 800427a:	7a3b      	ldrb	r3, [r7, #8]
 800427c:	f362 0382 	bfi	r3, r2, #2, #1
 8004280:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004282:	f107 0208 	add.w	r2, r7, #8
 8004286:	2301      	movs	r3, #1
 8004288:	2120      	movs	r1, #32
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ffa2 	bl	80041d4 <hts221_write_reg>
 8004290:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004292:	68fb      	ldr	r3, [r7, #12]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80042a6:	f107 0208 	add.w	r2, r7, #8
 80042aa:	2302      	movs	r3, #2
 80042ac:	2128      	movs	r1, #40	; 0x28
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff78 	bl	80041a4 <hts221_read_reg>
 80042b4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80042b6:	7a7b      	ldrb	r3, [r7, #9]
 80042b8:	b21a      	sxth	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	7a3b      	ldrb	r3, [r7, #8]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b21a      	sxth	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	801a      	strh	r2, [r3, #0]

  return ret;
 80042d8:	68fb      	ldr	r3, [r7, #12]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80042ec:	f107 0208 	add.w	r2, r7, #8
 80042f0:	2302      	movs	r3, #2
 80042f2:	212a      	movs	r1, #42	; 0x2a
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff55 	bl	80041a4 <hts221_read_reg>
 80042fa:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80042fc:	7a7b      	ldrb	r3, [r7, #9]
 80042fe:	b21a      	sxth	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800430a:	b29b      	uxth	r3, r3
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	b29a      	uxth	r2, r3
 8004310:	7a3b      	ldrb	r3, [r7, #8]
 8004312:	b29b      	uxth	r3, r3
 8004314:	4413      	add	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	b21a      	sxth	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	801a      	strh	r2, [r3, #0]

  return ret;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8004332:	2301      	movs	r3, #1
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	210f      	movs	r1, #15
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff33 	bl	80041a4 <hts221_read_reg>
 800433e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004356:	f107 0208 	add.w	r2, r7, #8
 800435a:	2301      	movs	r3, #1
 800435c:	2120      	movs	r1, #32
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ff20 	bl	80041a4 <hts221_read_reg>
 8004364:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	7a3b      	ldrb	r3, [r7, #8]
 8004376:	f362 13c7 	bfi	r3, r2, #7, #1
 800437a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800437c:	f107 0208 	add.w	r2, r7, #8
 8004380:	2301      	movs	r3, #1
 8004382:	2120      	movs	r1, #32
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff25 	bl	80041d4 <hts221_write_reg>
 800438a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800438c:	68fb      	ldr	r3, [r7, #12]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 80043a0:	2301      	movs	r3, #1
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	2127      	movs	r1, #39	; 0x27
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fefc 	bl	80041a4 <hts221_read_reg>
 80043ac:	60f8      	str	r0, [r7, #12]

  return ret;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80043c2:	f107 020b 	add.w	r2, r7, #11
 80043c6:	2301      	movs	r3, #1
 80043c8:	2130      	movs	r1, #48	; 0x30
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff feea 	bl	80041a4 <hts221_read_reg>
 80043d0:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80043d2:	7afb      	ldrb	r3, [r7, #11]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80043e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80043ea:	68fb      	ldr	r3, [r7, #12]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80043fe:	f107 020b 	add.w	r2, r7, #11
 8004402:	2301      	movs	r3, #1
 8004404:	2131      	movs	r1, #49	; 0x31
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fecc 	bl	80041a4 <hts221_read_reg>
 800440c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004418:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800441c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004426:	68fb      	ldr	r3, [r7, #12]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800443a:	f107 020f 	add.w	r2, r7, #15
 800443e:	2301      	movs	r3, #1
 8004440:	2132      	movs	r1, #50	; 0x32
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff feae 	bl	80041a4 <hts221_read_reg>
 8004448:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11b      	bne.n	8004488 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004450:	f107 0210 	add.w	r2, r7, #16
 8004454:	2301      	movs	r3, #1
 8004456:	2135      	movs	r1, #53	; 0x35
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fea3 	bl	80041a4 <hts221_read_reg>
 800445e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004460:	7c3b      	ldrb	r3, [r7, #16]
 8004462:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004466:	b2db      	uxtb	r3, r3
 8004468:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	4413      	add	r3, r2
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800447a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800447e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800449c:	f107 020f 	add.w	r2, r7, #15
 80044a0:	2301      	movs	r3, #1
 80044a2:	2133      	movs	r1, #51	; 0x33
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fe7d 	bl	80041a4 <hts221_read_reg>
 80044aa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11b      	bne.n	80044ea <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80044b2:	f107 0210 	add.w	r2, r7, #16
 80044b6:	2301      	movs	r3, #1
 80044b8:	2135      	movs	r1, #53	; 0x35
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fe72 	bl	80041a4 <hts221_read_reg>
 80044c0:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80044c2:	7c3b      	ldrb	r3, [r7, #16]
 80044c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	4413      	add	r3, r2
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044dc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80044e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80044ea:	697b      	ldr	r3, [r7, #20]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	2302      	movs	r3, #2
 8004504:	2136      	movs	r1, #54	; 0x36
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fe4c 	bl	80041a4 <hts221_read_reg>
 800450c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800450e:	7a7b      	ldrb	r3, [r7, #9]
 8004510:	b29b      	uxth	r3, r3
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b29a      	uxth	r2, r3
 8004516:	7a3b      	ldrb	r3, [r7, #8]
 8004518:	b29b      	uxth	r3, r3
 800451a:	4413      	add	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004546:	f107 0208 	add.w	r2, r7, #8
 800454a:	2302      	movs	r3, #2
 800454c:	213a      	movs	r1, #58	; 0x3a
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fe28 	bl	80041a4 <hts221_read_reg>
 8004554:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004556:	7a7b      	ldrb	r3, [r7, #9]
 8004558:	b29b      	uxth	r3, r3
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	b29a      	uxth	r2, r3
 800455e:	7a3b      	ldrb	r3, [r7, #8]
 8004560:	b29b      	uxth	r3, r3
 8004562:	4413      	add	r3, r2
 8004564:	b29b      	uxth	r3, r3
 8004566:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004568:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800458e:	f107 0208 	add.w	r2, r7, #8
 8004592:	2302      	movs	r3, #2
 8004594:	213c      	movs	r1, #60	; 0x3c
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fe04 	bl	80041a4 <hts221_read_reg>
 800459c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800459e:	7a7b      	ldrb	r3, [r7, #9]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	7a3b      	ldrb	r3, [r7, #8]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80045b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80045d6:	f107 0208 	add.w	r2, r7, #8
 80045da:	2302      	movs	r3, #2
 80045dc:	213e      	movs	r1, #62	; 0x3e
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fde0 	bl	80041a4 <hts221_read_reg>
 80045e4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80045e6:	7a7b      	ldrb	r3, [r7, #9]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	7a3b      	ldrb	r3, [r7, #8]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80045f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	461a      	mov	r2, r3
 8004620:	460b      	mov	r3, r1
 8004622:	72fb      	strb	r3, [r7, #11]
 8004624:	4613      	mov	r3, r2
 8004626:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685c      	ldr	r4, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68d8      	ldr	r0, [r3, #12]
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	7af9      	ldrb	r1, [r7, #11]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	47a0      	blx	r4
 8004638:	6178      	str	r0, [r7, #20]

  return ret;
 800463a:	697b      	ldr	r3, [r7, #20]
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}

08004644 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	461a      	mov	r2, r3
 8004650:	460b      	mov	r3, r1
 8004652:	72fb      	strb	r3, [r7, #11]
 8004654:	4613      	mov	r3, r2
 8004656:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681c      	ldr	r4, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68d8      	ldr	r0, [r3, #12]
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	7af9      	ldrb	r1, [r7, #11]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	47a0      	blx	r4
 8004668:	6178      	str	r0, [r7, #20]

  return ret;
 800466a:	697b      	ldr	r3, [r7, #20]
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd90      	pop	{r4, r7, pc}

08004674 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80046a0 <lps22hh_from_lsb_to_hpa+0x2c>
 800468a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800468e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004692:	eeb0 0a67 	vmov.f32	s0, s15
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	49800000 	.word	0x49800000

080046a4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80046b0:	f107 0208 	add.w	r2, r7, #8
 80046b4:	2301      	movs	r3, #1
 80046b6:	2110      	movs	r1, #16
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ffab 	bl	8004614 <lps22hh_read_reg>
 80046be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	7a3b      	ldrb	r3, [r7, #8]
 80046d0:	f362 0341 	bfi	r3, r2, #1, #1
 80046d4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80046d6:	f107 0208 	add.w	r2, r7, #8
 80046da:	2301      	movs	r3, #1
 80046dc:	2110      	movs	r1, #16
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ffb0 	bl	8004644 <lps22hh_write_reg>
 80046e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80046fc:	f107 0210 	add.w	r2, r7, #16
 8004700:	2301      	movs	r3, #1
 8004702:	2110      	movs	r1, #16
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff85 	bl	8004614 <lps22hh_read_reg>
 800470a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004712:	f107 020c 	add.w	r2, r7, #12
 8004716:	2301      	movs	r3, #1
 8004718:	2111      	movs	r1, #17
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ff7a 	bl	8004614 <lps22hh_read_reg>
 8004720:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	b2da      	uxtb	r2, r3
 8004730:	7c3b      	ldrb	r3, [r7, #16]
 8004732:	f362 1306 	bfi	r3, r2, #4, #3
 8004736:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004738:	f107 0210 	add.w	r2, r7, #16
 800473c:	2301      	movs	r3, #1
 800473e:	2110      	movs	r1, #16
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff7f 	bl	8004644 <lps22hh_write_reg>
 8004746:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d119      	bne.n	8004782 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	7b3b      	ldrb	r3, [r7, #12]
 800475a:	f362 0341 	bfi	r3, r2, #1, #1
 800475e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	7b3b      	ldrb	r3, [r7, #12]
 800476c:	f362 0300 	bfi	r3, r2, #0, #1
 8004770:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004772:	f107 020c 	add.w	r2, r7, #12
 8004776:	2301      	movs	r3, #1
 8004778:	2111      	movs	r1, #17
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ff62 	bl	8004644 <lps22hh_write_reg>
 8004780:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004782:	697b      	ldr	r3, [r7, #20]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004796:	f107 0208 	add.w	r2, r7, #8
 800479a:	2303      	movs	r3, #3
 800479c:	2128      	movs	r1, #40	; 0x28
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ff38 	bl	8004614 <lps22hh_read_reg>
 80047a4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80047a6:	7abb      	ldrb	r3, [r7, #10]
 80047a8:	461a      	mov	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	7a7a      	ldrb	r2, [r7, #9]
 80047b6:	441a      	add	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	7a3a      	ldrb	r2, [r7, #8]
 80047c4:	441a      	add	r2, r3
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	601a      	str	r2, [r3, #0]

  return ret;
 80047d4:	68fb      	ldr	r3, [r7, #12]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80047e8:	2301      	movs	r3, #1
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	210f      	movs	r1, #15
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff10 	bl	8004614 <lps22hh_read_reg>
 80047f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800480c:	f107 0208 	add.w	r2, r7, #8
 8004810:	2301      	movs	r3, #1
 8004812:	2111      	movs	r1, #17
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff fefd 	bl	8004614 <lps22hh_read_reg>
 800481a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10f      	bne.n	8004842 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	b2da      	uxtb	r2, r3
 800482a:	7a3b      	ldrb	r3, [r7, #8]
 800482c:	f362 0382 	bfi	r3, r2, #2, #1
 8004830:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004832:	f107 0208 	add.w	r2, r7, #8
 8004836:	2301      	movs	r3, #1
 8004838:	2111      	movs	r1, #17
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff ff02 	bl	8004644 <lps22hh_write_reg>
 8004840:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004842:	68fb      	ldr	r3, [r7, #12]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004856:	f107 0208 	add.w	r2, r7, #8
 800485a:	2301      	movs	r3, #1
 800485c:	2111      	movs	r1, #17
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff fed8 	bl	8004614 <lps22hh_read_reg>
 8004864:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004866:	7a3b      	ldrb	r3, [r7, #8]
 8004868:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	701a      	strb	r2, [r3, #0]

  return ret;
 8004874:	68fb      	ldr	r3, [r7, #12]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <HAL_Init+0x3c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <HAL_Init+0x3c>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004896:	2003      	movs	r0, #3
 8004898:	f000 f986 	bl	8004ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800489c:	2000      	movs	r0, #0
 800489e:	f000 f80f 	bl	80048c0 <HAL_InitTick>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	71fb      	strb	r3, [r7, #7]
 80048ac:	e001      	b.n	80048b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048ae:	f7ff f87d 	bl	80039ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048b2:	79fb      	ldrb	r3, [r7, #7]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40022000 	.word	0x40022000

080048c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_InitTick+0x6c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <HAL_InitTick+0x70>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <HAL_InitTick+0x6c>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f99f 	bl	8004c2e <HAL_SYSTICK_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d809      	bhi.n	8004910 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048fc:	2200      	movs	r2, #0
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	f000 f95b 	bl	8004bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_InitTick+0x74>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e007      	b.n	8004920 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e004      	b.n	8004920 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	e001      	b.n	8004920 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000020 	.word	0x20000020
 8004930:	20000018 	.word	0x20000018
 8004934:	2000001c 	.word	0x2000001c

08004938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_IncTick+0x20>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_IncTick+0x24>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4413      	add	r3, r2
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <HAL_IncTick+0x24>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000020 	.word	0x20000020
 800495c:	20000908 	.word	0x20000908

08004960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return uwTick;
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_GetTick+0x14>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000908 	.word	0x20000908

08004978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004980:	f7ff ffee 	bl	8004960 <HAL_GetTick>
 8004984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d005      	beq.n	800499e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <HAL_Delay+0x44>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800499e:	bf00      	nop
 80049a0:	f7ff ffde 	bl	8004960 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d8f7      	bhi.n	80049a0 <HAL_Delay+0x28>
  {
  }
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000020 	.word	0x20000020

080049c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <__NVIC_SetPriorityGrouping+0x44>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049dc:	4013      	ands	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049f2:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <__NVIC_SetPriorityGrouping+0x44>)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	60d3      	str	r3, [r2, #12]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <__NVIC_GetPriorityGrouping+0x18>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	f003 0307 	and.w	r3, r3, #7
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	db0b      	blt.n	8004a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	f003 021f 	and.w	r2, r3, #31
 8004a3c:	4907      	ldr	r1, [pc, #28]	; (8004a5c <__NVIC_EnableIRQ+0x38>)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2001      	movs	r0, #1
 8004a46:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	e000e100 	.word	0xe000e100

08004a60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	db12      	blt.n	8004a98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	f003 021f 	and.w	r2, r3, #31
 8004a78:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <__NVIC_DisableIRQ+0x44>)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2001      	movs	r0, #1
 8004a82:	fa00 f202 	lsl.w	r2, r0, r2
 8004a86:	3320      	adds	r3, #32
 8004a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a8c:	f3bf 8f4f 	dsb	sy
}
 8004a90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a92:	f3bf 8f6f 	isb	sy
}
 8004a96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000e100 	.word	0xe000e100

08004aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6039      	str	r1, [r7, #0]
 8004ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	db0a      	blt.n	8004ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	490c      	ldr	r1, [pc, #48]	; (8004af4 <__NVIC_SetPriority+0x4c>)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	0112      	lsls	r2, r2, #4
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	440b      	add	r3, r1
 8004acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad0:	e00a      	b.n	8004ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4908      	ldr	r1, [pc, #32]	; (8004af8 <__NVIC_SetPriority+0x50>)
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	3b04      	subs	r3, #4
 8004ae0:	0112      	lsls	r2, r2, #4
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	761a      	strb	r2, [r3, #24]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000e100 	.word	0xe000e100
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f1c3 0307 	rsb	r3, r3, #7
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	bf28      	it	cs
 8004b1a:	2304      	movcs	r3, #4
 8004b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d902      	bls.n	8004b2c <NVIC_EncodePriority+0x30>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3b03      	subs	r3, #3
 8004b2a:	e000      	b.n	8004b2e <NVIC_EncodePriority+0x32>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	401a      	ands	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b44:	f04f 31ff 	mov.w	r1, #4294967295
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	43d9      	mvns	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b54:	4313      	orrs	r3, r2
         );
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3724      	adds	r7, #36	; 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b74:	d301      	bcc.n	8004b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b76:	2301      	movs	r3, #1
 8004b78:	e00f      	b.n	8004b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <SysTick_Config+0x40>)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b82:	210f      	movs	r1, #15
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	f7ff ff8e 	bl	8004aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <SysTick_Config+0x40>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <SysTick_Config+0x40>)
 8004b94:	2207      	movs	r2, #7
 8004b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	e000e010 	.word	0xe000e010

08004ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff05 	bl	80049c0 <__NVIC_SetPriorityGrouping>
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bd0:	f7ff ff1a 	bl	8004a08 <__NVIC_GetPriorityGrouping>
 8004bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	6978      	ldr	r0, [r7, #20]
 8004bdc:	f7ff ff8e 	bl	8004afc <NVIC_EncodePriority>
 8004be0:	4602      	mov	r2, r0
 8004be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff5d 	bl	8004aa8 <__NVIC_SetPriority>
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff0d 	bl	8004a24 <__NVIC_EnableIRQ>
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	4603      	mov	r3, r0
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff ff1d 	bl	8004a60 <__NVIC_DisableIRQ>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ff94 	bl	8004b64 <SysTick_Config>
 8004c3c:	4603      	mov	r3, r0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004c46:	b480      	push	{r7}
 8004c48:	b087      	sub	sp, #28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	605a      	str	r2, [r3, #4]
      break;
 8004c64:	e002      	b.n	8004c6c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6a:	bf00      	nop
  }

  return status;
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e003      	b.n	8004c96 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_EXTI_IRQHandler+0x5c>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4798      	blx	r3
    }
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40010414 	.word	0x40010414

08004d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d12:	e17f      	b.n	8005014 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8171 	beq.w	800500e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d005      	beq.n	8004d44 <HAL_GPIO_Init+0x40>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d130      	bne.n	8004da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2203      	movs	r2, #3
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 0201 	and.w	r2, r3, #1
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d118      	bne.n	8004de4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004db8:	2201      	movs	r2, #1
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f003 0201 	and.w	r2, r3, #1
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d017      	beq.n	8004e20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d123      	bne.n	8004e74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	08da      	lsrs	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3208      	adds	r2, #8
 8004e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	220f      	movs	r2, #15
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	08da      	lsrs	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3208      	adds	r2, #8
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0203 	and.w	r2, r3, #3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80ac 	beq.w	800500e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb6:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <HAL_GPIO_Init+0x330>)
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eba:	4a5e      	ldr	r2, [pc, #376]	; (8005034 <HAL_GPIO_Init+0x330>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	; (8005034 <HAL_GPIO_Init+0x330>)
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ece:	4a5a      	ldr	r2, [pc, #360]	; (8005038 <HAL_GPIO_Init+0x334>)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	220f      	movs	r2, #15
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ef8:	d025      	beq.n	8004f46 <HAL_GPIO_Init+0x242>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4f      	ldr	r2, [pc, #316]	; (800503c <HAL_GPIO_Init+0x338>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01f      	beq.n	8004f42 <HAL_GPIO_Init+0x23e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4e      	ldr	r2, [pc, #312]	; (8005040 <HAL_GPIO_Init+0x33c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d019      	beq.n	8004f3e <HAL_GPIO_Init+0x23a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4d      	ldr	r2, [pc, #308]	; (8005044 <HAL_GPIO_Init+0x340>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_GPIO_Init+0x236>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a4c      	ldr	r2, [pc, #304]	; (8005048 <HAL_GPIO_Init+0x344>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00d      	beq.n	8004f36 <HAL_GPIO_Init+0x232>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a4b      	ldr	r2, [pc, #300]	; (800504c <HAL_GPIO_Init+0x348>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <HAL_GPIO_Init+0x22e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_GPIO_Init+0x34c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_GPIO_Init+0x22a>
 8004f2a:	2306      	movs	r3, #6
 8004f2c:	e00c      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f2e:	2307      	movs	r3, #7
 8004f30:	e00a      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f32:	2305      	movs	r3, #5
 8004f34:	e008      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f36:	2304      	movs	r3, #4
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e004      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e002      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_GPIO_Init+0x244>
 8004f46:	2300      	movs	r3, #0
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	f002 0203 	and.w	r2, r2, #3
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	4093      	lsls	r3, r2
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f58:	4937      	ldr	r1, [pc, #220]	; (8005038 <HAL_GPIO_Init+0x334>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	3302      	adds	r3, #2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f8a:	4a32      	ldr	r2, [pc, #200]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f90:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fb4:	4a27      	ldr	r2, [pc, #156]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_GPIO_Init+0x350>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <HAL_GPIO_Init+0x350>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3301      	adds	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f ae78 	bne.w	8004d14 <HAL_GPIO_Init+0x10>
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	40010000 	.word	0x40010000
 800503c:	48000400 	.word	0x48000400
 8005040:	48000800 	.word	0x48000800
 8005044:	48000c00 	.word	0x48000c00
 8005048:	48001000 	.word	0x48001000
 800504c:	48001400 	.word	0x48001400
 8005050:	48001800 	.word	0x48001800
 8005054:	40010400 	.word	0x40010400

08005058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005066:	e0cd      	b.n	8005204 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005068:	2201      	movs	r2, #1
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	4013      	ands	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80c0 	beq.w	80051fe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800507e:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_GPIO_DeInit+0x1c8>)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4013      	ands	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050a6:	d025      	beq.n	80050f4 <HAL_GPIO_DeInit+0x9c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a5e      	ldr	r2, [pc, #376]	; (8005224 <HAL_GPIO_DeInit+0x1cc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d01f      	beq.n	80050f0 <HAL_GPIO_DeInit+0x98>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a5d      	ldr	r2, [pc, #372]	; (8005228 <HAL_GPIO_DeInit+0x1d0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d019      	beq.n	80050ec <HAL_GPIO_DeInit+0x94>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a5c      	ldr	r2, [pc, #368]	; (800522c <HAL_GPIO_DeInit+0x1d4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_GPIO_DeInit+0x90>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a5b      	ldr	r2, [pc, #364]	; (8005230 <HAL_GPIO_DeInit+0x1d8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00d      	beq.n	80050e4 <HAL_GPIO_DeInit+0x8c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a5a      	ldr	r2, [pc, #360]	; (8005234 <HAL_GPIO_DeInit+0x1dc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <HAL_GPIO_DeInit+0x88>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a59      	ldr	r2, [pc, #356]	; (8005238 <HAL_GPIO_DeInit+0x1e0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d101      	bne.n	80050dc <HAL_GPIO_DeInit+0x84>
 80050d8:	2306      	movs	r3, #6
 80050da:	e00c      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050dc:	2307      	movs	r3, #7
 80050de:	e00a      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050e0:	2305      	movs	r3, #5
 80050e2:	e008      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050e4:	2304      	movs	r3, #4
 80050e6:	e006      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050e8:	2303      	movs	r3, #3
 80050ea:	e004      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e002      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_GPIO_DeInit+0x9e>
 80050f4:	2300      	movs	r3, #0
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	f002 0203 	and.w	r2, r2, #3
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	4093      	lsls	r3, r2
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	429a      	cmp	r2, r3
 8005104:	d132      	bne.n	800516c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005106:	4b4d      	ldr	r3, [pc, #308]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	43db      	mvns	r3, r3
 800510e:	494b      	ldr	r1, [pc, #300]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 8005110:	4013      	ands	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005114:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	43db      	mvns	r3, r3
 800511c:	4947      	ldr	r1, [pc, #284]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 800511e:	4013      	ands	r3, r2
 8005120:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005122:	4b46      	ldr	r3, [pc, #280]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	43db      	mvns	r3, r3
 800512a:	4944      	ldr	r1, [pc, #272]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 800512c:	4013      	ands	r3, r2
 800512e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005130:	4b42      	ldr	r3, [pc, #264]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	43db      	mvns	r3, r3
 8005138:	4940      	ldr	r1, [pc, #256]	; (800523c <HAL_GPIO_DeInit+0x1e4>)
 800513a:	4013      	ands	r3, r2
 800513c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	220f      	movs	r2, #15
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800514e:	4a34      	ldr	r2, [pc, #208]	; (8005220 <HAL_GPIO_DeInit+0x1c8>)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	3302      	adds	r3, #2
 8005156:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	43da      	mvns	r2, r3
 800515e:	4830      	ldr	r0, [pc, #192]	; (8005220 <HAL_GPIO_DeInit+0x1c8>)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	400a      	ands	r2, r1
 8005166:	3302      	adds	r3, #2
 8005168:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	2103      	movs	r1, #3
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	08da      	lsrs	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3208      	adds	r2, #8
 8005188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	220f      	movs	r2, #15
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	08d2      	lsrs	r2, r2, #3
 80051a0:	4019      	ands	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3208      	adds	r2, #8
 80051a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	2103      	movs	r1, #3
 80051b4:	fa01 f303 	lsl.w	r3, r1, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	2101      	movs	r1, #1
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	fa01 f303 	lsl.w	r3, r1, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	401a      	ands	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2103      	movs	r1, #3
 80051de:	fa01 f303 	lsl.w	r3, r1, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	401a      	ands	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	2101      	movs	r1, #1
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	43db      	mvns	r3, r3
 80051f8:	401a      	ands	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	3301      	adds	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f af2b 	bne.w	8005068 <HAL_GPIO_DeInit+0x10>
  }
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40010000 	.word	0x40010000
 8005224:	48000400 	.word	0x48000400
 8005228:	48000800 	.word	0x48000800
 800522c:	48000c00 	.word	0x48000c00
 8005230:	48001000 	.word	0x48001000
 8005234:	48001400 	.word	0x48001400
 8005238:	48001800 	.word	0x48001800
 800523c:	40010400 	.word	0x40010400

08005240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
 800525c:	e001      	b.n	8005262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	807b      	strh	r3, [r7, #2]
 800527c:	4613      	mov	r3, r2
 800527e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005280:	787b      	ldrb	r3, [r7, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800528c:	e002      	b.n	8005294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4013      	ands	r3, r2
 80052b8:	041a      	lsls	r2, r3, #16
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	43d9      	mvns	r1, r3
 80052be:	887b      	ldrh	r3, [r7, #2]
 80052c0:	400b      	ands	r3, r1
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	619a      	str	r2, [r3, #24]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e081      	b.n	80053ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe f9a6 	bl	800364c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2224      	movs	r2, #36	; 0x24
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005324:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005334:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d107      	bne.n	800534e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	e006      	b.n	800535c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800535a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d104      	bne.n	800536e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800536c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800537c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4603      	mov	r3, r0
 8005404:	817b      	strh	r3, [r7, #10]
 8005406:	460b      	mov	r3, r1
 8005408:	813b      	strh	r3, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b20      	cmp	r3, #32
 8005418:	f040 80f9 	bne.w	800560e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_I2C_Mem_Write+0x34>
 8005422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0ed      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Mem_Write+0x4e>
 800543e:	2302      	movs	r3, #2
 8005440:	e0e6      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800544a:	f7ff fa89 	bl	8004960 <HAL_GetTick>
 800544e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2319      	movs	r3, #25
 8005456:	2201      	movs	r2, #1
 8005458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fac3 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0d1      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2221      	movs	r2, #33	; 0x21
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800548c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005494:	88f8      	ldrh	r0, [r7, #6]
 8005496:	893a      	ldrh	r2, [r7, #8]
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	4603      	mov	r3, r0
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9d3 	bl	8005850 <I2C_RequestMemoryWrite>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0a9      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2bff      	cmp	r3, #255	; 0xff
 80054c4:	d90e      	bls.n	80054e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	22ff      	movs	r2, #255	; 0xff
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	8979      	ldrh	r1, [r7, #10]
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fc2b 	bl	8005d38 <I2C_TransferConfig>
 80054e2:	e00f      	b.n	8005504 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	8979      	ldrh	r1, [r7, #10]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fc1a 	bl	8005d38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 faad 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e07b      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	781a      	ldrb	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d034      	beq.n	80055bc <HAL_I2C_Mem_Write+0x1c8>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d130      	bne.n	80055bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	2200      	movs	r2, #0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fa3f 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04d      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2bff      	cmp	r3, #255	; 0xff
 800557c:	d90e      	bls.n	800559c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	b2da      	uxtb	r2, r3
 800558a:	8979      	ldrh	r1, [r7, #10]
 800558c:	2300      	movs	r3, #0
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fbcf 	bl	8005d38 <I2C_TransferConfig>
 800559a:	e00f      	b.n	80055bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	8979      	ldrh	r1, [r7, #10]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fbbe 	bl	8005d38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d19e      	bne.n	8005504 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fa8c 	bl	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e01a      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2220      	movs	r2, #32
 80055e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_I2C_Mem_Write+0x224>)
 80055ee:	400b      	ands	r3, r1
 80055f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e000      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
  }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	fe00e800 	.word	0xfe00e800

0800561c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	461a      	mov	r2, r3
 800562a:	4603      	mov	r3, r0
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	460b      	mov	r3, r1
 8005630:	813b      	strh	r3, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 80fd 	bne.w	800583e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_I2C_Mem_Read+0x34>
 800564a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0f1      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_I2C_Mem_Read+0x4e>
 8005666:	2302      	movs	r3, #2
 8005668:	e0ea      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005672:	f7ff f975 	bl	8004960 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2319      	movs	r3, #25
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f9af 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0d5      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2222      	movs	r2, #34	; 0x22
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056bc:	88f8      	ldrh	r0, [r7, #6]
 80056be:	893a      	ldrh	r2, [r7, #8]
 80056c0:	8979      	ldrh	r1, [r7, #10]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4603      	mov	r3, r0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f913 	bl	80058f8 <I2C_RequestMemoryRead>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0ad      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d90e      	bls.n	800570c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	4b52      	ldr	r3, [pc, #328]	; (8005848 <HAL_I2C_Mem_Read+0x22c>)
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fb17 	bl	8005d38 <I2C_TransferConfig>
 800570a:	e00f      	b.n	800572c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_I2C_Mem_Read+0x22c>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fb06 	bl	8005d38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	2200      	movs	r2, #0
 8005734:	2104      	movs	r1, #4
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f956 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07c      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d034      	beq.n	80057ec <HAL_I2C_Mem_Read+0x1d0>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d130      	bne.n	80057ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f927 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e04d      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2bff      	cmp	r3, #255	; 0xff
 80057ac:	d90e      	bls.n	80057cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	8979      	ldrh	r1, [r7, #10]
 80057bc:	2300      	movs	r3, #0
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fab7 	bl	8005d38 <I2C_TransferConfig>
 80057ca:	e00f      	b.n	80057ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	8979      	ldrh	r1, [r7, #10]
 80057de:	2300      	movs	r3, #0
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 faa6 	bl	8005d38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d19a      	bne.n	800572c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f974 	bl	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e01a      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2220      	movs	r2, #32
 8005810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_I2C_Mem_Read+0x230>)
 800581e:	400b      	ands	r3, r1
 8005820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800583e:	2302      	movs	r3, #2
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	80002400 	.word	0x80002400
 800584c:	fe00e800 	.word	0xfe00e800

08005850 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4603      	mov	r3, r0
 8005860:	817b      	strh	r3, [r7, #10]
 8005862:	460b      	mov	r3, r1
 8005864:	813b      	strh	r3, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	8979      	ldrh	r1, [r7, #10]
 8005870:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <I2C_RequestMemoryWrite+0xa4>)
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fa5d 	bl	8005d38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	69b9      	ldr	r1, [r7, #24]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8f0 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e02c      	b.n	80058ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
 80058a2:	e015      	b.n	80058d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058a4:	893b      	ldrh	r3, [r7, #8]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	69b9      	ldr	r1, [r7, #24]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f8d6 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e012      	b.n	80058ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f884 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	80002000 	.word	0x80002000

080058f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	4608      	mov	r0, r1
 8005902:	4611      	mov	r1, r2
 8005904:	461a      	mov	r2, r3
 8005906:	4603      	mov	r3, r0
 8005908:	817b      	strh	r3, [r7, #10]
 800590a:	460b      	mov	r3, r1
 800590c:	813b      	strh	r3, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	8979      	ldrh	r1, [r7, #10]
 8005918:	4b20      	ldr	r3, [pc, #128]	; (800599c <I2C_RequestMemoryRead+0xa4>)
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2300      	movs	r3, #0
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fa0a 	bl	8005d38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	69b9      	ldr	r1, [r7, #24]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f89d 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e02c      	b.n	8005992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
 8005948:	e015      	b.n	8005976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800594a:	893b      	ldrh	r3, [r7, #8]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	69b9      	ldr	r1, [r7, #24]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f883 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e012      	b.n	8005992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2200      	movs	r2, #0
 800597e:	2140      	movs	r1, #64	; 0x40
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f831 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	80002000 	.word	0x80002000

080059a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d103      	bne.n	80059be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d007      	beq.n	80059dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	619a      	str	r2, [r3, #24]
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f8:	e022      	b.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d01e      	beq.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a02:	f7fe ffad 	bl	8004960 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d302      	bcc.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d113      	bne.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e00f      	b.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d0cd      	beq.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a74:	e02c      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f870 	bl	8005b60 <I2C_IsErrorOccurred>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e02a      	b.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d01e      	beq.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fe ff65 	bl	8004960 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d113      	bne.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e007      	b.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d1cb      	bne.n	8005a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005af4:	e028      	b.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f830 	bl	8005b60 <I2C_IsErrorOccurred>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e026      	b.n	8005b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fe ff29 	bl	8004960 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d113      	bne.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e007      	b.n	8005b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d1cf      	bne.n	8005af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d075      	beq.n	8005c78 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b94:	e056      	b.n	8005c44 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d052      	beq.n	8005c44 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fe fedf 	bl	8004960 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_IsErrorOccurred+0x54>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d147      	bne.n	8005c44 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd6:	d12e      	bne.n	8005c36 <I2C_IsErrorOccurred+0xd6>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bde:	d02a      	beq.n	8005c36 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d027      	beq.n	8005c36 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bf6:	f7fe feb3 	bl	8004960 <HAL_GetTick>
 8005bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bfc:	e01b      	b.n	8005c36 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bfe:	f7fe feaf 	bl	8004960 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b19      	cmp	r3, #25
 8005c0a:	d914      	bls.n	8005c36 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d1dc      	bne.n	8005bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d003      	beq.n	8005c5a <I2C_IsErrorOccurred+0xfa>
 8005c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d09d      	beq.n	8005b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2220      	movs	r2, #32
 8005c68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	f043 0308 	orr.w	r3, r3, #8
 8005cb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01c      	beq.n	8005d28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fe56 	bl	80059a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6859      	ldr	r1, [r3, #4]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <I2C_IsErrorOccurred+0x1d4>)
 8005d00:	400b      	ands	r3, r1
 8005d02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	fe00e800 	.word	0xfe00e800

08005d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	817b      	strh	r3, [r7, #10]
 8005d46:	4613      	mov	r3, r2
 8005d48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d50:	7a7b      	ldrb	r3, [r7, #9]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	0d5b      	lsrs	r3, r3, #21
 8005d72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d76:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <I2C_TransferConfig+0x60>)
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	ea02 0103 	and.w	r1, r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	03ff63ff 	.word	0x03ff63ff

08005d9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d138      	bne.n	8005e24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e032      	b.n	8005e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2224      	movs	r2, #36	; 0x24
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	e000      	b.n	8005e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e24:	2302      	movs	r3, #2
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d139      	bne.n	8005ebc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e033      	b.n	8005ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2224      	movs	r2, #36	; 0x24
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40007000 	.word	0x40007000

08005ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef6:	d130      	bne.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f04:	d038      	beq.n	8005f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f06:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2232      	movs	r2, #50	; 0x32
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	0c9b      	lsrs	r3, r3, #18
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f2c:	e002      	b.n	8005f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f40:	d102      	bne.n	8005f48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f2      	bne.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f54:	d110      	bne.n	8005f78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e00f      	b.n	8005f7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f66:	d007      	beq.n	8005f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f70:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	20000018 	.word	0x20000018
 8005f90:	431bde83 	.word	0x431bde83

08005f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e3ca      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa6:	4b97      	ldr	r3, [pc, #604]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb0:	4b94      	ldr	r3, [pc, #592]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80e4 	beq.w	8006190 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_RCC_OscConfig+0x4a>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	f040 808b 	bne.w	80060ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 8087 	bne.w	80060ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fde:	4b89      	ldr	r3, [pc, #548]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x62>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e3a2      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1a      	ldr	r2, [r3, #32]
 8005ffa:	4b82      	ldr	r3, [pc, #520]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <HAL_RCC_OscConfig+0x7c>
 8006006:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600e:	e005      	b.n	800601c <HAL_RCC_OscConfig+0x88>
 8006010:	4b7c      	ldr	r3, [pc, #496]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601c:	4293      	cmp	r3, r2
 800601e:	d223      	bcs.n	8006068 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fd55 	bl	8006ad4 <RCC_SetFlashLatencyFromMSIRange>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e383      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006034:	4b73      	ldr	r3, [pc, #460]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a72      	ldr	r2, [pc, #456]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800603a:	f043 0308 	orr.w	r3, r3, #8
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4b70      	ldr	r3, [pc, #448]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	496d      	ldr	r1, [pc, #436]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006052:	4b6c      	ldr	r3, [pc, #432]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	4968      	ldr	r1, [pc, #416]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006062:	4313      	orrs	r3, r2
 8006064:	604b      	str	r3, [r1, #4]
 8006066:	e025      	b.n	80060b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006068:	4b66      	ldr	r3, [pc, #408]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a65      	ldr	r2, [pc, #404]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800606e:	f043 0308 	orr.w	r3, r3, #8
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b63      	ldr	r3, [pc, #396]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	4960      	ldr	r1, [pc, #384]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006086:	4b5f      	ldr	r3, [pc, #380]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	495b      	ldr	r1, [pc, #364]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fd15 	bl	8006ad4 <RCC_SetFlashLatencyFromMSIRange>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e343      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060b4:	f000 fc4a 	bl	800694c <HAL_RCC_GetSysClockFreq>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b52      	ldr	r3, [pc, #328]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	091b      	lsrs	r3, r3, #4
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	4950      	ldr	r1, [pc, #320]	; (8006208 <HAL_RCC_OscConfig+0x274>)
 80060c6:	5ccb      	ldrb	r3, [r1, r3]
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	4a4e      	ldr	r2, [pc, #312]	; (800620c <HAL_RCC_OscConfig+0x278>)
 80060d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060d4:	4b4e      	ldr	r3, [pc, #312]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe fbf1 	bl	80048c0 <HAL_InitTick>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d052      	beq.n	800618e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	e327      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d032      	beq.n	800615a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060f4:	4b43      	ldr	r3, [pc, #268]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a42      	ldr	r2, [pc, #264]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006100:	f7fe fc2e 	bl	8004960 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006108:	f7fe fc2a 	bl	8004960 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e310      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800611a:	4b3a      	ldr	r3, [pc, #232]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006126:	4b37      	ldr	r3, [pc, #220]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a36      	ldr	r2, [pc, #216]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800612c:	f043 0308 	orr.w	r3, r3, #8
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	4b34      	ldr	r3, [pc, #208]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	4931      	ldr	r1, [pc, #196]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006144:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	492c      	ldr	r1, [pc, #176]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
 8006158:	e01a      	b.n	8006190 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800615a:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a29      	ldr	r2, [pc, #164]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006166:	f7fe fbfb 	bl	8004960 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800616e:	f7fe fbf7 	bl	8004960 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e2dd      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006180:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <HAL_RCC_OscConfig+0x1da>
 800618c:	e000      	b.n	8006190 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800618e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d074      	beq.n	8006286 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d005      	beq.n	80061ae <HAL_RCC_OscConfig+0x21a>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b0c      	cmp	r3, #12
 80061a6:	d10e      	bne.n	80061c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d10b      	bne.n	80061c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ae:	4b15      	ldr	r3, [pc, #84]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d064      	beq.n	8006284 <HAL_RCC_OscConfig+0x2f0>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d160      	bne.n	8006284 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e2ba      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ce:	d106      	bne.n	80061de <HAL_RCC_OscConfig+0x24a>
 80061d0:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a0b      	ldr	r2, [pc, #44]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	e026      	b.n	800622c <HAL_RCC_OscConfig+0x298>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e6:	d115      	bne.n	8006214 <HAL_RCC_OscConfig+0x280>
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a05      	ldr	r2, [pc, #20]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	4b03      	ldr	r3, [pc, #12]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a02      	ldr	r2, [pc, #8]	; (8006204 <HAL_RCC_OscConfig+0x270>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e014      	b.n	800622c <HAL_RCC_OscConfig+0x298>
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
 8006208:	0800e3f0 	.word	0x0800e3f0
 800620c:	20000018 	.word	0x20000018
 8006210:	2000001c 	.word	0x2000001c
 8006214:	4ba0      	ldr	r3, [pc, #640]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a9f      	ldr	r2, [pc, #636]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b9d      	ldr	r3, [pc, #628]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a9c      	ldr	r2, [pc, #624]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006234:	f7fe fb94 	bl	8004960 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800623c:	f7fe fb90 	bl	8004960 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b64      	cmp	r3, #100	; 0x64
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e276      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800624e:	4b92      	ldr	r3, [pc, #584]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0x2a8>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fe fb80 	bl	8004960 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006264:	f7fe fb7c 	bl	8004960 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b64      	cmp	r3, #100	; 0x64
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e262      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006276:	4b88      	ldr	r3, [pc, #544]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0x2d0>
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d060      	beq.n	8006354 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d005      	beq.n	80062a4 <HAL_RCC_OscConfig+0x310>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b0c      	cmp	r3, #12
 800629c:	d119      	bne.n	80062d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d116      	bne.n	80062d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062a4:	4b7c      	ldr	r3, [pc, #496]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_OscConfig+0x328>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e23f      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062bc:	4b76      	ldr	r3, [pc, #472]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	061b      	lsls	r3, r3, #24
 80062ca:	4973      	ldr	r1, [pc, #460]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d0:	e040      	b.n	8006354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d023      	beq.n	8006322 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062da:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a6e      	ldr	r2, [pc, #440]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80062e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fe fb3b 	bl	8004960 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ee:	f7fe fb37 	bl	8004960 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e21d      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006300:	4b65      	ldr	r3, [pc, #404]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0f0      	beq.n	80062ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630c:	4b62      	ldr	r3, [pc, #392]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	061b      	lsls	r3, r3, #24
 800631a:	495f      	ldr	r1, [pc, #380]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800631c:	4313      	orrs	r3, r2
 800631e:	604b      	str	r3, [r1, #4]
 8006320:	e018      	b.n	8006354 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006322:	4b5d      	ldr	r3, [pc, #372]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a5c      	ldr	r2, [pc, #368]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800632c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fe fb17 	bl	8004960 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006336:	f7fe fb13 	bl	8004960 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e1f9      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006348:	4b53      	ldr	r3, [pc, #332]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f0      	bne.n	8006336 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d03c      	beq.n	80063da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01c      	beq.n	80063a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006368:	4b4b      	ldr	r3, [pc, #300]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800636a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800636e:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fe faf2 	bl	8004960 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006380:	f7fe faee 	bl	8004960 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e1d4      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006392:	4b41      	ldr	r3, [pc, #260]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0ef      	beq.n	8006380 <HAL_RCC_OscConfig+0x3ec>
 80063a0:	e01b      	b.n	80063da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a2:	4b3d      	ldr	r3, [pc, #244]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80063a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063a8:	4a3b      	ldr	r2, [pc, #236]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fe fad5 	bl	8004960 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ba:	f7fe fad1 	bl	8004960 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e1b7      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063cc:	4b32      	ldr	r3, [pc, #200]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80063ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ef      	bne.n	80063ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a6 	beq.w	8006534 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063ec:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10d      	bne.n	8006414 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f8:	4b27      	ldr	r3, [pc, #156]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	4a26      	ldr	r2, [pc, #152]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006402:	6593      	str	r3, [r2, #88]	; 0x58
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006410:	2301      	movs	r3, #1
 8006412:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006414:	4b21      	ldr	r3, [pc, #132]	; (800649c <HAL_RCC_OscConfig+0x508>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d118      	bne.n	8006452 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <HAL_RCC_OscConfig+0x508>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <HAL_RCC_OscConfig+0x508>)
 8006426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642c:	f7fe fa98 	bl	8004960 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006434:	f7fe fa94 	bl	8004960 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e17a      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <HAL_RCC_OscConfig+0x508>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d108      	bne.n	800646c <HAL_RCC_OscConfig+0x4d8>
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	4a0d      	ldr	r2, [pc, #52]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800646a:	e029      	b.n	80064c0 <HAL_RCC_OscConfig+0x52c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b05      	cmp	r3, #5
 8006472:	d115      	bne.n	80064a0 <HAL_RCC_OscConfig+0x50c>
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	4a07      	ldr	r2, [pc, #28]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006484:	4b04      	ldr	r3, [pc, #16]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	4a03      	ldr	r2, [pc, #12]	; (8006498 <HAL_RCC_OscConfig+0x504>)
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006494:	e014      	b.n	80064c0 <HAL_RCC_OscConfig+0x52c>
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000
 800649c:	40007000 	.word	0x40007000
 80064a0:	4b9c      	ldr	r3, [pc, #624]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	4a9b      	ldr	r2, [pc, #620]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064b0:	4b98      	ldr	r3, [pc, #608]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	4a97      	ldr	r2, [pc, #604]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d016      	beq.n	80064f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fe fa4a 	bl	8004960 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d0:	f7fe fa46 	bl	8004960 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	; 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e12a      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e6:	4b8b      	ldr	r3, [pc, #556]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ed      	beq.n	80064d0 <HAL_RCC_OscConfig+0x53c>
 80064f4:	e015      	b.n	8006522 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f6:	f7fe fa33 	bl	8004960 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fe fa2f 	bl	8004960 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e113      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006514:	4b7f      	ldr	r3, [pc, #508]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ed      	bne.n	80064fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006522:	7ffb      	ldrb	r3, [r7, #31]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006528:	4b7a      	ldr	r3, [pc, #488]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652c:	4a79      	ldr	r2, [pc, #484]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800652e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006532:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80fe 	beq.w	800673a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	2b02      	cmp	r3, #2
 8006544:	f040 80d0 	bne.w	80066e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006548:	4b72      	ldr	r3, [pc, #456]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f003 0203 	and.w	r2, r3, #3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	429a      	cmp	r2, r3
 800655a:	d130      	bne.n	80065be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	3b01      	subs	r3, #1
 8006568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d127      	bne.n	80065be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d11f      	bne.n	80065be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006588:	2a07      	cmp	r2, #7
 800658a:	bf14      	ite	ne
 800658c:	2201      	movne	r2, #1
 800658e:	2200      	moveq	r2, #0
 8006590:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006592:	4293      	cmp	r3, r2
 8006594:	d113      	bne.n	80065be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	3b01      	subs	r3, #1
 80065a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d109      	bne.n	80065be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d06e      	beq.n	800669c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d069      	beq.n	8006698 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065c4:	4b53      	ldr	r3, [pc, #332]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80065d0:	4b50      	ldr	r3, [pc, #320]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0ad      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065e0:	4b4c      	ldr	r3, [pc, #304]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a4b      	ldr	r2, [pc, #300]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065ec:	f7fe f9b8 	bl	8004960 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fe f9b4 	bl	8004960 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e09a      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006606:	4b43      	ldr	r3, [pc, #268]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006612:	4b40      	ldr	r3, [pc, #256]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	4b40      	ldr	r3, [pc, #256]	; (8006718 <HAL_RCC_OscConfig+0x784>)
 8006618:	4013      	ands	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006622:	3a01      	subs	r2, #1
 8006624:	0112      	lsls	r2, r2, #4
 8006626:	4311      	orrs	r1, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800662c:	0212      	lsls	r2, r2, #8
 800662e:	4311      	orrs	r1, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006634:	0852      	lsrs	r2, r2, #1
 8006636:	3a01      	subs	r2, #1
 8006638:	0552      	lsls	r2, r2, #21
 800663a:	4311      	orrs	r1, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006640:	0852      	lsrs	r2, r2, #1
 8006642:	3a01      	subs	r2, #1
 8006644:	0652      	lsls	r2, r2, #25
 8006646:	4311      	orrs	r1, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800664c:	0912      	lsrs	r2, r2, #4
 800664e:	0452      	lsls	r2, r2, #17
 8006650:	430a      	orrs	r2, r1
 8006652:	4930      	ldr	r1, [pc, #192]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 8006654:	4313      	orrs	r3, r2
 8006656:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006658:	4b2e      	ldr	r3, [pc, #184]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800665e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006662:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006664:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a2a      	ldr	r2, [pc, #168]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800666a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800666e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006670:	f7fe f976 	bl	8004960 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006678:	f7fe f972 	bl	8004960 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e058      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006696:	e050      	b.n	800673a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e04f      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800669c:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d148      	bne.n	800673a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066a8:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066b4:	4b17      	ldr	r3, [pc, #92]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a16      	ldr	r2, [pc, #88]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066c0:	f7fe f94e 	bl	8004960 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c8:	f7fe f94a 	bl	8004960 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e030      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066da:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0x734>
 80066e6:	e028      	b.n	800673a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2b0c      	cmp	r3, #12
 80066ec:	d023      	beq.n	8006736 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a08      	ldr	r2, [pc, #32]	; (8006714 <HAL_RCC_OscConfig+0x780>)
 80066f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fe f931 	bl	8004960 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006700:	e00c      	b.n	800671c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006702:	f7fe f92d 	bl	8004960 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d905      	bls.n	800671c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e013      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
 8006714:	40021000 	.word	0x40021000
 8006718:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <HAL_RCC_OscConfig+0x7b0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ec      	bne.n	8006702 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_RCC_OscConfig+0x7b0>)
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	4905      	ldr	r1, [pc, #20]	; (8006744 <HAL_RCC_OscConfig+0x7b0>)
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <HAL_RCC_OscConfig+0x7b4>)
 8006730:	4013      	ands	r3, r2
 8006732:	60cb      	str	r3, [r1, #12]
 8006734:	e001      	b.n	800673a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40021000 	.word	0x40021000
 8006748:	feeefffc 	.word	0xfeeefffc

0800674c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0e7      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006760:	4b75      	ldr	r3, [pc, #468]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d910      	bls.n	8006790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b72      	ldr	r3, [pc, #456]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 0207 	bic.w	r2, r3, #7
 8006776:	4970      	ldr	r1, [pc, #448]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b6e      	ldr	r3, [pc, #440]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0cf      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d010      	beq.n	80067be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	4b66      	ldr	r3, [pc, #408]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d908      	bls.n	80067be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ac:	4b63      	ldr	r3, [pc, #396]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4960      	ldr	r1, [pc, #384]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d04c      	beq.n	8006864 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d107      	bne.n	80067e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067d2:	4b5a      	ldr	r3, [pc, #360]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d121      	bne.n	8006822 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0a6      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ea:	4b54      	ldr	r3, [pc, #336]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d115      	bne.n	8006822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e09a      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d107      	bne.n	8006812 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006802:	4b4e      	ldr	r3, [pc, #312]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e08e      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006812:	4b4a      	ldr	r3, [pc, #296]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e086      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006822:	4b46      	ldr	r3, [pc, #280]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f023 0203 	bic.w	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4943      	ldr	r1, [pc, #268]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006834:	f7fe f894 	bl	8004960 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683a:	e00a      	b.n	8006852 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800683c:	f7fe f890 	bl	8004960 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f241 3288 	movw	r2, #5000	; 0x1388
 800684a:	4293      	cmp	r3, r2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e06e      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006852:	4b3a      	ldr	r3, [pc, #232]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 020c 	and.w	r2, r3, #12
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	429a      	cmp	r2, r3
 8006862:	d1eb      	bne.n	800683c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	4b31      	ldr	r3, [pc, #196]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800687c:	429a      	cmp	r2, r3
 800687e:	d208      	bcs.n	8006892 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006880:	4b2e      	ldr	r3, [pc, #184]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	492b      	ldr	r1, [pc, #172]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006892:	4b29      	ldr	r3, [pc, #164]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d210      	bcs.n	80068c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a0:	4b25      	ldr	r3, [pc, #148]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f023 0207 	bic.w	r2, r3, #7
 80068a8:	4923      	ldr	r1, [pc, #140]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <HAL_RCC_ClockConfig+0x1ec>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d001      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e036      	b.n	8006930 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ce:	4b1b      	ldr	r3, [pc, #108]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	4918      	ldr	r1, [pc, #96]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d009      	beq.n	8006900 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	4910      	ldr	r1, [pc, #64]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006900:	f000 f824 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <HAL_RCC_ClockConfig+0x1f0>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	091b      	lsrs	r3, r3, #4
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	490b      	ldr	r1, [pc, #44]	; (8006940 <HAL_RCC_ClockConfig+0x1f4>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	4a09      	ldr	r2, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1f8>)
 800691e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006920:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_RCC_ClockConfig+0x1fc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fd ffcb 	bl	80048c0 <HAL_InitTick>
 800692a:	4603      	mov	r3, r0
 800692c:	72fb      	strb	r3, [r7, #11]

  return status;
 800692e:	7afb      	ldrb	r3, [r7, #11]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40022000 	.word	0x40022000
 800693c:	40021000 	.word	0x40021000
 8006940:	0800e3f0 	.word	0x0800e3f0
 8006944:	20000018 	.word	0x20000018
 8006948:	2000001c 	.word	0x2000001c

0800694c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	; 0x24
 8006950:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	2300      	movs	r3, #0
 8006958:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800695a:	4b3e      	ldr	r3, [pc, #248]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006964:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x34>
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d121      	bne.n	80069be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d11e      	bne.n	80069be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006980:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d107      	bne.n	800699c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800698c:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800698e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e005      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800699c:	4b2d      	ldr	r3, [pc, #180]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069a8:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10d      	bne.n	80069d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069bc:	e00a      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d102      	bne.n	80069ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e004      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d101      	bne.n	80069d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069d0:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80069d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b0c      	cmp	r3, #12
 80069d8:	d134      	bne.n	8006a44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069da:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d003      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0xac>
 80069f0:	e005      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069f2:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80069f4:	617b      	str	r3, [r7, #20]
      break;
 80069f6:	e005      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80069fa:	617b      	str	r3, [r7, #20]
      break;
 80069fc:	e002      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	617b      	str	r3, [r7, #20]
      break;
 8006a02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a04:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	3301      	adds	r3, #1
 8006a10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	0a1b      	lsrs	r3, r3, #8
 8006a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	fb03 f202 	mul.w	r2, r3, r2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	0e5b      	lsrs	r3, r3, #25
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	3301      	adds	r3, #1
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a44:	69bb      	ldr	r3, [r7, #24]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3724      	adds	r7, #36	; 0x24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	0800e408 	.word	0x0800e408
 8006a5c:	00f42400 	.word	0x00f42400
 8006a60:	007a1200 	.word	0x007a1200

08006a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a68:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000018 	.word	0x20000018

08006a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a80:	f7ff fff0 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4904      	ldr	r1, [pc, #16]	; (8006aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	0800e400 	.word	0x0800e400

08006aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006aac:	f7ff ffda 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	0adb      	lsrs	r3, r3, #11
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	4904      	ldr	r1, [pc, #16]	; (8006ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	0800e400 	.word	0x0800e400

08006ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ae0:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006aec:	f7ff f9ee 	bl	8005ecc <HAL_PWREx_GetVoltageRange>
 8006af0:	6178      	str	r0, [r7, #20]
 8006af2:	e014      	b.n	8006b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af8:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006afe:	6593      	str	r3, [r2, #88]	; 0x58
 8006b00:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b0c:	f7ff f9de 	bl	8005ecc <HAL_PWREx_GetVoltageRange>
 8006b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b12:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b24:	d10b      	bne.n	8006b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d919      	bls.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8006b30:	d902      	bls.n	8006b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b32:	2302      	movs	r3, #2
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	e013      	b.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b38:	2301      	movs	r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	e010      	b.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d902      	bls.n	8006b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b44:	2303      	movs	r3, #3
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	e00a      	b.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d102      	bne.n	8006b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b50:	2302      	movs	r3, #2
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	e004      	b.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b70      	cmp	r3, #112	; 0x70
 8006b5a:	d101      	bne.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b60:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f023 0207 	bic.w	r2, r3, #7
 8006b68:	4909      	ldr	r1, [pc, #36]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d001      	beq.n	8006b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	40022000 	.word	0x40022000

08006b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d041      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bb8:	d02a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006bba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bbe:	d824      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc4:	d008      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bca:	d81e      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd4:	d010      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bd6:	e018      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bd8:	4b86      	ldr	r3, [pc, #536]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4a85      	ldr	r2, [pc, #532]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006be4:	e015      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fabb 	bl	8007168 <RCCEx_PLLSAI1_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bf6:	e00c      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3320      	adds	r3, #32
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fba6 	bl	8007350 <RCCEx_PLLSAI2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	74fb      	strb	r3, [r7, #19]
      break;
 8006c0e:	e000      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c12:	7cfb      	ldrb	r3, [r7, #19]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c18:	4b76      	ldr	r3, [pc, #472]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c26:	4973      	ldr	r1, [pc, #460]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c2e:	e001      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	7cfb      	ldrb	r3, [r7, #19]
 8006c32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d041      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c48:	d02a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006c4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c4e:	d824      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c54:	d008      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5a:	d81e      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c64:	d010      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c66:	e018      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c68:	4b62      	ldr	r3, [pc, #392]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4a61      	ldr	r2, [pc, #388]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c74:	e015      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fa73 	bl	8007168 <RCCEx_PLLSAI1_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c86:	e00c      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3320      	adds	r3, #32
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fb5e 	bl	8007350 <RCCEx_PLLSAI2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c98:	e003      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca2:	7cfb      	ldrb	r3, [r7, #19]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ca8:	4b52      	ldr	r3, [pc, #328]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb6:	494f      	ldr	r1, [pc, #316]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cbe:	e001      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	7cfb      	ldrb	r3, [r7, #19]
 8006cc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80a0 	beq.w	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cd6:	4b47      	ldr	r3, [pc, #284]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cec:	4b41      	ldr	r3, [pc, #260]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf0:	4a40      	ldr	r2, [pc, #256]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cf8:	4b3e      	ldr	r3, [pc, #248]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d04:	2301      	movs	r3, #1
 8006d06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d08:	4b3b      	ldr	r3, [pc, #236]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d14:	f7fd fe24 	bl	8004960 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d1a:	e009      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1c:	f7fd fe20 	bl	8004960 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d902      	bls.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	74fb      	strb	r3, [r7, #19]
        break;
 8006d2e:	e005      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d30:	4b31      	ldr	r3, [pc, #196]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0ef      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006d3c:	7cfb      	ldrb	r3, [r7, #19]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d15c      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d42:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01f      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d019      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d60:	4b24      	ldr	r3, [pc, #144]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d6c:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	4a20      	ldr	r2, [pc, #128]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d016      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9e:	f7fd fddf 	bl	8004960 <HAL_GetTick>
 8006da2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006da4:	e00b      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da6:	f7fd fddb 	bl	8004960 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d902      	bls.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	74fb      	strb	r3, [r7, #19]
            break;
 8006dbc:	e006      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0ec      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006dcc:	7cfb      	ldrb	r3, [r7, #19]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10c      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd2:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de2:	4904      	ldr	r1, [pc, #16]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dea:	e009      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	74bb      	strb	r3, [r7, #18]
 8006df0:	e006      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000
 8006df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	7cfb      	ldrb	r3, [r7, #19]
 8006dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e00:	7c7b      	ldrb	r3, [r7, #17]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e06:	4b9e      	ldr	r3, [pc, #632]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	4a9d      	ldr	r2, [pc, #628]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e1e:	4b98      	ldr	r3, [pc, #608]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e24:	f023 0203 	bic.w	r2, r3, #3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	4994      	ldr	r1, [pc, #592]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e40:	4b8f      	ldr	r3, [pc, #572]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e46:	f023 020c 	bic.w	r2, r3, #12
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	498c      	ldr	r1, [pc, #560]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e62:	4b87      	ldr	r3, [pc, #540]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	4983      	ldr	r1, [pc, #524]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e84:	4b7e      	ldr	r3, [pc, #504]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	497b      	ldr	r1, [pc, #492]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ea6:	4b76      	ldr	r3, [pc, #472]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb4:	4972      	ldr	r1, [pc, #456]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ec8:	4b6d      	ldr	r3, [pc, #436]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	496a      	ldr	r1, [pc, #424]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eea:	4b65      	ldr	r3, [pc, #404]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	4961      	ldr	r1, [pc, #388]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f0c:	4b5c      	ldr	r3, [pc, #368]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1a:	4959      	ldr	r1, [pc, #356]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f2e:	4b54      	ldr	r3, [pc, #336]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3c:	4950      	ldr	r1, [pc, #320]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f50:	4b4b      	ldr	r3, [pc, #300]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	4948      	ldr	r1, [pc, #288]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f72:	4b43      	ldr	r3, [pc, #268]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f80:	493f      	ldr	r1, [pc, #252]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d028      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f94:	4b3a      	ldr	r3, [pc, #232]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa2:	4937      	ldr	r1, [pc, #220]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb4:	4b32      	ldr	r3, [pc, #200]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4a31      	ldr	r2, [pc, #196]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fbe:	60d3      	str	r3, [r2, #12]
 8006fc0:	e011      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fca:	d10c      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 f8c8 	bl	8007168 <RCCEx_PLLSAI1_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006fdc:	7cfb      	ldrb	r3, [r7, #19]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006fe2:	7cfb      	ldrb	r3, [r7, #19]
 8006fe4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d028      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ff2:	4b23      	ldr	r3, [pc, #140]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	491f      	ldr	r1, [pc, #124]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007010:	d106      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007012:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	4a1a      	ldr	r2, [pc, #104]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800701c:	60d3      	str	r3, [r2, #12]
 800701e:	e011      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007028:	d10c      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	2101      	movs	r1, #1
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f899 	bl	8007168 <RCCEx_PLLSAI1_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800703a:	7cfb      	ldrb	r3, [r7, #19]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007040:	7cfb      	ldrb	r3, [r7, #19]
 8007042:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800705e:	4908      	ldr	r1, [pc, #32]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007060:	4313      	orrs	r3, r2
 8007062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800706e:	d109      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007070:	4b03      	ldr	r3, [pc, #12]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4a02      	ldr	r2, [pc, #8]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800707a:	60d3      	str	r3, [r2, #12]
 800707c:	e014      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800708c:	d10c      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3304      	adds	r3, #4
 8007092:	2101      	movs	r1, #1
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f867 	bl	8007168 <RCCEx_PLLSAI1_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800709e:	7cfb      	ldrb	r3, [r7, #19]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80070a4:	7cfb      	ldrb	r3, [r7, #19]
 80070a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02f      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070b4:	4b2b      	ldr	r3, [pc, #172]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c2:	4928      	ldr	r1, [pc, #160]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d2:	d10d      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	2102      	movs	r1, #2
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f844 	bl	8007168 <RCCEx_PLLSAI1_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d014      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80070ea:	7cfb      	ldrb	r3, [r7, #19]
 80070ec:	74bb      	strb	r3, [r7, #18]
 80070ee:	e011      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f8:	d10c      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3320      	adds	r3, #32
 80070fe:	2102      	movs	r1, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f925 	bl	8007350 <RCCEx_PLLSAI2_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007110:	7cfb      	ldrb	r3, [r7, #19]
 8007112:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007120:	4b10      	ldr	r3, [pc, #64]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007126:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007142:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007152:	4904      	ldr	r1, [pc, #16]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800715a:	7cbb      	ldrb	r3, [r7, #18]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40021000 	.word	0x40021000

08007168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007176:	4b75      	ldr	r3, [pc, #468]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d018      	beq.n	80071b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007182:	4b72      	ldr	r3, [pc, #456]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0203 	and.w	r2, r3, #3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d10d      	bne.n	80071ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
       ||
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800719a:	4b6c      	ldr	r3, [pc, #432]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	091b      	lsrs	r3, r3, #4
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
       ||
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d047      	beq.n	800723e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	e044      	b.n	800723e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d018      	beq.n	80071ee <RCCEx_PLLSAI1_Config+0x86>
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d825      	bhi.n	800720c <RCCEx_PLLSAI1_Config+0xa4>
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d002      	beq.n	80071ca <RCCEx_PLLSAI1_Config+0x62>
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d009      	beq.n	80071dc <RCCEx_PLLSAI1_Config+0x74>
 80071c8:	e020      	b.n	800720c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071ca:	4b60      	ldr	r3, [pc, #384]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d11d      	bne.n	8007212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071da:	e01a      	b.n	8007212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071dc:	4b5b      	ldr	r3, [pc, #364]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d116      	bne.n	8007216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ec:	e013      	b.n	8007216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071ee:	4b57      	ldr	r3, [pc, #348]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10f      	bne.n	800721a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071fa:	4b54      	ldr	r3, [pc, #336]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800720a:	e006      	b.n	800721a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	e004      	b.n	800721c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007212:	bf00      	nop
 8007214:	e002      	b.n	800721c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007216:	bf00      	nop
 8007218:	e000      	b.n	800721c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800721a:	bf00      	nop
    }

    if(status == HAL_OK)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10d      	bne.n	800723e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007222:	4b4a      	ldr	r3, [pc, #296]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6819      	ldr	r1, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	3b01      	subs	r3, #1
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	430b      	orrs	r3, r1
 8007238:	4944      	ldr	r1, [pc, #272]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 800723a:	4313      	orrs	r3, r2
 800723c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d17d      	bne.n	8007340 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007244:	4b41      	ldr	r3, [pc, #260]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a40      	ldr	r2, [pc, #256]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 800724a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800724e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007250:	f7fd fb86 	bl	8004960 <HAL_GetTick>
 8007254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007256:	e009      	b.n	800726c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007258:	f7fd fb82 	bl	8004960 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d902      	bls.n	800726c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	73fb      	strb	r3, [r7, #15]
        break;
 800726a:	e005      	b.n	8007278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800726c:	4b37      	ldr	r3, [pc, #220]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1ef      	bne.n	8007258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d160      	bne.n	8007340 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d111      	bne.n	80072a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007284:	4b31      	ldr	r3, [pc, #196]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800728c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6892      	ldr	r2, [r2, #8]
 8007294:	0211      	lsls	r1, r2, #8
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68d2      	ldr	r2, [r2, #12]
 800729a:	0912      	lsrs	r2, r2, #4
 800729c:	0452      	lsls	r2, r2, #17
 800729e:	430a      	orrs	r2, r1
 80072a0:	492a      	ldr	r1, [pc, #168]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	610b      	str	r3, [r1, #16]
 80072a6:	e027      	b.n	80072f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d112      	bne.n	80072d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ae:	4b27      	ldr	r3, [pc, #156]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80072b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6892      	ldr	r2, [r2, #8]
 80072be:	0211      	lsls	r1, r2, #8
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6912      	ldr	r2, [r2, #16]
 80072c4:	0852      	lsrs	r2, r2, #1
 80072c6:	3a01      	subs	r2, #1
 80072c8:	0552      	lsls	r2, r2, #21
 80072ca:	430a      	orrs	r2, r1
 80072cc:	491f      	ldr	r1, [pc, #124]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	610b      	str	r3, [r1, #16]
 80072d2:	e011      	b.n	80072f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072d4:	4b1d      	ldr	r3, [pc, #116]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80072dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6892      	ldr	r2, [r2, #8]
 80072e4:	0211      	lsls	r1, r2, #8
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6952      	ldr	r2, [r2, #20]
 80072ea:	0852      	lsrs	r2, r2, #1
 80072ec:	3a01      	subs	r2, #1
 80072ee:	0652      	lsls	r2, r2, #25
 80072f0:	430a      	orrs	r2, r1
 80072f2:	4916      	ldr	r1, [pc, #88]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072f8:	4b14      	ldr	r3, [pc, #80]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a13      	ldr	r2, [pc, #76]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fd fb2c 	bl	8004960 <HAL_GetTick>
 8007308:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800730a:	e009      	b.n	8007320 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800730c:	f7fd fb28 	bl	8004960 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d902      	bls.n	8007320 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	73fb      	strb	r3, [r7, #15]
          break;
 800731e:	e005      	b.n	800732c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0ef      	beq.n	800730c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	4904      	ldr	r1, [pc, #16]	; (800734c <RCCEx_PLLSAI1_Config+0x1e4>)
 800733c:	4313      	orrs	r3, r2
 800733e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000

08007350 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800735e:	4b6a      	ldr	r3, [pc, #424]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d018      	beq.n	800739c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800736a:	4b67      	ldr	r3, [pc, #412]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0203 	and.w	r2, r3, #3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d10d      	bne.n	8007396 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
       ||
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007382:	4b61      	ldr	r3, [pc, #388]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	091b      	lsrs	r3, r3, #4
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
       ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d047      	beq.n	8007426 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
 800739a:	e044      	b.n	8007426 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d018      	beq.n	80073d6 <RCCEx_PLLSAI2_Config+0x86>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d825      	bhi.n	80073f4 <RCCEx_PLLSAI2_Config+0xa4>
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d002      	beq.n	80073b2 <RCCEx_PLLSAI2_Config+0x62>
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d009      	beq.n	80073c4 <RCCEx_PLLSAI2_Config+0x74>
 80073b0:	e020      	b.n	80073f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073b2:	4b55      	ldr	r3, [pc, #340]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11d      	bne.n	80073fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073c2:	e01a      	b.n	80073fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073c4:	4b50      	ldr	r3, [pc, #320]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d116      	bne.n	80073fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d4:	e013      	b.n	80073fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073d6:	4b4c      	ldr	r3, [pc, #304]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10f      	bne.n	8007402 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073e2:	4b49      	ldr	r3, [pc, #292]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073f2:	e006      	b.n	8007402 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e004      	b.n	8007404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073fa:	bf00      	nop
 80073fc:	e002      	b.n	8007404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073fe:	bf00      	nop
 8007400:	e000      	b.n	8007404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007402:	bf00      	nop
    }

    if(status == HAL_OK)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800740a:	4b3f      	ldr	r3, [pc, #252]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	3b01      	subs	r3, #1
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	430b      	orrs	r3, r1
 8007420:	4939      	ldr	r1, [pc, #228]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007422:	4313      	orrs	r3, r2
 8007424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d167      	bne.n	80074fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800742c:	4b36      	ldr	r3, [pc, #216]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a35      	ldr	r2, [pc, #212]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007438:	f7fd fa92 	bl	8004960 <HAL_GetTick>
 800743c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800743e:	e009      	b.n	8007454 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007440:	f7fd fa8e 	bl	8004960 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d902      	bls.n	8007454 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	73fb      	strb	r3, [r7, #15]
        break;
 8007452:	e005      	b.n	8007460 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007454:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1ef      	bne.n	8007440 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d14a      	bne.n	80074fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d111      	bne.n	8007490 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800746c:	4b26      	ldr	r3, [pc, #152]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6892      	ldr	r2, [r2, #8]
 800747c:	0211      	lsls	r1, r2, #8
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	68d2      	ldr	r2, [r2, #12]
 8007482:	0912      	lsrs	r2, r2, #4
 8007484:	0452      	lsls	r2, r2, #17
 8007486:	430a      	orrs	r2, r1
 8007488:	491f      	ldr	r1, [pc, #124]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800748a:	4313      	orrs	r3, r2
 800748c:	614b      	str	r3, [r1, #20]
 800748e:	e011      	b.n	80074b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007490:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	0211      	lsls	r1, r2, #8
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6912      	ldr	r2, [r2, #16]
 80074a6:	0852      	lsrs	r2, r2, #1
 80074a8:	3a01      	subs	r2, #1
 80074aa:	0652      	lsls	r2, r2, #25
 80074ac:	430a      	orrs	r2, r1
 80074ae:	4916      	ldr	r1, [pc, #88]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a13      	ldr	r2, [pc, #76]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c0:	f7fd fa4e 	bl	8004960 <HAL_GetTick>
 80074c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074c6:	e009      	b.n	80074dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074c8:	f7fd fa4a 	bl	8004960 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d902      	bls.n	80074dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	73fb      	strb	r3, [r7, #15]
          break;
 80074da:	e005      	b.n	80074e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0ef      	beq.n	80074c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d106      	bne.n	80074fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074ee:	4b06      	ldr	r3, [pc, #24]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074f0:	695a      	ldr	r2, [r3, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	4904      	ldr	r1, [pc, #16]	; (8007508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	40021000 	.word	0x40021000

0800750c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e095      	b.n	800764a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d108      	bne.n	8007538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752e:	d009      	beq.n	8007544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	61da      	str	r2, [r3, #28]
 8007536:	e005      	b.n	8007544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f877 	bl	8007652 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007584:	d902      	bls.n	800758c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e002      	b.n	8007592 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800758c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007590:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800759a:	d007      	beq.n	80075ac <HAL_SPI_Init+0xa0>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	ea42 0103 	orr.w	r1, r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	f003 0204 	and.w	r2, r3, #4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007628:	ea42 0103 	orr.w	r1, r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b08a      	sub	sp, #40	; 0x28
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007674:	2301      	movs	r3, #1
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_SPI_TransmitReceive+0x26>
 8007688:	2302      	movs	r3, #2
 800768a:	e1fb      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x41e>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007694:	f7fd f964 	bl	8004960 <HAL_GetTick>
 8007698:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076b0:	7efb      	ldrb	r3, [r7, #27]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d00e      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x6e>
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076bc:	d106      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x66>
 80076c6:	7efb      	ldrb	r3, [r7, #27]
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d003      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80076d2:	e1cd      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x80>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x80>
 80076e0:	887b      	ldrh	r3, [r7, #2]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80076ec:	e1c0      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d003      	beq.n	8007702 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2205      	movs	r2, #5
 80076fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	887a      	ldrh	r2, [r7, #2]
 8007712:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	887a      	ldrh	r2, [r7, #2]
 800771a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	887a      	ldrh	r2, [r7, #2]
 8007728:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	887a      	ldrh	r2, [r7, #2]
 800772e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007744:	d802      	bhi.n	800774c <HAL_SPI_TransmitReceive+0xe6>
 8007746:	8a3b      	ldrh	r3, [r7, #16]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d908      	bls.n	800775e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	e007      	b.n	800776e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800776c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d007      	beq.n	800778c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800778a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007794:	d97c      	bls.n	8007890 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x13e>
 800779e:	8a7b      	ldrh	r3, [r7, #18]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d169      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c8:	e056      	b.n	8007878 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d11b      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x1aa>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d016      	beq.n	8007810 <HAL_SPI_TransmitReceive+0x1aa>
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d113      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	881a      	ldrh	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	1c9a      	adds	r2, r3, #2
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d11c      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x1f2>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	b292      	uxth	r2, r2
 8007836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	1c9a      	adds	r2, r3, #2
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007854:	2301      	movs	r3, #1
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007858:	f7fd f882 	bl	8004960 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007864:	429a      	cmp	r2, r3
 8007866:	d807      	bhi.n	8007878 <HAL_SPI_TransmitReceive+0x212>
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d003      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007876:	e0fb      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1a3      	bne.n	80077ca <HAL_SPI_TransmitReceive+0x164>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d19d      	bne.n	80077ca <HAL_SPI_TransmitReceive+0x164>
 800788e:	e0df      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_SPI_TransmitReceive+0x23a>
 8007898:	8a7b      	ldrh	r3, [r7, #18]
 800789a:	2b01      	cmp	r3, #1
 800789c:	f040 80cb 	bne.w	8007a36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d912      	bls.n	80078d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	881a      	ldrh	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	1c9a      	adds	r2, r3, #2
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b02      	subs	r3, #2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ce:	e0b2      	b.n	8007a36 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	7812      	ldrb	r2, [r2, #0]
 80078dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f6:	e09e      	b.n	8007a36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b02      	cmp	r3, #2
 8007904:	d134      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x30a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d02f      	beq.n	8007970 <HAL_SPI_TransmitReceive+0x30a>
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	2b01      	cmp	r3, #1
 8007914:	d12c      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	d912      	bls.n	8007946 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	881a      	ldrh	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	1c9a      	adds	r2, r3, #2
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b02      	subs	r3, #2
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007944:	e012      	b.n	800796c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	7812      	ldrb	r2, [r2, #0]
 8007952:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b01      	cmp	r3, #1
 800797c:	d148      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x3aa>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d042      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	d923      	bls.n	80079de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	b292      	uxth	r2, r2
 80079a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b02      	subs	r3, #2
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d81f      	bhi.n	8007a0c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079da:	605a      	str	r2, [r3, #4]
 80079dc:	e016      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f103 020c 	add.w	r2, r3, #12
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	7812      	ldrb	r2, [r2, #0]
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a10:	f7fc ffa6 	bl	8004960 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d803      	bhi.n	8007a28 <HAL_SPI_TransmitReceive+0x3c2>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d102      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x3c8>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007a34:	e01c      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f47f af5b 	bne.w	80078f8 <HAL_SPI_TransmitReceive+0x292>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f47f af54 	bne.w	80078f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f945 	bl	8007ce4 <SPI_EndRxTxTransaction>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d006      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
 8007a6c:	e000      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007a6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a9a:	b2db      	uxtb	r3, r3
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ab8:	f7fc ff52 	bl	8004960 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ac8:	f7fc ff4a 	bl	8004960 <HAL_GetTick>
 8007acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ace:	4b39      	ldr	r3, [pc, #228]	; (8007bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	015b      	lsls	r3, r3, #5
 8007ad4:	0d1b      	lsrs	r3, r3, #20
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	fb02 f303 	mul.w	r3, r2, r3
 8007adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ade:	e054      	b.n	8007b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d050      	beq.n	8007b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ae8:	f7fc ff3a 	bl	8004960 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d902      	bls.n	8007afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d13d      	bne.n	8007b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b16:	d111      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b20:	d004      	beq.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2a:	d107      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b44:	d10f      	bne.n	8007b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e017      	b.n	8007baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d19b      	bne.n	8007ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000018 	.word	0x20000018

08007bb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bca:	f7fc fec9 	bl	8004960 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007bda:	f7fc fec1 	bl	8004960 <HAL_GetTick>
 8007bde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007be8:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	00da      	lsls	r2, r3, #3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	0d1b      	lsrs	r3, r3, #20
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfa:	fb02 f303 	mul.w	r3, r2, r3
 8007bfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c00:	e060      	b.n	8007cc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c08:	d107      	bne.n	8007c1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d050      	beq.n	8007cc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c22:	f7fc fe9d 	bl	8004960 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d902      	bls.n	8007c38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d13d      	bne.n	8007cb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c50:	d111      	bne.n	8007c76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c5a:	d004      	beq.n	8007c66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c64:	d107      	bne.n	8007c76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7e:	d10f      	bne.n	8007ca0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e010      	b.n	8007cd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d196      	bne.n	8007c02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3728      	adds	r7, #40	; 0x28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000018 	.word	0x20000018

08007ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7ff ff5b 	bl	8007bb8 <SPI_WaitFifoStateUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0c:	f043 0220 	orr.w	r2, r3, #32
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e027      	b.n	8007d68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff fec0 	bl	8007aa8 <SPI_WaitFlagStateUntilTimeout>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d32:	f043 0220 	orr.w	r2, r3, #32
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e014      	b.n	8007d68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff ff34 	bl	8007bb8 <SPI_WaitFifoStateUntilTimeout>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5a:	f043 0220 	orr.w	r2, r3, #32
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e000      	b.n	8007d68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e040      	b.n	8007e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f83a 	bl	8007e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2224      	movs	r2, #36	; 0x24
 8007d9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8ca 	bl	8007f48 <UART_SetConfig>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e022      	b.n	8007e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fb76 	bl	80084b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fbfd 	bl	80085fc <UART_CheckIdleState>
 8007e02:	4603      	mov	r3, r0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	f040 8082 	bne.w	8007f3e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_UART_Transmit+0x26>
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e07a      	b.n	8007f40 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_UART_Transmit+0x38>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e073      	b.n	8007f40 <HAL_UART_Transmit+0x120>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2221      	movs	r2, #33	; 0x21
 8007e6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e6e:	f7fc fd77 	bl	8004960 <HAL_GetTick>
 8007e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	88fa      	ldrh	r2, [r7, #6]
 8007e80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8c:	d108      	bne.n	8007ea0 <HAL_UART_Transmit+0x80>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	e003      	b.n	8007ea8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007eb0:	e02d      	b.n	8007f0e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fbe6 	bl	800868e <UART_WaitOnFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e039      	b.n	8007f40 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10b      	bne.n	8007eea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	881a      	ldrh	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	e008      	b.n	8007efc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	781a      	ldrb	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1cb      	bne.n	8007eb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2200      	movs	r2, #0
 8007f22:	2140      	movs	r1, #64	; 0x40
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 fbb2 	bl	800868e <UART_WaitOnFlagUntilTimeout>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e005      	b.n	8007f40 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e000      	b.n	8007f40 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
  }
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f4c:	b08a      	sub	sp, #40	; 0x28
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	431a      	orrs	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4ba4      	ldr	r3, [pc, #656]	; (8008208 <UART_SetConfig+0x2c0>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a99      	ldr	r2, [pc, #612]	; (800820c <UART_SetConfig+0x2c4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a90      	ldr	r2, [pc, #576]	; (8008210 <UART_SetConfig+0x2c8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d126      	bne.n	8008020 <UART_SetConfig+0xd8>
 8007fd2:	4b90      	ldr	r3, [pc, #576]	; (8008214 <UART_SetConfig+0x2cc>)
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d81b      	bhi.n	8008018 <UART_SetConfig+0xd0>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0xa0>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ffe:	e116      	b.n	800822e <UART_SetConfig+0x2e6>
 8008000:	2302      	movs	r3, #2
 8008002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008006:	e112      	b.n	800822e <UART_SetConfig+0x2e6>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800800e:	e10e      	b.n	800822e <UART_SetConfig+0x2e6>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008016:	e10a      	b.n	800822e <UART_SetConfig+0x2e6>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801e:	e106      	b.n	800822e <UART_SetConfig+0x2e6>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a7c      	ldr	r2, [pc, #496]	; (8008218 <UART_SetConfig+0x2d0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d138      	bne.n	800809c <UART_SetConfig+0x154>
 800802a:	4b7a      	ldr	r3, [pc, #488]	; (8008214 <UART_SetConfig+0x2cc>)
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008030:	f003 030c 	and.w	r3, r3, #12
 8008034:	2b0c      	cmp	r3, #12
 8008036:	d82d      	bhi.n	8008094 <UART_SetConfig+0x14c>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0xf8>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008075 	.word	0x08008075
 8008044:	08008095 	.word	0x08008095
 8008048:	08008095 	.word	0x08008095
 800804c:	08008095 	.word	0x08008095
 8008050:	08008085 	.word	0x08008085
 8008054:	08008095 	.word	0x08008095
 8008058:	08008095 	.word	0x08008095
 800805c:	08008095 	.word	0x08008095
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008095 	.word	0x08008095
 8008068:	08008095 	.word	0x08008095
 800806c:	08008095 	.word	0x08008095
 8008070:	0800808d 	.word	0x0800808d
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800807a:	e0d8      	b.n	800822e <UART_SetConfig+0x2e6>
 800807c:	2302      	movs	r3, #2
 800807e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008082:	e0d4      	b.n	800822e <UART_SetConfig+0x2e6>
 8008084:	2304      	movs	r3, #4
 8008086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808a:	e0d0      	b.n	800822e <UART_SetConfig+0x2e6>
 800808c:	2308      	movs	r3, #8
 800808e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008092:	e0cc      	b.n	800822e <UART_SetConfig+0x2e6>
 8008094:	2310      	movs	r3, #16
 8008096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800809a:	e0c8      	b.n	800822e <UART_SetConfig+0x2e6>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a5e      	ldr	r2, [pc, #376]	; (800821c <UART_SetConfig+0x2d4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d125      	bne.n	80080f2 <UART_SetConfig+0x1aa>
 80080a6:	4b5b      	ldr	r3, [pc, #364]	; (8008214 <UART_SetConfig+0x2cc>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080b0:	2b30      	cmp	r3, #48	; 0x30
 80080b2:	d016      	beq.n	80080e2 <UART_SetConfig+0x19a>
 80080b4:	2b30      	cmp	r3, #48	; 0x30
 80080b6:	d818      	bhi.n	80080ea <UART_SetConfig+0x1a2>
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	d00a      	beq.n	80080d2 <UART_SetConfig+0x18a>
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d814      	bhi.n	80080ea <UART_SetConfig+0x1a2>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <UART_SetConfig+0x182>
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d008      	beq.n	80080da <UART_SetConfig+0x192>
 80080c8:	e00f      	b.n	80080ea <UART_SetConfig+0x1a2>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d0:	e0ad      	b.n	800822e <UART_SetConfig+0x2e6>
 80080d2:	2302      	movs	r3, #2
 80080d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d8:	e0a9      	b.n	800822e <UART_SetConfig+0x2e6>
 80080da:	2304      	movs	r3, #4
 80080dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e0:	e0a5      	b.n	800822e <UART_SetConfig+0x2e6>
 80080e2:	2308      	movs	r3, #8
 80080e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e8:	e0a1      	b.n	800822e <UART_SetConfig+0x2e6>
 80080ea:	2310      	movs	r3, #16
 80080ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080f0:	e09d      	b.n	800822e <UART_SetConfig+0x2e6>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a4a      	ldr	r2, [pc, #296]	; (8008220 <UART_SetConfig+0x2d8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d125      	bne.n	8008148 <UART_SetConfig+0x200>
 80080fc:	4b45      	ldr	r3, [pc, #276]	; (8008214 <UART_SetConfig+0x2cc>)
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008106:	2bc0      	cmp	r3, #192	; 0xc0
 8008108:	d016      	beq.n	8008138 <UART_SetConfig+0x1f0>
 800810a:	2bc0      	cmp	r3, #192	; 0xc0
 800810c:	d818      	bhi.n	8008140 <UART_SetConfig+0x1f8>
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d00a      	beq.n	8008128 <UART_SetConfig+0x1e0>
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d814      	bhi.n	8008140 <UART_SetConfig+0x1f8>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <UART_SetConfig+0x1d8>
 800811a:	2b40      	cmp	r3, #64	; 0x40
 800811c:	d008      	beq.n	8008130 <UART_SetConfig+0x1e8>
 800811e:	e00f      	b.n	8008140 <UART_SetConfig+0x1f8>
 8008120:	2300      	movs	r3, #0
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008126:	e082      	b.n	800822e <UART_SetConfig+0x2e6>
 8008128:	2302      	movs	r3, #2
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812e:	e07e      	b.n	800822e <UART_SetConfig+0x2e6>
 8008130:	2304      	movs	r3, #4
 8008132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008136:	e07a      	b.n	800822e <UART_SetConfig+0x2e6>
 8008138:	2308      	movs	r3, #8
 800813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813e:	e076      	b.n	800822e <UART_SetConfig+0x2e6>
 8008140:	2310      	movs	r3, #16
 8008142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008146:	e072      	b.n	800822e <UART_SetConfig+0x2e6>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a35      	ldr	r2, [pc, #212]	; (8008224 <UART_SetConfig+0x2dc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d12a      	bne.n	80081a8 <UART_SetConfig+0x260>
 8008152:	4b30      	ldr	r3, [pc, #192]	; (8008214 <UART_SetConfig+0x2cc>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008160:	d01a      	beq.n	8008198 <UART_SetConfig+0x250>
 8008162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008166:	d81b      	bhi.n	80081a0 <UART_SetConfig+0x258>
 8008168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816c:	d00c      	beq.n	8008188 <UART_SetConfig+0x240>
 800816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008172:	d815      	bhi.n	80081a0 <UART_SetConfig+0x258>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <UART_SetConfig+0x238>
 8008178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817c:	d008      	beq.n	8008190 <UART_SetConfig+0x248>
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x258>
 8008180:	2300      	movs	r3, #0
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008186:	e052      	b.n	800822e <UART_SetConfig+0x2e6>
 8008188:	2302      	movs	r3, #2
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818e:	e04e      	b.n	800822e <UART_SetConfig+0x2e6>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008196:	e04a      	b.n	800822e <UART_SetConfig+0x2e6>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819e:	e046      	b.n	800822e <UART_SetConfig+0x2e6>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a6:	e042      	b.n	800822e <UART_SetConfig+0x2e6>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a17      	ldr	r2, [pc, #92]	; (800820c <UART_SetConfig+0x2c4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d13a      	bne.n	8008228 <UART_SetConfig+0x2e0>
 80081b2:	4b18      	ldr	r3, [pc, #96]	; (8008214 <UART_SetConfig+0x2cc>)
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c0:	d01a      	beq.n	80081f8 <UART_SetConfig+0x2b0>
 80081c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c6:	d81b      	bhi.n	8008200 <UART_SetConfig+0x2b8>
 80081c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081cc:	d00c      	beq.n	80081e8 <UART_SetConfig+0x2a0>
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d2:	d815      	bhi.n	8008200 <UART_SetConfig+0x2b8>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <UART_SetConfig+0x298>
 80081d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081dc:	d008      	beq.n	80081f0 <UART_SetConfig+0x2a8>
 80081de:	e00f      	b.n	8008200 <UART_SetConfig+0x2b8>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081e6:	e022      	b.n	800822e <UART_SetConfig+0x2e6>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ee:	e01e      	b.n	800822e <UART_SetConfig+0x2e6>
 80081f0:	2304      	movs	r3, #4
 80081f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f6:	e01a      	b.n	800822e <UART_SetConfig+0x2e6>
 80081f8:	2308      	movs	r3, #8
 80081fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fe:	e016      	b.n	800822e <UART_SetConfig+0x2e6>
 8008200:	2310      	movs	r3, #16
 8008202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008206:	e012      	b.n	800822e <UART_SetConfig+0x2e6>
 8008208:	efff69f3 	.word	0xefff69f3
 800820c:	40008000 	.word	0x40008000
 8008210:	40013800 	.word	0x40013800
 8008214:	40021000 	.word	0x40021000
 8008218:	40004400 	.word	0x40004400
 800821c:	40004800 	.word	0x40004800
 8008220:	40004c00 	.word	0x40004c00
 8008224:	40005000 	.word	0x40005000
 8008228:	2310      	movs	r3, #16
 800822a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a9f      	ldr	r2, [pc, #636]	; (80084b0 <UART_SetConfig+0x568>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d17a      	bne.n	800832e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800823c:	2b08      	cmp	r3, #8
 800823e:	d824      	bhi.n	800828a <UART_SetConfig+0x342>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x300>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	0800826d 	.word	0x0800826d
 800824c:	0800828b 	.word	0x0800828b
 8008250:	08008275 	.word	0x08008275
 8008254:	0800828b 	.word	0x0800828b
 8008258:	0800827b 	.word	0x0800827b
 800825c:	0800828b 	.word	0x0800828b
 8008260:	0800828b 	.word	0x0800828b
 8008264:	0800828b 	.word	0x0800828b
 8008268:	08008283 	.word	0x08008283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800826c:	f7fe fc06 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 8008270:	61f8      	str	r0, [r7, #28]
        break;
 8008272:	e010      	b.n	8008296 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008274:	4b8f      	ldr	r3, [pc, #572]	; (80084b4 <UART_SetConfig+0x56c>)
 8008276:	61fb      	str	r3, [r7, #28]
        break;
 8008278:	e00d      	b.n	8008296 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800827a:	f7fe fb67 	bl	800694c <HAL_RCC_GetSysClockFreq>
 800827e:	61f8      	str	r0, [r7, #28]
        break;
 8008280:	e009      	b.n	8008296 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008286:	61fb      	str	r3, [r7, #28]
        break;
 8008288:	e005      	b.n	8008296 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008294:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80fb 	beq.w	8008494 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	4413      	add	r3, r2
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d305      	bcc.n	80082ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d903      	bls.n	80082c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082c0:	e0e8      	b.n	8008494 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2200      	movs	r2, #0
 80082c6:	461c      	mov	r4, r3
 80082c8:	4615      	mov	r5, r2
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	f04f 0300 	mov.w	r3, #0
 80082d2:	022b      	lsls	r3, r5, #8
 80082d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80082d8:	0222      	lsls	r2, r4, #8
 80082da:	68f9      	ldr	r1, [r7, #12]
 80082dc:	6849      	ldr	r1, [r1, #4]
 80082de:	0849      	lsrs	r1, r1, #1
 80082e0:	2000      	movs	r0, #0
 80082e2:	4688      	mov	r8, r1
 80082e4:	4681      	mov	r9, r0
 80082e6:	eb12 0a08 	adds.w	sl, r2, r8
 80082ea:	eb43 0b09 	adc.w	fp, r3, r9
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	603b      	str	r3, [r7, #0]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	4650      	mov	r0, sl
 80082fe:	4659      	mov	r1, fp
 8008300:	f7f8 fca2 	bl	8000c48 <__aeabi_uldivmod>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4613      	mov	r3, r2
 800830a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008312:	d308      	bcc.n	8008326 <UART_SetConfig+0x3de>
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800831a:	d204      	bcs.n	8008326 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	60da      	str	r2, [r3, #12]
 8008324:	e0b6      	b.n	8008494 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800832c:	e0b2      	b.n	8008494 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008336:	d15e      	bne.n	80083f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800833c:	2b08      	cmp	r3, #8
 800833e:	d828      	bhi.n	8008392 <UART_SetConfig+0x44a>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <UART_SetConfig+0x400>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	0800837d 	.word	0x0800837d
 8008354:	08008393 	.word	0x08008393
 8008358:	08008383 	.word	0x08008383
 800835c:	08008393 	.word	0x08008393
 8008360:	08008393 	.word	0x08008393
 8008364:	08008393 	.word	0x08008393
 8008368:	0800838b 	.word	0x0800838b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800836c:	f7fe fb86 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 8008370:	61f8      	str	r0, [r7, #28]
        break;
 8008372:	e014      	b.n	800839e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008374:	f7fe fb98 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 8008378:	61f8      	str	r0, [r7, #28]
        break;
 800837a:	e010      	b.n	800839e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800837c:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <UART_SetConfig+0x56c>)
 800837e:	61fb      	str	r3, [r7, #28]
        break;
 8008380:	e00d      	b.n	800839e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008382:	f7fe fae3 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8008386:	61f8      	str	r0, [r7, #28]
        break;
 8008388:	e009      	b.n	800839e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800838e:	61fb      	str	r3, [r7, #28]
        break;
 8008390:	e005      	b.n	800839e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800839c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d077      	beq.n	8008494 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	005a      	lsls	r2, r3, #1
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	441a      	add	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b0f      	cmp	r3, #15
 80083be:	d916      	bls.n	80083ee <UART_SetConfig+0x4a6>
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c6:	d212      	bcs.n	80083ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f023 030f 	bic.w	r3, r3, #15
 80083d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	b29a      	uxth	r2, r3
 80083de:	8afb      	ldrh	r3, [r7, #22]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	8afa      	ldrh	r2, [r7, #22]
 80083ea:	60da      	str	r2, [r3, #12]
 80083ec:	e052      	b.n	8008494 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083f4:	e04e      	b.n	8008494 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d827      	bhi.n	800844e <UART_SetConfig+0x506>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <UART_SetConfig+0x4bc>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	0800844f 	.word	0x0800844f
 8008414:	0800843f 	.word	0x0800843f
 8008418:	0800844f 	.word	0x0800844f
 800841c:	0800844f 	.word	0x0800844f
 8008420:	0800844f 	.word	0x0800844f
 8008424:	08008447 	.word	0x08008447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008428:	f7fe fb28 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 800842c:	61f8      	str	r0, [r7, #28]
        break;
 800842e:	e014      	b.n	800845a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008430:	f7fe fb3a 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 8008434:	61f8      	str	r0, [r7, #28]
        break;
 8008436:	e010      	b.n	800845a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <UART_SetConfig+0x56c>)
 800843a:	61fb      	str	r3, [r7, #28]
        break;
 800843c:	e00d      	b.n	800845a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843e:	f7fe fa85 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8008442:	61f8      	str	r0, [r7, #28]
        break;
 8008444:	e009      	b.n	800845a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844a:	61fb      	str	r3, [r7, #28]
        break;
 800844c:	e005      	b.n	800845a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008458:	bf00      	nop
    }

    if (pclk != 0U)
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d019      	beq.n	8008494 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	085a      	lsrs	r2, r3, #1
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	441a      	add	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008472:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d909      	bls.n	800848e <UART_SetConfig+0x546>
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008480:	d205      	bcs.n	800848e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e002      	b.n	8008494 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80084a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3728      	adds	r7, #40	; 0x28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ae:	bf00      	nop
 80084b0:	40008000 	.word	0x40008000
 80084b4:	00f42400 	.word	0x00f42400

080084b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	f003 0308 	and.w	r3, r3, #8
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00a      	beq.n	800856a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01a      	beq.n	80085ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b6:	d10a      	bne.n	80085ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	605a      	str	r2, [r3, #4]
  }
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800860c:	f7fc f9a8 	bl	8004960 <HAL_GetTick>
 8008610:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b08      	cmp	r3, #8
 800861e:	d10e      	bne.n	800863e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f82d 	bl	800868e <UART_WaitOnFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e023      	b.n	8008686 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b04      	cmp	r3, #4
 800864a:	d10e      	bne.n	800866a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800864c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f817 	bl	800868e <UART_WaitOnFlagUntilTimeout>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e00d      	b.n	8008686 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b09c      	sub	sp, #112	; 0x70
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4613      	mov	r3, r2
 800869c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869e:	e0a5      	b.n	80087ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	f000 80a1 	beq.w	80087ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086aa:	f7fc f959 	bl	8004960 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80086ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d13e      	bne.n	800873e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086d4:	667b      	str	r3, [r7, #100]	; 0x64
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e6      	bne.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	663b      	str	r3, [r7, #96]	; 0x60
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008712:	64ba      	str	r2, [r7, #72]	; 0x48
 8008714:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e067      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d04f      	beq.n	80087ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800875a:	d147      	bne.n	80087ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008764:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800877a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
 8008786:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800878a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e6      	bne.n	8008766 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3308      	adds	r3, #8
 800879e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	613b      	str	r3, [r7, #16]
   return(result);
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f023 0301 	bic.w	r3, r3, #1
 80087ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087b8:	623a      	str	r2, [r7, #32]
 80087ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	69f9      	ldr	r1, [r7, #28]
 80087be:	6a3a      	ldr	r2, [r7, #32]
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e5      	bne.n	8008798 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2220      	movs	r2, #32
 80087d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e010      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69da      	ldr	r2, [r3, #28]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4013      	ands	r3, r2
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	429a      	cmp	r2, r3
 8008808:	f43f af4a 	beq.w	80086a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3770      	adds	r7, #112	; 0x70
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8008816:	b5b0      	push	{r4, r5, r7, lr}
 8008818:	b0ce      	sub	sp, #312	; 0x138
 800881a:	af00      	add	r7, sp, #0
 800881c:	4605      	mov	r5, r0
 800881e:	460c      	mov	r4, r1
 8008820:	4610      	mov	r0, r2
 8008822:	4619      	mov	r1, r3
 8008824:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008828:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800882c:	462a      	mov	r2, r5
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008834:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008838:	4622      	mov	r2, r4
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008840:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008844:	4602      	mov	r2, r0
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800884c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008850:	460a      	mov	r2, r1
 8008852:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008854:	f107 030c 	add.w	r3, r7, #12
 8008858:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800885c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008860:	3308      	adds	r3, #8
 8008862:	f107 020c 	add.w	r2, r7, #12
 8008866:	4413      	add	r3, r2
 8008868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800886c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008870:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008874:	4413      	add	r3, r2
 8008876:	3309      	adds	r3, #9
 8008878:	f107 020c 	add.w	r2, r7, #12
 800887c:	4413      	add	r3, r2
 800887e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008886:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8008894:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008898:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800889c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088a4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088a8:	3301      	adds	r3, #1
 80088aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80088ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088b2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088b6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80088ba:	8812      	ldrh	r2, [r2, #0]
 80088bc:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80088c0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088c4:	3302      	adds	r3, #2
 80088c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80088ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088d2:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80088d6:	8812      	ldrh	r2, [r2, #0]
 80088d8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80088dc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088e0:	3302      	adds	r3, #2
 80088e2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80088e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088ee:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80088f6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088fa:	3301      	adds	r3, #1
 80088fc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008900:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008904:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008908:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800890a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800890e:	3301      	adds	r3, #1
 8008910:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008918:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800891c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800891e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008922:	3301      	adds	r3, #1
 8008924:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800892c:	3308      	adds	r3, #8
 800892e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008932:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008936:	4618      	mov	r0, r3
 8008938:	f003 fc95 	bl	800c266 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800893c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008940:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008944:	4413      	add	r3, r2
 8008946:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800894a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800894e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008952:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008954:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008958:	3301      	adds	r3, #1
 800895a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800895e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008962:	3301      	adds	r3, #1
 8008964:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008968:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800896c:	4618      	mov	r0, r3
 800896e:	f003 fc7a 	bl	800c266 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8008972:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008976:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800897a:	4413      	add	r3, r2
 800897c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008984:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008988:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800898a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800898e:	3302      	adds	r3, #2
 8008990:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008998:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800899c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800899e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80089a2:	3302      	adds	r3, #2
 80089a4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089ac:	2218      	movs	r2, #24
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f003 fbd8 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 80089b6:	233f      	movs	r3, #63	; 0x3f
 80089b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80089bc:	2383      	movs	r3, #131	; 0x83
 80089be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089c2:	f107 030c 	add.w	r3, r7, #12
 80089c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089ca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80089ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089d2:	f107 030b 	add.w	r3, r7, #11
 80089d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80089e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089e4:	2100      	movs	r1, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f002 fb1e 	bl	800b028 <hci_send_req>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	da01      	bge.n	80089f6 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80089f2:	23ff      	movs	r3, #255	; 0xff
 80089f4:	e00d      	b.n	8008a12 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 80089f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089fa:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <aci_gap_set_discoverable+0x1fa>
    return status;
 8008a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a08:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	e000      	b.n	8008a12 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bdb0      	pop	{r4, r5, r7, pc}

08008a1c <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008a1c:	b5b0      	push	{r4, r5, r7, lr}
 8008a1e:	b0cc      	sub	sp, #304	; 0x130
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4605      	mov	r5, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	4610      	mov	r0, r2
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008a32:	462a      	mov	r2, r5
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a3e:	4622      	mov	r2, r4
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a46:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a56:	460a      	mov	r2, r1
 8008a58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008a5a:	f107 030c 	add.w	r3, r7, #12
 8008a5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a7c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008a80:	7812      	ldrb	r2, [r2, #0]
 8008a82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a84:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a96:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a9a:	7812      	ldrb	r2, [r2, #0]
 8008a9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a9e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 8008aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ab0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008ab4:	7812      	ldrb	r2, [r2, #0]
 8008ab6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008ab8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008abc:	3301      	adds	r3, #1
 8008abe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008ad2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008ae4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008ae6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008aea:	3301      	adds	r3, #1
 8008aec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008af8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008afa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008afe:	3301      	adds	r3, #1
 8008b00:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b08:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008b0c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008b0e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b12:	3301      	adds	r3, #1
 8008b14:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008b20:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008b24:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b28:	3304      	adds	r3, #4
 8008b2a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b32:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008b36:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008b38:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b46:	2218      	movs	r2, #24
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f003 fb0b 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 8008b50:	233f      	movs	r3, #63	; 0x3f
 8008b52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008b56:	2386      	movs	r3, #134	; 0x86
 8008b58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b5c:	f107 030c 	add.w	r3, r7, #12
 8008b60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b64:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b6c:	f107 030b 	add.w	r3, r7, #11
 8008b70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f002 fa51 	bl	800b028 <hci_send_req>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	da01      	bge.n	8008b90 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008b8c:	23ff      	movs	r3, #255	; 0xff
 8008b8e:	e00d      	b.n	8008bac <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 8008b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b94:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <aci_gap_set_authentication_requirement+0x18e>
    return status;
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	e000      	b.n	8008bac <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bdb0      	pop	{r4, r5, r7, pc}

08008bb6 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008bb6:	b590      	push	{r4, r7, lr}
 8008bb8:	b0cf      	sub	sp, #316	; 0x13c
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bc6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bd0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bdc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008be0:	4602      	mov	r2, r0
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008be8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008bec:	460a      	mov	r2, r1
 8008bee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008bf0:	f107 0314 	add.w	r3, r7, #20
 8008bf4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4618      	mov	r0, r3
 8008c02:	f003 fab0 	bl	800c166 <memset>
  uint8_t index_input = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8008c0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c10:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c14:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008c18:	7812      	ldrb	r2, [r2, #0]
 8008c1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c1c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c20:	3301      	adds	r3, #1
 8008c22:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c2a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c2e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008c32:	7812      	ldrb	r2, [r2, #0]
 8008c34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c36:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008c40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c44:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c48:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c50:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c54:	3301      	adds	r3, #1
 8008c56:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008c5e:	2218      	movs	r2, #24
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f003 fa7f 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 8008c68:	233f      	movs	r3, #63	; 0x3f
 8008c6a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8008c6e:	238a      	movs	r3, #138	; 0x8a
 8008c70:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008c74:	f107 0314 	add.w	r3, r7, #20
 8008c78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008c7c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008c8c:	2307      	movs	r3, #7
 8008c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008c92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 f9c5 	bl	800b028 <hci_send_req>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da01      	bge.n	8008ca8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008ca4:	23ff      	movs	r3, #255	; 0xff
 8008ca6:	e02e      	b.n	8008d06 <aci_gap_init+0x150>
  if (resp.Status) {
 8008ca8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <aci_gap_init+0x10c>
    return resp.Status;
 8008cb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	e021      	b.n	8008d06 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008cc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cd4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008cdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ce4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008cee:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008cf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cf8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd90      	pop	{r4, r7, pc}

08008d10 <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b0cc      	sub	sp, #304	; 0x130
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4602      	mov	r2, r0
 8008d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d20:	6019      	str	r1, [r3, #0]
 8008d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d26:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008d2c:	f107 030c 	add.w	r3, r7, #12
 8008d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d38:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8008d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d4e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d56:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 8008d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d64:	1c58      	adds	r0, r3, #1
 8008d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d78:	6819      	ldr	r1, [r3, #0]
 8008d7a:	f003 fa74 	bl	800c266 <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 8008d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d82:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d86:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d96:	2218      	movs	r2, #24
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f003 f9e3 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 8008da0:	233f      	movs	r3, #63	; 0x3f
 8008da2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008da6:	238e      	movs	r3, #142	; 0x8e
 8008da8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dac:	f107 030c 	add.w	r3, r7, #12
 8008db0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008db4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008db8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008dbc:	f107 030b 	add.w	r3, r7, #11
 8008dc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008dca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 f929 	bl	800b028 <hci_send_req>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da01      	bge.n	8008de0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008ddc:	23ff      	movs	r3, #255	; 0xff
 8008dde:	e00d      	b.n	8008dfc <aci_gap_update_adv_data+0xec>
  if (status) {
 8008de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <aci_gap_update_adv_data+0xea>
    return status;
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	e000      	b.n	8008dfc <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b088      	sub	sp, #32
 8008e0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	2218      	movs	r2, #24
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f003 f9a4 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 8008e1e:	233f      	movs	r3, #63	; 0x3f
 8008e20:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008e22:	f240 1301 	movw	r3, #257	; 0x101
 8008e26:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e28:	1dfb      	adds	r3, r7, #7
 8008e2a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008e30:	f107 0308 	add.w	r3, r7, #8
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f002 f8f6 	bl	800b028 <hci_send_req>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da01      	bge.n	8008e46 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008e42:	23ff      	movs	r3, #255	; 0xff
 8008e44:	e005      	b.n	8008e52 <aci_gatt_init+0x4c>
  if (status) {
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <aci_gatt_init+0x4a>
    return status;
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	e000      	b.n	8008e52 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3720      	adds	r7, #32
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008e5a:	b590      	push	{r4, r7, lr}
 8008e5c:	b0cf      	sub	sp, #316	; 0x13c
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	4604      	mov	r4, r0
 8008e62:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008e66:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008e6a:	6001      	str	r1, [r0, #0]
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e74:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e78:	4622      	mov	r2, r4
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e80:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008e84:	4602      	mov	r2, r0
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e8c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e90:	460a      	mov	r2, r1
 8008e92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008e9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ea0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d00a      	beq.n	8008ec0 <aci_gatt_add_service+0x66>
 8008eaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008eae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d101      	bne.n	8008ebc <aci_gatt_add_service+0x62>
 8008eb8:	2311      	movs	r3, #17
 8008eba:	e002      	b.n	8008ec2 <aci_gatt_add_service+0x68>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <aci_gatt_add_service+0x68>
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	f107 020c 	add.w	r2, r7, #12
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f003 f946 	bl	800c166 <memset>
  uint8_t index_input = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008ee0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ee4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ee8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ef0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8008efa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008efe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d002      	beq.n	8008f0e <aci_gatt_add_service+0xb4>
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d004      	beq.n	8008f16 <aci_gatt_add_service+0xbc>
 8008f0c:	e007      	b.n	8008f1e <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f14:	e005      	b.n	8008f22 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008f16:	2310      	movs	r3, #16
 8008f18:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f1c:	e001      	b.n	8008f22 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008f1e:	2347      	movs	r3, #71	; 0x47
 8008f20:	e06c      	b.n	8008ffc <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8008f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f26:	1c58      	adds	r0, r3, #1
 8008f28:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008f2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f30:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f34:	6819      	ldr	r1, [r3, #0]
 8008f36:	f003 f996 	bl	800c266 <memcpy>
    index_input += size;
 8008f3a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008f3e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008f42:	4413      	add	r3, r2
 8008f44:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8008f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f50:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008f58:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8008f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f66:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f6a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008f72:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f76:	3301      	adds	r3, #1
 8008f78:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f80:	2218      	movs	r2, #24
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f003 f8ee 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 8008f8a:	233f      	movs	r3, #63	; 0x3f
 8008f8c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008f90:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008f94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f98:	f107 030c 	add.w	r3, r7, #12
 8008f9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fa0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008fa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008fa8:	f107 0308 	add.w	r3, r7, #8
 8008fac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f002 f833 	bl	800b028 <hci_send_req>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da01      	bge.n	8008fcc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008fc8:	23ff      	movs	r3, #255	; 0xff
 8008fca:	e017      	b.n	8008ffc <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8008fcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008fda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	e00a      	b.n	8008ffc <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008fe6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ff8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009002:	46bd      	mov	sp, r7
 8009004:	bd90      	pop	{r4, r7, pc}

08009006 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b0d1      	sub	sp, #324	; 0x144
 800900a:	af00      	add	r7, sp, #0
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009014:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009018:	600a      	str	r2, [r1, #0]
 800901a:	4619      	mov	r1, r3
 800901c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009020:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009024:	4622      	mov	r2, r4
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800902c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009030:	4602      	mov	r2, r0
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009038:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800903c:	460a      	mov	r2, r1
 800903e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009040:	f107 0314 	add.w	r3, r7, #20
 8009044:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009048:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800904c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d00a      	beq.n	800906c <aci_gatt_add_char+0x66>
 8009056:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800905a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d101      	bne.n	8009068 <aci_gatt_add_char+0x62>
 8009064:	2313      	movs	r3, #19
 8009066:	e002      	b.n	800906e <aci_gatt_add_char+0x68>
 8009068:	2303      	movs	r3, #3
 800906a:	e000      	b.n	800906e <aci_gatt_add_char+0x68>
 800906c:	2305      	movs	r3, #5
 800906e:	f107 0214 	add.w	r2, r7, #20
 8009072:	4413      	add	r3, r2
 8009074:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009078:	f107 0310 	add.w	r3, r7, #16
 800907c:	2203      	movs	r2, #3
 800907e:	2100      	movs	r1, #0
 8009080:	4618      	mov	r0, r3
 8009082:	f003 f870 	bl	800c166 <memset>
  uint8_t index_input = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 800908c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009090:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009094:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009098:	8812      	ldrh	r2, [r2, #0]
 800909a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800909c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80090a0:	3302      	adds	r3, #2
 80090a2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80090a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090aa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090ae:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80090b6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80090ba:	3301      	adds	r3, #1
 80090bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80090c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090c4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d002      	beq.n	80090d4 <aci_gatt_add_char+0xce>
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d004      	beq.n	80090dc <aci_gatt_add_char+0xd6>
 80090d2:	e007      	b.n	80090e4 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 80090d4:	2302      	movs	r3, #2
 80090d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090da:	e005      	b.n	80090e8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80090dc:	2310      	movs	r3, #16
 80090de:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090e2:	e001      	b.n	80090e8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80090e4:	2347      	movs	r3, #71	; 0x47
 80090e6:	e091      	b.n	800920c <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80090e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090ec:	1cd8      	adds	r0, r3, #3
 80090ee:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80090f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80090fa:	6819      	ldr	r1, [r3, #0]
 80090fc:	f003 f8b3 	bl	800c266 <memcpy>
    index_input += size;
 8009100:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8009104:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009108:	4413      	add	r3, r2
 800910a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800910e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009112:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009116:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800911e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009122:	3302      	adds	r3, #2
 8009124:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8009128:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800912c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009130:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009132:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009136:	3301      	adds	r3, #1
 8009138:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800913c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009140:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009144:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009146:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800914a:	3301      	adds	r3, #1
 800914c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8009150:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009154:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009158:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800915a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800915e:	3301      	adds	r3, #1
 8009160:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009164:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009168:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800916c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800916e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009172:	3301      	adds	r3, #1
 8009174:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8009178:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800917c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009180:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009182:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009186:	3301      	adds	r3, #1
 8009188:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800918c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009190:	2218      	movs	r2, #24
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f002 ffe6 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 800919a:	233f      	movs	r3, #63	; 0x3f
 800919c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80091a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80091a4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80091a8:	f107 0314 	add.w	r3, r7, #20
 80091ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80091b0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80091b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80091b8:	f107 0310 	add.w	r3, r7, #16
 80091bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80091c0:	2303      	movs	r3, #3
 80091c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80091c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f001 ff2b 	bl	800b028 <hci_send_req>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	da01      	bge.n	80091dc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80091d8:	23ff      	movs	r3, #255	; 0xff
 80091da:	e017      	b.n	800920c <aci_gatt_add_char+0x206>
  if (resp.Status) {
 80091dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d005      	beq.n	80091f6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80091ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	e00a      	b.n	800920c <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80091f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009202:	b29a      	uxth	r2, r3
 8009204:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009208:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009212:	46bd      	mov	sp, r7
 8009214:	bd90      	pop	{r4, r7, pc}

08009216 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8009216:	b5b0      	push	{r4, r5, r7, lr}
 8009218:	b0cc      	sub	sp, #304	; 0x130
 800921a:	af00      	add	r7, sp, #0
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	4610      	mov	r0, r2
 8009222:	4619      	mov	r1, r3
 8009224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009228:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800922c:	462a      	mov	r2, r5
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009238:	4622      	mov	r2, r4
 800923a:	801a      	strh	r2, [r3, #0]
 800923c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009240:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009244:	4602      	mov	r2, r0
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009250:	460a      	mov	r2, r1
 8009252:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800925c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009260:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009264:	2200      	movs	r2, #0
 8009266:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800926e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009272:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009276:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800927a:	8812      	ldrh	r2, [r2, #0]
 800927c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800927e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009282:	3302      	adds	r3, #2
 8009284:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8009288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800928c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009290:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009294:	8812      	ldrh	r2, [r2, #0]
 8009296:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009298:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800929c:	3302      	adds	r3, #2
 800929e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80092a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092aa:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80092ae:	7812      	ldrb	r2, [r2, #0]
 80092b0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80092b2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80092b6:	3301      	adds	r3, #1
 80092b8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80092bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092c4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80092cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80092d0:	3301      	adds	r3, #1
 80092d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80092d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092da:	1d98      	adds	r0, r3, #6
 80092dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80092ec:	f002 ffbb 	bl	800c266 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80092f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092f8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	4413      	add	r3, r2
 8009300:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009304:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009308:	2218      	movs	r2, #24
 800930a:	2100      	movs	r1, #0
 800930c:	4618      	mov	r0, r3
 800930e:	f002 ff2a 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 8009312:	233f      	movs	r3, #63	; 0x3f
 8009314:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009318:	f44f 7383 	mov.w	r3, #262	; 0x106
 800931c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009320:	f107 030c 	add.w	r3, r7, #12
 8009324:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009328:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800932c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009330:	f107 030b 	add.w	r3, r7, #11
 8009334:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009338:	2301      	movs	r3, #1
 800933a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800933e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f001 fe6f 	bl	800b028 <hci_send_req>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	da01      	bge.n	8009354 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009350:	23ff      	movs	r3, #255	; 0xff
 8009352:	e00d      	b.n	8009370 <aci_gatt_update_char_value+0x15a>
  if (status) {
 8009354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009358:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <aci_gatt_update_char_value+0x158>
    return status;
 8009362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009366:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	e000      	b.n	8009370 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009376:	46bd      	mov	sp, r7
 8009378:	bdb0      	pop	{r4, r5, r7, pc}

0800937a <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b0cc      	sub	sp, #304	; 0x130
 800937e:	af00      	add	r7, sp, #0
 8009380:	4602      	mov	r2, r0
 8009382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009386:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800938a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009398:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80093a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80093b2:	8812      	ldrh	r2, [r2, #0]
 80093b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80093b6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093ba:	3302      	adds	r3, #2
 80093bc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093c4:	2218      	movs	r2, #24
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 fecc 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 80093ce:	233f      	movs	r3, #63	; 0x3f
 80093d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80093d4:	f240 1327 	movw	r3, #295	; 0x127
 80093d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093dc:	f107 030c 	add.w	r3, r7, #12
 80093e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093e4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093ec:	f107 030b 	add.w	r3, r7, #11
 80093f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80093f4:	2301      	movs	r3, #1
 80093f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80093fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093fe:	2100      	movs	r1, #0
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fe11 	bl	800b028 <hci_send_req>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	da01      	bge.n	8009410 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800940c:	23ff      	movs	r3, #255	; 0xff
 800940e:	e00d      	b.n	800942c <aci_gatt_allow_read+0xb2>
  if (status) {
 8009410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009414:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <aci_gatt_allow_read+0xb0>
    return status;
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	e000      	b.n	800942c <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b0ee      	sub	sp, #440	; 0x1b8
 800943a:	af00      	add	r7, sp, #0
 800943c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009440:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009444:	6019      	str	r1, [r3, #0]
 8009446:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800944a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009454:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 8009458:	4602      	mov	r2, r0
 800945a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 800945c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009460:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009464:	f107 0314 	add.w	r3, r7, #20
 8009468:	2280      	movs	r2, #128	; 0x80
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f002 fe7a 	bl	800c166 <memset>
  uint8_t index_input = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 8009478:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800947c:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8009480:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8009484:	7812      	ldrb	r2, [r2, #0]
 8009486:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009488:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800948c:	3301      	adds	r3, #1
 800948e:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009492:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009496:	2218      	movs	r2, #24
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f002 fe63 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 80094a0:	233f      	movs	r3, #63	; 0x3f
 80094a2:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 80094a6:	230d      	movs	r3, #13
 80094a8:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 80094ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80094b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 80094b4:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80094b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 80094ca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80094ce:	2100      	movs	r1, #0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f001 fda9 	bl	800b028 <hci_send_req>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da01      	bge.n	80094e0 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 80094dc:	23ff      	movs	r3, #255	; 0xff
 80094de:	e029      	b.n	8009534 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 80094e0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094e4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <aci_hal_read_config_data+0xc4>
    return resp.Status;
 80094ee:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094f2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	e01c      	b.n	8009534 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 80094fa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094fe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009502:	785a      	ldrb	r2, [r3, #1]
 8009504:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009508:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009510:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009514:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	f107 0314 	add.w	r3, r7, #20
 8009522:	1c99      	adds	r1, r3, #2
 8009524:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009528:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800952c:	6818      	ldr	r0, [r3, #0]
 800952e:	f002 fe9a 	bl	800c266 <memcpy>
  return BLE_STATUS_SUCCESS;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b0cc      	sub	sp, #304	; 0x130
 8009542:	af00      	add	r7, sp, #0
 8009544:	4602      	mov	r2, r0
 8009546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800954a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800954e:	701a      	strb	r2, [r3, #0]
 8009550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009554:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009558:	460a      	mov	r2, r1
 800955a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009568:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800956c:	2200      	movs	r2, #0
 800956e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8009576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800957e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009586:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800958a:	3301      	adds	r3, #1
 800958c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8009590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009594:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009598:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80095a0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80095a4:	3301      	adds	r3, #1
 80095a6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095ae:	2218      	movs	r2, #24
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f002 fdd7 	bl	800c166 <memset>
  rq.ogf = 0x3f;
 80095b8:	233f      	movs	r3, #63	; 0x3f
 80095ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80095be:	230f      	movs	r3, #15
 80095c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095c4:	f107 030c 	add.w	r3, r7, #12
 80095c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80095d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095d4:	f107 030b 	add.w	r3, r7, #11
 80095d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095dc:	2301      	movs	r3, #1
 80095de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80095e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 fd1d 	bl	800b028 <hci_send_req>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da01      	bge.n	80095f8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80095f4:	23ff      	movs	r3, #255	; 0xff
 80095f6:	e00d      	b.n	8009614 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 80095f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8009606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	e000      	b.n	8009614 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	7818      	ldrb	r0, [r3, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009638:	b299      	uxth	r1, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	78db      	ldrb	r3, [r3, #3]
 800963e:	461a      	mov	r2, r3
 8009640:	f7f9 f9f4 	bl	8002a2c <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	7818      	ldrb	r0, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009668:	b299      	uxth	r1, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	78db      	ldrb	r3, [r3, #3]
 800966e:	461a      	mov	r2, r3
 8009670:	f000 ffca 	bl	800a608 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800967e:	b590      	push	{r4, r7, lr}
 8009680:	b087      	sub	sp, #28
 8009682:	af02      	add	r7, sp, #8
 8009684:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	7818      	ldrb	r0, [r3, #0]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009698:	b299      	uxth	r1, r3
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	78da      	ldrb	r2, [r3, #3]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	889b      	ldrh	r3, [r3, #4]
 80096a2:	b29c      	uxth	r4, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	88db      	ldrh	r3, [r3, #6]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	4623      	mov	r3, r4
 80096ae:	f000 ffba 	bl	800a626 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd90      	pop	{r4, r7, pc}

080096bc <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 ffbc 	bl	800a64e <hci_hardware_error_event>

  return status;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b0a6      	sub	sp, #152	; 0x98
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096e8:	2300      	movs	r3, #0
 80096ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80096fa:	2300      	movs	r3, #0
 80096fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009700:	e02e      	b.n	8009760 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8009702:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009712:	b29a      	uxth	r2, r3
 8009714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	3398      	adds	r3, #152	; 0x98
 800971c:	443b      	add	r3, r7
 800971e:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009722:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009726:	3302      	adds	r3, #2
 8009728:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800972c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	3398      	adds	r3, #152	; 0x98
 8009746:	443b      	add	r3, r7
 8009748:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800974c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009750:	3302      	adds	r3, #2
 8009752:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800975a:	3301      	adds	r3, #1
 800975c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800976c:	4293      	cmp	r3, r2
 800976e:	dbc8      	blt.n	8009702 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f107 0208 	add.w	r2, r7, #8
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f000 ff71 	bl	800a664 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8009782:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009786:	4618      	mov	r0, r3
 8009788:	3798      	adds	r7, #152	; 0x98
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 ff6a 	bl	800a67c <hci_data_buffer_overflow_event>

  return status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f000 ff5e 	bl	800a692 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 f9e6 	bl	800abc6 <aci_blue_initialized_event>

  return status;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	4618      	mov	r0, r3
 8009818:	f001 f9e0 	bl	800abdc <aci_blue_events_lost_event>

  return status;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8009826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800982a:	b08d      	sub	sp, #52	; 0x34
 800982c:	af08      	add	r7, sp, #32
 800982e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f893 c000 	ldrb.w	ip, [r3]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8009864:	68b8      	ldr	r0, [r7, #8]
 8009866:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800986a:	68bc      	ldr	r4, [r7, #8]
 800986c:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8009870:	68bd      	ldr	r5, [r7, #8]
 8009872:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8009876:	68be      	ldr	r6, [r7, #8]
 8009878:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	9606      	str	r6, [sp, #24]
 8009884:	9505      	str	r5, [sp, #20]
 8009886:	9404      	str	r4, [sp, #16]
 8009888:	9003      	str	r0, [sp, #12]
 800988a:	9102      	str	r1, [sp, #8]
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	464b      	mov	r3, r9
 8009894:	4642      	mov	r2, r8
 8009896:	4671      	mov	r1, lr
 8009898:	4660      	mov	r0, ip
 800989a:	f001 f9a9 	bl	800abf0 <aci_blue_crash_info_event>

  return status;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080098aa <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	7818      	ldrb	r0, [r3, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	7859      	ldrb	r1, [r3, #1]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80098c8:	461a      	mov	r2, r3
 80098ca:	f001 f99f 	bl	800ac0c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f993 0000 	ldrsb.w	r0, [r3]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 80098f6:	461a      	mov	r2, r3
 80098f8:	f001 f996 	bl	800ac28 <aci_hal_scan_req_report_event>

  return status;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	7818      	ldrb	r0, [r3, #0]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009922:	461a      	mov	r2, r3
 8009924:	f001 f98e 	bl	800ac44 <aci_hal_fw_error_event>

  return status;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800993e:	f000 ff3e 	bl	800a7be <aci_gap_limited_discoverable_event>

  return status;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b298      	uxth	r0, r3
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	7899      	ldrb	r1, [r3, #2]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	78db      	ldrb	r3, [r3, #3]
 800996a:	461a      	mov	r2, r3
 800996c:	f000 ff2e 	bl	800a7cc <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	4618      	mov	r0, r3
 8009992:	f000 ff2a 	bl	800a7ea <aci_gap_pass_key_req_event>

  return status;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	881b      	ldrh	r3, [r3, #0]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 ff22 	bl	800a800 <aci_gap_authorization_req_event>

  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80099d2:	f000 ff20 	bl	800a816 <aci_gap_slave_security_initiated_event>

  return status;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 80099ec:	f000 ff1a 	bl	800a824 <aci_gap_bond_lost_event>

  return status;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	7818      	ldrb	r0, [r3, #0]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	7859      	ldrb	r1, [r3, #1]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009a1a:	f000 ff0a 	bl	800a832 <aci_gap_proc_complete_event>

  return status;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 ff07 	bl	800a852 <aci_gap_addr_not_resolved_event>

  return status;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f000 fefb 	bl	800a868 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	789b      	ldrb	r3, [r3, #2]
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f000 fef1 	bl	800a880 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f001 f839 	bl	800ab3e <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b298      	uxth	r0, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8009af4:	461a      	mov	r2, r3
 8009af6:	f001 f830 	bl	800ab5a <aci_l2cap_proc_timeout_event>

  return status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8009b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b06:	b089      	sub	sp, #36	; 0x24
 8009b08:	af04      	add	r7, sp, #16
 8009b0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b298      	uxth	r0, r3
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	789c      	ldrb	r4, [r3, #2]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b24:	b29d      	uxth	r5, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009b2c:	b29e      	uxth	r6, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8009b3c:	b292      	uxth	r2, r2
 8009b3e:	68b9      	ldr	r1, [r7, #8]
 8009b40:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8009b44:	b289      	uxth	r1, r1
 8009b46:	9102      	str	r1, [sp, #8]
 8009b48:	9201      	str	r2, [sp, #4]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4633      	mov	r3, r6
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4621      	mov	r1, r4
 8009b52:	f001 f810 	bl	800ab76 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b60 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8009b60:	b590      	push	{r4, r7, lr}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	b298      	uxth	r0, r3
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	7899      	ldrb	r1, [r3, #2]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	f001 f806 	bl	800ab9e <aci_l2cap_command_reject_event>

  return status;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd90      	pop	{r4, r7, pc}

08009b9c <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	b298      	uxth	r0, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	b299      	uxth	r1, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	889b      	ldrh	r3, [r3, #4]
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	88db      	ldrh	r3, [r3, #6]
 8009bc2:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	4623      	mov	r3, r4
 8009bcc:	f000 fe66 	bl	800a89c <aci_gatt_attribute_modified_event>

  return status;
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}

08009bda <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fe67 	bl	800a8c4 <aci_gatt_proc_timeout_event>

  return status;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	885b      	ldrh	r3, [r3, #2]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f000 fe5b 	bl	800a8da <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b298      	uxth	r0, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	7899      	ldrb	r1, [r3, #2]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009c50:	f000 fe51 	bl	800a8f6 <aci_att_find_info_resp_event>

  return status;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b0a6      	sub	sp, #152	; 0x98
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c66:	2300      	movs	r3, #0
 8009c68:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8009c72:	2303      	movs	r3, #3
 8009c74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c7e:	e02e      	b.n	8009cde <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8009c80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	3398      	adds	r3, #152	; 0x98
 8009c9a:	443b      	add	r3, r7
 8009c9c:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009ca0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8009caa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	3398      	adds	r3, #152	; 0x98
 8009cc4:	443b      	add	r3, r7
 8009cc6:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009cca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009cce:	3302      	adds	r3, #2
 8009cd0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cd8:	3301      	adds	r3, #1
 8009cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ce2:	789b      	ldrb	r3, [r3, #2]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cea:	4293      	cmp	r3, r2
 8009cec:	dbc8      	blt.n	8009c80 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8009cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	b298      	uxth	r0, r3
 8009cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cfa:	789b      	ldrb	r3, [r3, #2]
 8009cfc:	f107 0208 	add.w	r2, r7, #8
 8009d00:	4619      	mov	r1, r3
 8009d02:	f000 fe08 	bl	800a916 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8009d06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3798      	adds	r7, #152	; 0x98
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b298      	uxth	r0, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	7899      	ldrb	r1, [r3, #2]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009d34:	f000 fdfd 	bl	800a932 <aci_att_read_by_type_resp_event>

  return status;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	b298      	uxth	r0, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009d60:	461a      	mov	r2, r3
 8009d62:	f000 fdf6 	bl	800a952 <aci_att_read_resp_event>

  return status;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b298      	uxth	r0, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f000 fded 	bl	800a96e <aci_att_read_blob_resp_event>

  return status;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b298      	uxth	r0, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f000 fde4 	bl	800a98a <aci_att_read_multiple_resp_event>

  return status;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b298      	uxth	r0, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	7899      	ldrb	r1, [r3, #2]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009dee:	f000 fdda 	bl	800a9a6 <aci_att_read_by_group_type_resp_event>

  return status;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8009dfc:	b590      	push	{r4, r7, lr}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	b298      	uxth	r0, r3
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	885b      	ldrh	r3, [r3, #2]
 8009e16:	b299      	uxth	r1, r3
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	889b      	ldrh	r3, [r3, #4]
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	4623      	mov	r3, r4
 8009e2a:	f000 fdcc 	bl	800a9c6 <aci_att_prepare_write_resp_event>

  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd90      	pop	{r4, r7, pc}

08009e38 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fdcd 	bl	800a9ee <aci_att_exec_write_resp_event>

  return status;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	b298      	uxth	r0, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	885b      	ldrh	r3, [r3, #2]
 8009e78:	b299      	uxth	r1, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009e82:	f000 fdbf 	bl	800aa04 <aci_gatt_indication_event>

  return status;
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b298      	uxth	r0, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	885b      	ldrh	r3, [r3, #2]
 8009eaa:	b299      	uxth	r1, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009eb4:	f000 fdb6 	bl	800aa24 <aci_gatt_notification_event>

  return status;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	789b      	ldrb	r3, [r3, #2]
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f000 fdb0 	bl	800aa44 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	b298      	uxth	r0, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	7899      	ldrb	r1, [r3, #2]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	795b      	ldrb	r3, [r3, #5]
 8009f14:	f000 fda4 	bl	800aa60 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	b298      	uxth	r0, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	885b      	ldrh	r3, [r3, #2]
 8009f3c:	b299      	uxth	r1, r3
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009f46:	f000 fd9f 	bl	800aa88 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	b298      	uxth	r0, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	885b      	ldrh	r3, [r3, #2]
 8009f6e:	b299      	uxth	r1, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009f78:	f000 fd96 	bl	800aaa8 <aci_gatt_write_permit_req_event>

  return status;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b298      	uxth	r0, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	885b      	ldrh	r3, [r3, #2]
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	889b      	ldrh	r3, [r3, #4]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f7f8 fd5f 	bl	8002a6c <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b0a6      	sub	sp, #152	; 0x98
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fd8:	e019      	b.n	800a00e <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8009fda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	3398      	adds	r3, #152	; 0x98
 8009ff4:	443b      	add	r3, r7
 8009ff6:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009ffa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009ffe:	3302      	adds	r3, #2
 800a000:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a008:	3301      	adds	r3, #1
 800a00a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a00e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a012:	789b      	ldrb	r3, [r3, #2]
 800a014:	461a      	mov	r2, r3
 800a016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a01a:	4293      	cmp	r3, r2
 800a01c:	dbdd      	blt.n	8009fda <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800a01e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b298      	uxth	r0, r3
 800a026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a02a:	789b      	ldrb	r3, [r3, #2]
 800a02c:	f107 0208 	add.w	r2, r7, #8
 800a030:	4619      	mov	r1, r3
 800a032:	f000 fd49 	bl	800aac8 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800a036:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3798      	adds	r7, #152	; 0x98
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	b29a      	uxth	r2, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	885b      	ldrh	r3, [r3, #2]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f000 fd3f 	bl	800aae4 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fd3a 	bl	800ab00 <aci_gatt_server_confirmation_event>

  return status;
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a096:	b590      	push	{r4, r7, lr}
 800a098:	b087      	sub	sp, #28
 800a09a:	af02      	add	r7, sp, #8
 800a09c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	b298      	uxth	r0, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	885b      	ldrh	r3, [r3, #2]
 800a0b0:	b299      	uxth	r1, r3
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	889b      	ldrh	r3, [r3, #4]
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	4623      	mov	r3, r4
 800a0c4:	f000 fd27 	bl	800ab16 <aci_gatt_prepare_write_permit_req_event>

  return status;
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd90      	pop	{r4, r7, pc}

0800a0d2 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800a0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d4:	b08b      	sub	sp, #44	; 0x2c
 800a0d6:	af06      	add	r7, sp, #24
 800a0d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	781d      	ldrb	r5, [r3, #0]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0ec:	b29e      	uxth	r6, r3
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f893 c003 	ldrb.w	ip, [r3, #3]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800a104:	b292      	uxth	r2, r2
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800a10c:	b289      	uxth	r1, r1
 800a10e:	68b8      	ldr	r0, [r7, #8]
 800a110:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800a114:	b280      	uxth	r0, r0
 800a116:	68bc      	ldr	r4, [r7, #8]
 800a118:	7c64      	ldrb	r4, [r4, #17]
 800a11a:	9404      	str	r4, [sp, #16]
 800a11c:	9003      	str	r0, [sp, #12]
 800a11e:	9102      	str	r1, [sp, #8]
 800a120:	9201      	str	r2, [sp, #4]
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	4673      	mov	r3, lr
 800a126:	4662      	mov	r2, ip
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7f8 fc5e 	bl	80029ec <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a13a <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b0a4      	sub	sp, #144	; 0x90
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a142:	2300      	movs	r3, #0
 800a144:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800a14e:	2301      	movs	r3, #1
 800a150:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a154:	2300      	movs	r3, #0
 800a156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a15a:	e0b3      	b.n	800a2c4 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800a15c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a160:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a164:	4613      	mov	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	4413      	add	r3, r2
 800a16e:	440b      	add	r3, r1
 800a170:	3301      	adds	r3, #1
 800a172:	7819      	ldrb	r1, [r3, #0]
 800a174:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	3390      	adds	r3, #144	; 0x90
 800a182:	443b      	add	r3, r7
 800a184:	3b88      	subs	r3, #136	; 0x88
 800a186:	460a      	mov	r2, r1
 800a188:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a18a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a18e:	3301      	adds	r3, #1
 800a190:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800a194:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a198:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	4413      	add	r3, r2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	7819      	ldrb	r1, [r3, #0]
 800a1ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	3390      	adds	r3, #144	; 0x90
 800a1ba:	443b      	add	r3, r7
 800a1bc:	3b87      	subs	r3, #135	; 0x87
 800a1be:	460a      	mov	r2, r1
 800a1c0:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a1c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	1c98      	adds	r0, r3, #2
 800a1e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1f2:	4413      	add	r3, r2
 800a1f4:	3303      	adds	r3, #3
 800a1f6:	2206      	movs	r2, #6
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f002 f834 	bl	800c266 <memcpy>
    size += 6;
 800a1fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a202:	3306      	adds	r3, #6
 800a204:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800a208:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a20c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	4413      	add	r3, r2
 800a21a:	440b      	add	r3, r1
 800a21c:	3309      	adds	r3, #9
 800a21e:	7819      	ldrb	r1, [r3, #0]
 800a220:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a224:	4613      	mov	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	3390      	adds	r3, #144	; 0x90
 800a22e:	443b      	add	r3, r7
 800a230:	3b80      	subs	r3, #128	; 0x80
 800a232:	460a      	mov	r2, r1
 800a234:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a236:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a23a:	3301      	adds	r3, #1
 800a23c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800a240:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	4413      	add	r3, r2
 800a24e:	3308      	adds	r3, #8
 800a250:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a254:	4413      	add	r3, r2
 800a256:	1c99      	adds	r1, r3, #2
 800a258:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a25c:	4613      	mov	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	3390      	adds	r3, #144	; 0x90
 800a266:	443b      	add	r3, r7
 800a268:	3b7c      	subs	r3, #124	; 0x7c
 800a26a:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800a26c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a270:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	4413      	add	r3, r2
 800a27e:	440b      	add	r3, r1
 800a280:	3309      	adds	r3, #9
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a288:	4413      	add	r3, r2
 800a28a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800a28e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4413      	add	r3, r2
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	b259      	sxtb	r1, r3
 800a29a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	3390      	adds	r3, #144	; 0x90
 800a2a8:	443b      	add	r3, r7
 800a2aa:	3b78      	subs	r3, #120	; 0x78
 800a2ac:	460a      	mov	r2, r1
 800a2ae:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a2b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a2ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	f6ff af43 	blt.w	800a15c <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800a2d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f107 0208 	add.w	r2, r7, #8
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 f9e3 	bl	800a6ae <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800a2e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3790      	adds	r7, #144	; 0x90
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800a2f4:	b590      	push	{r4, r7, lr}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af02      	add	r7, sp, #8
 800a2fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	7818      	ldrb	r0, [r3, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a30e:	b299      	uxth	r1, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a316:	b29a      	uxth	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a31e:	b29c      	uxth	r4, r3
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a326:	b29b      	uxth	r3, r3
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	4623      	mov	r3, r4
 800a32c:	f000 f9cb 	bl	800a6c6 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}

0800a33a <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	7818      	ldrb	r0, [r3, #0]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a354:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a35a:	461a      	mov	r2, r3
 800a35c:	f000 f9c7 	bl	800a6ee <hci_le_read_remote_used_features_complete_event>

  return status;
 800a360:	7bfb      	ldrb	r3, [r7, #15]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	895b      	ldrh	r3, [r3, #10]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	461a      	mov	r2, r3
 800a38c:	f000 f9bd 	bl	800a70a <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800a39a:	b590      	push	{r4, r7, lr}
 800a39c:	b087      	sub	sp, #28
 800a39e:	af02      	add	r7, sp, #8
 800a3a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	b298      	uxth	r0, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	885b      	ldrh	r3, [r3, #2]
 800a3b4:	b299      	uxth	r1, r3
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	889b      	ldrh	r3, [r3, #4]
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	88db      	ldrh	r3, [r3, #6]
 800a3c0:	b29c      	uxth	r4, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	891b      	ldrh	r3, [r3, #8]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	4623      	mov	r3, r4
 800a3cc:	f000 f9ab 	bl	800a726 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd90      	pop	{r4, r7, pc}

0800a3da <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f000 f9aa 	bl	800a74e <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f000 f9a1 	bl	800a766 <hci_le_generate_dhkey_complete_event>

  return status;
 800a424:	7bfb      	ldrb	r3, [r7, #15]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a42e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a432:	b08d      	sub	sp, #52	; 0x34
 800a434:	af08      	add	r7, sp, #32
 800a436:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f893 c000 	ldrb.w	ip, [r3]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a44c:	fa1f fe83 	uxth.w	lr, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a464:	68b9      	ldr	r1, [r7, #8]
 800a466:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a468:	68b8      	ldr	r0, [r7, #8]
 800a46a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800a46e:	b280      	uxth	r0, r0
 800a470:	68bc      	ldr	r4, [r7, #8]
 800a472:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800a476:	b2a4      	uxth	r4, r4
 800a478:	68bd      	ldr	r5, [r7, #8]
 800a47a:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800a47e:	b2ad      	uxth	r5, r5
 800a480:	68be      	ldr	r6, [r7, #8]
 800a482:	7f76      	ldrb	r6, [r6, #29]
 800a484:	9606      	str	r6, [sp, #24]
 800a486:	9505      	str	r5, [sp, #20]
 800a488:	9404      	str	r4, [sp, #16]
 800a48a:	9003      	str	r0, [sp, #12]
 800a48c:	9102      	str	r1, [sp, #8]
 800a48e:	9201      	str	r2, [sp, #4]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	464b      	mov	r3, r9
 800a494:	4642      	mov	r2, r8
 800a496:	4671      	mov	r1, lr
 800a498:	4660      	mov	r0, ip
 800a49a:	f000 f970 	bl	800a77e <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a4aa <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b0a6      	sub	sp, #152	; 0x98
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4ca:	e085      	b.n	800a5d8 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800a4cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4d4:	011b      	lsls	r3, r3, #4
 800a4d6:	4413      	add	r3, r2
 800a4d8:	3301      	adds	r3, #1
 800a4da:	781a      	ldrb	r2, [r3, #0]
 800a4dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4e0:	011b      	lsls	r3, r3, #4
 800a4e2:	3398      	adds	r3, #152	; 0x98
 800a4e4:	443b      	add	r3, r7
 800a4e6:	3b90      	subs	r3, #144	; 0x90
 800a4e8:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a4ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800a4f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	4413      	add	r3, r2
 800a500:	3302      	adds	r3, #2
 800a502:	781a      	ldrb	r2, [r3, #0]
 800a504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	3398      	adds	r3, #152	; 0x98
 800a50c:	443b      	add	r3, r7
 800a50e:	3b8f      	subs	r3, #143	; 0x8f
 800a510:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a512:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a516:	3301      	adds	r3, #1
 800a518:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800a51c:	f107 0208 	add.w	r2, r7, #8
 800a520:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	4413      	add	r3, r2
 800a528:	1c98      	adds	r0, r3, #2
 800a52a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a52e:	011b      	lsls	r3, r3, #4
 800a530:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a534:	4413      	add	r3, r2
 800a536:	3303      	adds	r3, #3
 800a538:	2206      	movs	r2, #6
 800a53a:	4619      	mov	r1, r3
 800a53c:	f001 fe93 	bl	800c266 <memcpy>
    size += 6;
 800a540:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a544:	3306      	adds	r3, #6
 800a546:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800a54a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a54e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	4413      	add	r3, r2
 800a556:	3309      	adds	r3, #9
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a55e:	011b      	lsls	r3, r3, #4
 800a560:	3398      	adds	r3, #152	; 0x98
 800a562:	443b      	add	r3, r7
 800a564:	3b88      	subs	r3, #136	; 0x88
 800a566:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a568:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a56c:	3301      	adds	r3, #1
 800a56e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800a572:	f107 0208 	add.w	r2, r7, #8
 800a576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	3308      	adds	r3, #8
 800a57e:	4413      	add	r3, r2
 800a580:	1c58      	adds	r0, r3, #1
 800a582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	3308      	adds	r3, #8
 800a58a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a58e:	4413      	add	r3, r2
 800a590:	3302      	adds	r3, #2
 800a592:	2206      	movs	r2, #6
 800a594:	4619      	mov	r1, r3
 800a596:	f001 fe66 	bl	800c266 <memcpy>
    size += 6;
 800a59a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a59e:	3306      	adds	r3, #6
 800a5a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800a5a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	4413      	add	r3, r2
 800a5b0:	3310      	adds	r3, #16
 800a5b2:	f993 2000 	ldrsb.w	r2, [r3]
 800a5b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	3398      	adds	r3, #152	; 0x98
 800a5be:	443b      	add	r3, r7
 800a5c0:	3b81      	subs	r3, #129	; 0x81
 800a5c2:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a5c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a5ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	f6ff af71 	blt.w	800a4cc <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800a5ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	f107 0208 	add.w	r2, r7, #8
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f8d5 	bl	800a7a6 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800a5fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a600:	4618      	mov	r0, r3
 800a602:	3798      	adds	r7, #152	; 0x98
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
 800a612:	460b      	mov	r3, r1
 800a614:	80bb      	strh	r3, [r7, #4]
 800a616:	4613      	mov	r3, r2
 800a618:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800a61a:	bf00      	nop
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800a626:	b490      	push	{r4, r7}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	4604      	mov	r4, r0
 800a62e:	4608      	mov	r0, r1
 800a630:	4611      	mov	r1, r2
 800a632:	461a      	mov	r2, r3
 800a634:	4623      	mov	r3, r4
 800a636:	71fb      	strb	r3, [r7, #7]
 800a638:	4603      	mov	r3, r0
 800a63a:	80bb      	strh	r3, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	71bb      	strb	r3, [r7, #6]
 800a640:	4613      	mov	r3, r2
 800a642:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bc90      	pop	{r4, r7}
 800a64c:	4770      	bx	lr

0800a64e <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	4603      	mov	r3, r0
 800a656:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	4603      	mov	r3, r0
 800a69a:	460a      	mov	r2, r1
 800a69c:	71fb      	strb	r3, [r7, #7]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	6039      	str	r1, [r7, #0]
 800a6b8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800a6c6:	b490      	push	{r4, r7}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	4623      	mov	r3, r4
 800a6d6:	71fb      	strb	r3, [r7, #7]
 800a6d8:	4603      	mov	r3, r0
 800a6da:	80bb      	strh	r3, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	807b      	strh	r3, [r7, #2]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bc90      	pop	{r4, r7}
 800a6ec:	4770      	bx	lr

0800a6ee <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	603a      	str	r2, [r7, #0]
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	4603      	mov	r3, r0
 800a712:	6039      	str	r1, [r7, #0]
 800a714:	80fb      	strh	r3, [r7, #6]
 800a716:	4613      	mov	r3, r2
 800a718:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800a726:	b490      	push	{r4, r7}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	4604      	mov	r4, r0
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	461a      	mov	r2, r3
 800a734:	4623      	mov	r3, r4
 800a736:	80fb      	strh	r3, [r7, #6]
 800a738:	4603      	mov	r3, r0
 800a73a:	80bb      	strh	r3, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	807b      	strh	r3, [r7, #2]
 800a740:	4613      	mov	r3, r2
 800a742:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bc90      	pop	{r4, r7}
 800a74c:	4770      	bx	lr

0800a74e <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	4603      	mov	r3, r0
 800a756:	6039      	str	r1, [r7, #0]
 800a758:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	4603      	mov	r3, r0
 800a76e:	6039      	str	r1, [r7, #0]
 800a770:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800a77e:	b490      	push	{r4, r7}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	4604      	mov	r4, r0
 800a786:	4608      	mov	r0, r1
 800a788:	4611      	mov	r1, r2
 800a78a:	461a      	mov	r2, r3
 800a78c:	4623      	mov	r3, r4
 800a78e:	71fb      	strb	r3, [r7, #7]
 800a790:	4603      	mov	r3, r0
 800a792:	80bb      	strh	r3, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	71bb      	strb	r3, [r7, #6]
 800a798:	4613      	mov	r3, r2
 800a79a:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bc90      	pop	{r4, r7}
 800a7a4:	4770      	bx	lr

0800a7a6 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	6039      	str	r1, [r7, #0]
 800a7b0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800a7be:	b480      	push	{r7}
 800a7c0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800a7c2:	bf00      	nop
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	80fb      	strh	r3, [r7, #6]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	717b      	strb	r3, [r7, #5]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	4603      	mov	r3, r0
 800a808:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800a816:	b480      	push	{r7}
 800a818:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800a81a:	bf00      	nop
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800a828:	bf00      	nop
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	603b      	str	r3, [r7, #0]
 800a83a:	4603      	mov	r3, r0
 800a83c:	71fb      	strb	r3, [r7, #7]
 800a83e:	460b      	mov	r3, r1
 800a840:	71bb      	strb	r3, [r7, #6]
 800a842:	4613      	mov	r3, r2
 800a844:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	4603      	mov	r3, r0
 800a85a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	6039      	str	r1, [r7, #0]
 800a872:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	460a      	mov	r2, r1
 800a88a:	80fb      	strh	r3, [r7, #6]
 800a88c:	4613      	mov	r3, r2
 800a88e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 800a89c:	b490      	push	{r4, r7}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4623      	mov	r3, r4
 800a8ac:	80fb      	strh	r3, [r7, #6]
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	80bb      	strh	r3, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	807b      	strh	r3, [r7, #2]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bc90      	pop	{r4, r7}
 800a8c2:	4770      	bx	lr

0800a8c4 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800a8ce:	bf00      	nop
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	460a      	mov	r2, r1
 800a8e4:	80fb      	strh	r3, [r7, #6]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800a8ea:	bf00      	nop
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4603      	mov	r3, r0
 800a900:	80fb      	strh	r3, [r7, #6]
 800a902:	460b      	mov	r3, r1
 800a904:	717b      	strb	r3, [r7, #5]
 800a906:	4613      	mov	r3, r2
 800a908:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800a90a:	bf00      	nop
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	4603      	mov	r3, r0
 800a91e:	603a      	str	r2, [r7, #0]
 800a920:	80fb      	strh	r3, [r7, #6]
 800a922:	460b      	mov	r3, r1
 800a924:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	603b      	str	r3, [r7, #0]
 800a93a:	4603      	mov	r3, r0
 800a93c:	80fb      	strh	r3, [r7, #6]
 800a93e:	460b      	mov	r3, r1
 800a940:	717b      	strb	r3, [r7, #5]
 800a942:	4613      	mov	r3, r2
 800a944:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800a952:	b480      	push	{r7}
 800a954:	b083      	sub	sp, #12
 800a956:	af00      	add	r7, sp, #0
 800a958:	4603      	mov	r3, r0
 800a95a:	603a      	str	r2, [r7, #0]
 800a95c:	80fb      	strh	r3, [r7, #6]
 800a95e:	460b      	mov	r3, r1
 800a960:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	4603      	mov	r3, r0
 800a976:	603a      	str	r2, [r7, #0]
 800a978:	80fb      	strh	r3, [r7, #6]
 800a97a:	460b      	mov	r3, r1
 800a97c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	4603      	mov	r3, r0
 800a992:	603a      	str	r2, [r7, #0]
 800a994:	80fb      	strh	r3, [r7, #6]
 800a996:	460b      	mov	r3, r1
 800a998:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	603b      	str	r3, [r7, #0]
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	80fb      	strh	r3, [r7, #6]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	717b      	strb	r3, [r7, #5]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800a9c6:	b490      	push	{r4, r7}
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	80fb      	strh	r3, [r7, #6]
 800a9d8:	4603      	mov	r3, r0
 800a9da:	80bb      	strh	r3, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	807b      	strh	r3, [r7, #2]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc90      	pop	{r4, r7}
 800a9ec:	4770      	bx	lr

0800a9ee <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	81fb      	strh	r3, [r7, #14]
 800aa10:	460b      	mov	r3, r1
 800aa12:	81bb      	strh	r3, [r7, #12]
 800aa14:	4613      	mov	r3, r2
 800aa16:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	607b      	str	r3, [r7, #4]
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	81fb      	strh	r3, [r7, #14]
 800aa30:	460b      	mov	r3, r1
 800aa32:	81bb      	strh	r3, [r7, #12]
 800aa34:	4613      	mov	r3, r2
 800aa36:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 800aa38:	bf00      	nop
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	80fb      	strh	r3, [r7, #6]
 800aa50:	4613      	mov	r3, r2
 800aa52:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800aa60:	b490      	push	{r4, r7}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	4623      	mov	r3, r4
 800aa70:	80fb      	strh	r3, [r7, #6]
 800aa72:	4603      	mov	r3, r0
 800aa74:	717b      	strb	r3, [r7, #5]
 800aa76:	460b      	mov	r3, r1
 800aa78:	807b      	strh	r3, [r7, #2]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bc90      	pop	{r4, r7}
 800aa86:	4770      	bx	lr

0800aa88 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	607b      	str	r3, [r7, #4]
 800aa90:	4603      	mov	r3, r0
 800aa92:	81fb      	strh	r3, [r7, #14]
 800aa94:	460b      	mov	r3, r1
 800aa96:	81bb      	strh	r3, [r7, #12]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	607b      	str	r3, [r7, #4]
 800aab0:	4603      	mov	r3, r0
 800aab2:	81fb      	strh	r3, [r7, #14]
 800aab4:	460b      	mov	r3, r1
 800aab6:	81bb      	strh	r3, [r7, #12]
 800aab8:	4613      	mov	r3, r2
 800aaba:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800aabc:	bf00      	nop
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	603a      	str	r2, [r7, #0]
 800aad2:	80fb      	strh	r3, [r7, #6]
 800aad4:	460b      	mov	r3, r1
 800aad6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	460a      	mov	r2, r1
 800aaee:	80fb      	strh	r3, [r7, #6]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800ab16:	b490      	push	{r4, r7}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	4608      	mov	r0, r1
 800ab20:	4611      	mov	r1, r2
 800ab22:	461a      	mov	r2, r3
 800ab24:	4623      	mov	r3, r4
 800ab26:	80fb      	strh	r3, [r7, #6]
 800ab28:	4603      	mov	r3, r0
 800ab2a:	80bb      	strh	r3, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	807b      	strh	r3, [r7, #2]
 800ab30:	4613      	mov	r3, r2
 800ab32:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bc90      	pop	{r4, r7}
 800ab3c:	4770      	bx	lr

0800ab3e <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	4603      	mov	r3, r0
 800ab46:	460a      	mov	r2, r1
 800ab48:	80fb      	strh	r3, [r7, #6]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	4603      	mov	r3, r0
 800ab62:	603a      	str	r2, [r7, #0]
 800ab64:	80fb      	strh	r3, [r7, #6]
 800ab66:	460b      	mov	r3, r1
 800ab68:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800ab76:	b490      	push	{r4, r7}
 800ab78:	b082      	sub	sp, #8
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	461a      	mov	r2, r3
 800ab84:	4623      	mov	r3, r4
 800ab86:	80fb      	strh	r3, [r7, #6]
 800ab88:	4603      	mov	r3, r0
 800ab8a:	717b      	strb	r3, [r7, #5]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	807b      	strh	r3, [r7, #2]
 800ab90:	4613      	mov	r3, r2
 800ab92:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bc90      	pop	{r4, r7}
 800ab9c:	4770      	bx	lr

0800ab9e <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800ab9e:	b490      	push	{r4, r7}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	4604      	mov	r4, r0
 800aba6:	4608      	mov	r0, r1
 800aba8:	4611      	mov	r1, r2
 800abaa:	461a      	mov	r2, r3
 800abac:	4623      	mov	r3, r4
 800abae:	80fb      	strh	r3, [r7, #6]
 800abb0:	4603      	mov	r3, r0
 800abb2:	717b      	strb	r3, [r7, #5]
 800abb4:	460b      	mov	r3, r1
 800abb6:	807b      	strh	r3, [r7, #2]
 800abb8:	4613      	mov	r3, r2
 800abba:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800abbc:	bf00      	nop
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bc90      	pop	{r4, r7}
 800abc4:	4770      	bx	lr

0800abc6 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800abc6:	b480      	push	{r7}
 800abc8:	b083      	sub	sp, #12
 800abca:	af00      	add	r7, sp, #0
 800abcc:	4603      	mov	r3, r0
 800abce:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800ac00:	bf00      	nop
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	603a      	str	r2, [r7, #0]
 800ac16:	71fb      	strb	r3, [r7, #7]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	603a      	str	r2, [r7, #0]
 800ac32:	71fb      	strb	r3, [r7, #7]
 800ac34:	460b      	mov	r3, r1
 800ac36:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	603a      	str	r2, [r7, #0]
 800ac4e:	71fb      	strb	r3, [r7, #7]
 800ac50:	460b      	mov	r3, r1
 800ac52:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ac6a:	f107 0308 	add.w	r3, r7, #8
 800ac6e:	2218      	movs	r2, #24
 800ac70:	2100      	movs	r1, #0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f001 fa77 	bl	800c166 <memset>
  rq.ogf = 0x03;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac80:	1dfb      	adds	r3, r7, #7
 800ac82:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac84:	2301      	movs	r3, #1
 800ac86:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ac88:	f107 0308 	add.w	r3, r7, #8
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f9ca 	bl	800b028 <hci_send_req>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	da01      	bge.n	800ac9e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ac9a:	23ff      	movs	r3, #255	; 0xff
 800ac9c:	e005      	b.n	800acaa <hci_reset+0x4a>
  if (status) {
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <hci_reset+0x48>
    return status;
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	e000      	b.n	800acaa <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b08e      	sub	sp, #56	; 0x38
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	60b9      	str	r1, [r7, #8]
 800acbc:	607a      	str	r2, [r7, #4]
 800acbe:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800acc0:	f107 0314 	add.w	r3, r7, #20
 800acc4:	2209      	movs	r2, #9
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fa4c 	bl	800c166 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800acce:	f107 0320 	add.w	r3, r7, #32
 800acd2:	2218      	movs	r2, #24
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f001 fa45 	bl	800c166 <memset>
  rq.ogf = 0x04;
 800acdc:	2304      	movs	r3, #4
 800acde:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800ace0:	2301      	movs	r3, #1
 800ace2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800acea:	2309      	movs	r3, #9
 800acec:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800acee:	f107 0320 	add.w	r3, r7, #32
 800acf2:	2100      	movs	r1, #0
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f997 	bl	800b028 <hci_send_req>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da01      	bge.n	800ad04 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800ad00:	23ff      	movs	r3, #255	; 0xff
 800ad02:	e018      	b.n	800ad36 <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800ad04:	7d3b      	ldrb	r3, [r7, #20]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <hci_read_local_version_information+0x5c>
    return resp.Status;
 800ad0a:	7d3b      	ldrb	r3, [r7, #20]
 800ad0c:	e013      	b.n	800ad36 <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800ad0e:	7d7a      	ldrb	r2, [r7, #21]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800ad14:	8afa      	ldrh	r2, [r7, #22]
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800ad1a:	7e3a      	ldrb	r2, [r7, #24]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800ad20:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800ad2a:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad32:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3738      	adds	r7, #56	; 0x38
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b0cc      	sub	sp, #304	; 0x130
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	4602      	mov	r2, r0
 800ad46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad4e:	6019      	str	r1, [r3, #0]
 800ad50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad54:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ad58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800ad5a:	f107 030c 	add.w	r3, r7, #12
 800ad5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad66:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800ad74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ad7c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ad80:	7812      	ldrb	r2, [r2, #0]
 800ad82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad84:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ad88:	3301      	adds	r3, #1
 800ad8a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800ad8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800ad9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ada0:	1c58      	adds	r0, r3, #1
 800ada2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ada6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adaa:	221f      	movs	r2, #31
 800adac:	6819      	ldr	r1, [r3, #0]
 800adae:	f001 fa5a 	bl	800c266 <memcpy>
  }
  index_input += 31;
 800adb2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800adb6:	331f      	adds	r3, #31
 800adb8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800adbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adc0:	2218      	movs	r2, #24
 800adc2:	2100      	movs	r1, #0
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 f9ce 	bl	800c166 <memset>
  rq.ogf = 0x08;
 800adca:	2308      	movs	r3, #8
 800adcc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800add0:	2309      	movs	r3, #9
 800add2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800add6:	f107 030c 	add.w	r3, r7, #12
 800adda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800adde:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ade2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ade6:	f107 030b 	add.w	r3, r7, #11
 800adea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800adee:	2301      	movs	r3, #1
 800adf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800adf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adf8:	2100      	movs	r1, #0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 f914 	bl	800b028 <hci_send_req>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da01      	bge.n	800ae0a <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 800ae06:	23ff      	movs	r3, #255	; 0xff
 800ae08:	e00d      	b.n	800ae26 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800ae0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae0e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <hci_le_set_scan_response_data+0xe6>
    return status;
 800ae18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae1c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	e000      	b.n	800ae26 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d001      	beq.n	800ae4a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800ae46:	2301      	movs	r3, #1
 800ae48:	e00c      	b.n	800ae64 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ae58:	3b03      	subs	r3, #3
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d001      	beq.n	800ae62 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e000      	b.n	800ae64 <verify_packet+0x34>
  
  return 0;      
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b0a6      	sub	sp, #152	; 0x98
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	4603      	mov	r3, r0
 800ae7a:	81fb      	strh	r3, [r7, #14]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	81bb      	strh	r3, [r7, #12]
 800ae80:	4613      	mov	r3, r2
 800ae82:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ae84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae8c:	b21a      	sxth	r2, r3
 800ae8e:	89fb      	ldrh	r3, [r7, #14]
 800ae90:	029b      	lsls	r3, r3, #10
 800ae92:	b21b      	sxth	r3, r3
 800ae94:	4313      	orrs	r3, r2
 800ae96:	b21b      	sxth	r3, r3
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800aea0:	2301      	movs	r3, #1
 800aea2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800aea4:	f107 0318 	add.w	r3, r7, #24
 800aea8:	3301      	adds	r3, #1
 800aeaa:	461a      	mov	r2, r3
 800aeac:	f107 0314 	add.w	r3, r7, #20
 800aeb0:	8819      	ldrh	r1, [r3, #0]
 800aeb2:	789b      	ldrb	r3, [r3, #2]
 800aeb4:	8011      	strh	r1, [r2, #0]
 800aeb6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800aeb8:	f107 0318 	add.w	r3, r7, #24
 800aebc:	3304      	adds	r3, #4
 800aebe:	7afa      	ldrb	r2, [r7, #11]
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 f9cf 	bl	800c266 <memcpy>
  
  if (hciContext.io.Send)
 800aec8:	4b08      	ldr	r3, [pc, #32]	; (800aeec <send_cmd+0x7c>)
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800aed0:	4b06      	ldr	r3, [pc, #24]	; (800aeec <send_cmd+0x7c>)
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	7afa      	ldrb	r2, [r7, #11]
 800aed6:	b292      	uxth	r2, r2
 800aed8:	3204      	adds	r2, #4
 800aeda:	b291      	uxth	r1, r2
 800aedc:	f107 0218 	add.w	r2, r7, #24
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3
  }
}
 800aee4:	bf00      	nop
 800aee6:	3798      	adds	r7, #152	; 0x98
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000e94 	.word	0x20000e94

0800aef0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800aefa:	e00a      	b.n	800af12 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800aefc:	f107 030c 	add.w	r3, r7, #12
 800af00:	4619      	mov	r1, r3
 800af02:	6838      	ldr	r0, [r7, #0]
 800af04:	f000 fae8 	bl	800b4d8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fa4f 	bl	800b3b0 <list_insert_head>
  while (!list_is_empty(src_list))
 800af12:	6838      	ldr	r0, [r7, #0]
 800af14:	f000 fa2a 	bl	800b36c <list_is_empty>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d0ee      	beq.n	800aefc <move_list+0xc>
  }
}
 800af1e:	bf00      	nop
 800af20:	bf00      	nop
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800af2e:	e009      	b.n	800af44 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800af30:	1d3b      	adds	r3, r7, #4
 800af32:	4619      	mov	r1, r3
 800af34:	4809      	ldr	r0, [pc, #36]	; (800af5c <free_event_list+0x34>)
 800af36:	f000 faa8 	bl	800b48a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4619      	mov	r1, r3
 800af3e:	4808      	ldr	r0, [pc, #32]	; (800af60 <free_event_list+0x38>)
 800af40:	f000 fa5c 	bl	800b3fc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800af44:	4806      	ldr	r0, [pc, #24]	; (800af60 <free_event_list+0x38>)
 800af46:	f000 faee 	bl	800b526 <list_get_size>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	ddef      	ble.n	800af30 <free_event_list+0x8>
  }
}
 800af50:	bf00      	nop
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20000914 	.word	0x20000914
 800af60:	2000090c 	.word	0x2000090c

0800af64 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800af74:	4a18      	ldr	r2, [pc, #96]	; (800afd8 <hci_init+0x74>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800af7a:	4818      	ldr	r0, [pc, #96]	; (800afdc <hci_init+0x78>)
 800af7c:	f000 f9e6 	bl	800b34c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800af80:	4817      	ldr	r0, [pc, #92]	; (800afe0 <hci_init+0x7c>)
 800af82:	f000 f9e3 	bl	800b34c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800af86:	f7f8 fad5 	bl	8003534 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
 800af8e:	e00c      	b.n	800afaa <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	228c      	movs	r2, #140	; 0x8c
 800af94:	fb02 f303 	mul.w	r3, r2, r3
 800af98:	4a12      	ldr	r2, [pc, #72]	; (800afe4 <hci_init+0x80>)
 800af9a:	4413      	add	r3, r2
 800af9c:	4619      	mov	r1, r3
 800af9e:	480f      	ldr	r0, [pc, #60]	; (800afdc <hci_init+0x78>)
 800afa0:	f000 fa2c 	bl	800b3fc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	3301      	adds	r3, #1
 800afa8:	73fb      	strb	r3, [r7, #15]
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b09      	cmp	r3, #9
 800afae:	d9ef      	bls.n	800af90 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800afb0:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <hci_init+0x74>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <hci_init+0x5c>
 800afb8:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <hci_init+0x74>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2000      	movs	r0, #0
 800afbe:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <hci_init+0x74>)
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <hci_init+0x6a>
 800afc8:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <hci_init+0x74>)
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	4798      	blx	r3
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	20000e94 	.word	0x20000e94
 800afdc:	2000090c 	.word	0x2000090c
 800afe0:	20000914 	.word	0x20000914
 800afe4:	2000091c 	.word	0x2000091c

0800afe8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a0b      	ldr	r2, [pc, #44]	; (800b024 <hci_register_io_bus+0x3c>)
 800aff6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	4a09      	ldr	r2, [pc, #36]	; (800b024 <hci_register_io_bus+0x3c>)
 800affe:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	4a07      	ldr	r2, [pc, #28]	; (800b024 <hci_register_io_bus+0x3c>)
 800b006:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	4a05      	ldr	r2, [pc, #20]	; (800b024 <hci_register_io_bus+0x3c>)
 800b00e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	4a03      	ldr	r2, [pc, #12]	; (800b024 <hci_register_io_bus+0x3c>)
 800b016:	6093      	str	r3, [r2, #8]
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr
 800b024:	20000e94 	.word	0x20000e94

0800b028 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08e      	sub	sp, #56	; 0x38
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	460b      	mov	r3, r1
 800b032:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	885b      	ldrh	r3, [r3, #2]
 800b038:	b21b      	sxth	r3, r3
 800b03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b03e:	b21a      	sxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	029b      	lsls	r3, r3, #10
 800b046:	b21b      	sxth	r3, r3
 800b048:	4313      	orrs	r3, r2
 800b04a:	b21b      	sxth	r3, r3
 800b04c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b052:	f107 0308 	add.w	r3, r7, #8
 800b056:	4618      	mov	r0, r3
 800b058:	f000 f978 	bl	800b34c <list_init_head>

  free_event_list();
 800b05c:	f7ff ff64 	bl	800af28 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	8818      	ldrh	r0, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8859      	ldrh	r1, [r3, #2]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f7ff fefd 	bl	800ae70 <send_cmd>
  
  if (async)
 800b076:	78fb      	ldrb	r3, [r7, #3]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <hci_send_req+0x58>
  {
    return 0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	e0e2      	b.n	800b246 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b080:	f7f9 fc6e 	bl	8004960 <HAL_GetTick>
 800b084:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b086:	f7f9 fc6b 	bl	8004960 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b094:	f200 80b3 	bhi.w	800b1fe <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b098:	486d      	ldr	r0, [pc, #436]	; (800b250 <hci_send_req+0x228>)
 800b09a:	f000 f967 	bl	800b36c <list_is_empty>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d000      	beq.n	800b0a6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b0a4:	e7ef      	b.n	800b086 <hci_send_req+0x5e>
      {
        break;
 800b0a6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b0a8:	f107 0310 	add.w	r3, r7, #16
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4868      	ldr	r0, [pc, #416]	; (800b250 <hci_send_req+0x228>)
 800b0b0:	f000 f9eb 	bl	800b48a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d17f      	bne.n	800b1c2 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	3303      	adds	r3, #3
 800b0ce:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b0d6:	3b03      	subs	r3, #3
 800b0d8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2b3e      	cmp	r3, #62	; 0x3e
 800b0e0:	d04c      	beq.n	800b17c <hci_send_req+0x154>
 800b0e2:	2b3e      	cmp	r3, #62	; 0x3e
 800b0e4:	dc68      	bgt.n	800b1b8 <hci_send_req+0x190>
 800b0e6:	2b10      	cmp	r3, #16
 800b0e8:	f000 808b 	beq.w	800b202 <hci_send_req+0x1da>
 800b0ec:	2b10      	cmp	r3, #16
 800b0ee:	dc63      	bgt.n	800b1b8 <hci_send_req+0x190>
 800b0f0:	2b0e      	cmp	r3, #14
 800b0f2:	d023      	beq.n	800b13c <hci_send_req+0x114>
 800b0f4:	2b0f      	cmp	r3, #15
 800b0f6:	d15f      	bne.n	800b1b8 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	885b      	ldrh	r3, [r3, #2]
 800b100:	b29b      	uxth	r3, r3
 800b102:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b104:	429a      	cmp	r2, r3
 800b106:	d17e      	bne.n	800b206 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	2b0f      	cmp	r3, #15
 800b10e:	d004      	beq.n	800b11a <hci_send_req+0xf2>
          if (cs->status) {
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d051      	beq.n	800b1bc <hci_send_req+0x194>
            goto failed;
 800b118:	e078      	b.n	800b20c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695a      	ldr	r2, [r3, #20]
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	429a      	cmp	r2, r3
 800b122:	bf28      	it	cs
 800b124:	461a      	movcs	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6918      	ldr	r0, [r3, #16]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	461a      	mov	r2, r3
 800b134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b136:	f001 f896 	bl	800c266 <memcpy>
        goto done;
 800b13a:	e078      	b.n	800b22e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b146:	b29b      	uxth	r3, r3
 800b148:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d15d      	bne.n	800b20a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	3303      	adds	r3, #3
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	3b03      	subs	r3, #3
 800b158:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	695a      	ldr	r2, [r3, #20]
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	429a      	cmp	r2, r3
 800b162:	bf28      	it	cs
 800b164:	461a      	movcs	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6918      	ldr	r0, [r3, #16]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	461a      	mov	r2, r3
 800b174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b176:	f001 f876 	bl	800c266 <memcpy>
        goto done;
 800b17a:	e058      	b.n	800b22e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d118      	bne.n	800b1c0 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	3b01      	subs	r3, #1
 800b192:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	695a      	ldr	r2, [r3, #20]
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	bf28      	it	cs
 800b19e:	461a      	movcs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6918      	ldr	r0, [r3, #16]
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	1c59      	adds	r1, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	f001 f858 	bl	800c266 <memcpy>
        goto done;
 800b1b6:	e03a      	b.n	800b22e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800b1b8:	bf00      	nop
 800b1ba:	e002      	b.n	800b1c2 <hci_send_req+0x19a>
          break;
 800b1bc:	bf00      	nop
 800b1be:	e000      	b.n	800b1c2 <hci_send_req+0x19a>
          break;
 800b1c0:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b1c2:	4824      	ldr	r0, [pc, #144]	; (800b254 <hci_send_req+0x22c>)
 800b1c4:	f000 f8d2 	bl	800b36c <list_is_empty>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00d      	beq.n	800b1ea <hci_send_req+0x1c2>
 800b1ce:	4820      	ldr	r0, [pc, #128]	; (800b250 <hci_send_req+0x228>)
 800b1d0:	f000 f8cc 	bl	800b36c <list_is_empty>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	481d      	ldr	r0, [pc, #116]	; (800b254 <hci_send_req+0x22c>)
 800b1e0:	f000 f90c 	bl	800b3fc <list_insert_tail>
      hciReadPacket=NULL;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	613b      	str	r3, [r7, #16]
 800b1e8:	e008      	b.n	800b1fc <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	f107 0308 	add.w	r3, r7, #8
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f902 	bl	800b3fc <list_insert_tail>
      hciReadPacket=NULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
  {
 800b1fc:	e740      	b.n	800b080 <hci_send_req+0x58>
        goto failed;
 800b1fe:	bf00      	nop
 800b200:	e004      	b.n	800b20c <hci_send_req+0x1e4>
        goto failed;
 800b202:	bf00      	nop
 800b204:	e002      	b.n	800b20c <hci_send_req+0x1e4>
          goto failed;
 800b206:	bf00      	nop
 800b208:	e000      	b.n	800b20c <hci_send_req+0x1e4>
          goto failed;
 800b20a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d004      	beq.n	800b21c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	4619      	mov	r1, r3
 800b216:	480f      	ldr	r0, [pc, #60]	; (800b254 <hci_send_req+0x22c>)
 800b218:	f000 f8ca 	bl	800b3b0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b21c:	f107 0308 	add.w	r3, r7, #8
 800b220:	4619      	mov	r1, r3
 800b222:	480b      	ldr	r0, [pc, #44]	; (800b250 <hci_send_req+0x228>)
 800b224:	f7ff fe64 	bl	800aef0 <move_list>

  return -1;
 800b228:	f04f 33ff 	mov.w	r3, #4294967295
 800b22c:	e00b      	b.n	800b246 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	4619      	mov	r1, r3
 800b232:	4808      	ldr	r0, [pc, #32]	; (800b254 <hci_send_req+0x22c>)
 800b234:	f000 f8bc 	bl	800b3b0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b238:	f107 0308 	add.w	r3, r7, #8
 800b23c:	4619      	mov	r1, r3
 800b23e:	4804      	ldr	r0, [pc, #16]	; (800b250 <hci_send_req+0x228>)
 800b240:	f7ff fe56 	bl	800aef0 <move_list>

  return 0;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3738      	adds	r7, #56	; 0x38
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20000914 	.word	0x20000914
 800b254:	2000090c 	.word	0x2000090c

0800b258 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b262:	e013      	b.n	800b28c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b264:	1d3b      	adds	r3, r7, #4
 800b266:	4619      	mov	r1, r3
 800b268:	480e      	ldr	r0, [pc, #56]	; (800b2a4 <hci_user_evt_proc+0x4c>)
 800b26a:	f000 f90e 	bl	800b48a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b26e:	4b0e      	ldr	r3, [pc, #56]	; (800b2a8 <hci_user_evt_proc+0x50>)
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b276:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <hci_user_evt_proc+0x50>)
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	3208      	adds	r2, #8
 800b27e:	4610      	mov	r0, r2
 800b280:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4619      	mov	r1, r3
 800b286:	4809      	ldr	r0, [pc, #36]	; (800b2ac <hci_user_evt_proc+0x54>)
 800b288:	f000 f8b8 	bl	800b3fc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b28c:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <hci_user_evt_proc+0x4c>)
 800b28e:	f000 f86d 	bl	800b36c <list_is_empty>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0e5      	beq.n	800b264 <hci_user_evt_proc+0xc>
  }
}
 800b298:	bf00      	nop
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000914 	.word	0x20000914
 800b2a8:	20000e94 	.word	0x20000e94
 800b2ac:	2000090c 	.word	0x2000090c

0800b2b0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b2c0:	481f      	ldr	r0, [pc, #124]	; (800b340 <hci_notify_asynch_evt+0x90>)
 800b2c2:	f000 f853 	bl	800b36c <list_is_empty>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d132      	bne.n	800b332 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b2cc:	f107 030c 	add.w	r3, r7, #12
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	481b      	ldr	r0, [pc, #108]	; (800b340 <hci_notify_asynch_evt+0x90>)
 800b2d4:	f000 f8d9 	bl	800b48a <list_remove_head>
    
    if (hciContext.io.Receive)
 800b2d8:	4b1a      	ldr	r3, [pc, #104]	; (800b344 <hci_notify_asynch_evt+0x94>)
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d02a      	beq.n	800b336 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b2e0:	4b18      	ldr	r3, [pc, #96]	; (800b344 <hci_notify_asynch_evt+0x94>)
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	3208      	adds	r2, #8
 800b2e8:	2180      	movs	r1, #128	; 0x80
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	4798      	blx	r3
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800b2f2:	7cfb      	ldrb	r3, [r7, #19]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d016      	beq.n	800b326 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	7cfa      	ldrb	r2, [r7, #19]
 800b2fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff fd94 	bl	800ae30 <verify_packet>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4619      	mov	r1, r3
 800b312:	480d      	ldr	r0, [pc, #52]	; (800b348 <hci_notify_asynch_evt+0x98>)
 800b314:	f000 f872 	bl	800b3fc <list_insert_tail>
 800b318:	e00d      	b.n	800b336 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	4619      	mov	r1, r3
 800b31e:	4808      	ldr	r0, [pc, #32]	; (800b340 <hci_notify_asynch_evt+0x90>)
 800b320:	f000 f846 	bl	800b3b0 <list_insert_head>
 800b324:	e007      	b.n	800b336 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4619      	mov	r1, r3
 800b32a:	4805      	ldr	r0, [pc, #20]	; (800b340 <hci_notify_asynch_evt+0x90>)
 800b32c:	f000 f840 	bl	800b3b0 <list_insert_head>
 800b330:	e001      	b.n	800b336 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800b332:	2301      	movs	r3, #1
 800b334:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800b336:	697b      	ldr	r3, [r7, #20]
  
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	2000090c 	.word	0x2000090c
 800b344:	20000e94 	.word	0x20000e94
 800b348:	20000914 	.word	0x20000914

0800b34c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	605a      	str	r2, [r3, #4]
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b374:	f3ef 8310 	mrs	r3, PRIMASK
 800b378:	60fb      	str	r3, [r7, #12]
  return(result);
 800b37a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b37c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b37e:	b672      	cpsid	i
}
 800b380:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d102      	bne.n	800b392 <list_is_empty+0x26>
  {
    return_value = 1;
 800b38c:	2301      	movs	r3, #1
 800b38e:	75fb      	strb	r3, [r7, #23]
 800b390:	e001      	b.n	800b396 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	75fb      	strb	r3, [r7, #23]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f383 8810 	msr	PRIMASK, r3
}
 800b3a0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	371c      	adds	r7, #28
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b3be:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3c4:	b672      	cpsid	i
}
 800b3c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f383 8810 	msr	PRIMASK, r3
}
 800b3ee:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b3f0:	bf00      	nop
 800b3f2:	371c      	adds	r7, #28
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b406:	f3ef 8310 	mrs	r3, PRIMASK
 800b40a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b40c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b40e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b410:	b672      	cpsid	i
}
 800b412:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f383 8810 	msr	PRIMASK, r3
}
 800b43a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b43c:	bf00      	nop
 800b43e:	371c      	adds	r7, #28
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b450:	f3ef 8310 	mrs	r3, PRIMASK
 800b454:	60fb      	str	r3, [r7, #12]
  return(result);
 800b456:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b458:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b45a:	b672      	cpsid	i
}
 800b45c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6852      	ldr	r2, [r2, #4]
 800b470:	605a      	str	r2, [r3, #4]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f383 8810 	msr	PRIMASK, r3
}
 800b47c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b47e:	bf00      	nop
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b494:	f3ef 8310 	mrs	r3, PRIMASK
 800b498:	60fb      	str	r3, [r7, #12]
  return(result);
 800b49a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b49c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b49e:	b672      	cpsid	i
}
 800b4a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ffca 	bl	800b448 <list_remove_node>
  (*node)->next = NULL;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	605a      	str	r2, [r3, #4]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	f383 8810 	msr	PRIMASK, r3
}
 800b4ce:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b4d0:	bf00      	nop
 800b4d2:	3718      	adds	r7, #24
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b4ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4ec:	b672      	cpsid	i
}
 800b4ee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff ffa3 	bl	800b448 <list_remove_node>
  (*node)->next = NULL;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2200      	movs	r2, #0
 800b508:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2200      	movs	r2, #0
 800b510:	605a      	str	r2, [r3, #4]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f383 8810 	msr	PRIMASK, r3
}
 800b51c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b51e:	bf00      	nop
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b526:	b480      	push	{r7}
 800b528:	b089      	sub	sp, #36	; 0x24
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b532:	f3ef 8310 	mrs	r3, PRIMASK
 800b536:	613b      	str	r3, [r7, #16]
  return(result);
 800b538:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b53a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b53c:	b672      	cpsid	i
}
 800b53e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b546:	e005      	b.n	800b554 <list_get_size+0x2e>
  {
    size++;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	3301      	adds	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d1f5      	bne.n	800b548 <list_get_size+0x22>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f383 8810 	msr	PRIMASK, r3
}
 800b566:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800b568:	69fb      	ldr	r3, [r7, #28]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3724      	adds	r7, #36	; 0x24
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
	...

0800b578 <srand>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <srand+0x44>)
 800b57c:	681d      	ldr	r5, [r3, #0]
 800b57e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b580:	4604      	mov	r4, r0
 800b582:	b9b3      	cbnz	r3, 800b5b2 <srand+0x3a>
 800b584:	2018      	movs	r0, #24
 800b586:	f001 fd61 	bl	800d04c <malloc>
 800b58a:	4602      	mov	r2, r0
 800b58c:	6328      	str	r0, [r5, #48]	; 0x30
 800b58e:	b920      	cbnz	r0, 800b59a <srand+0x22>
 800b590:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <srand+0x48>)
 800b592:	480c      	ldr	r0, [pc, #48]	; (800b5c4 <srand+0x4c>)
 800b594:	2146      	movs	r1, #70	; 0x46
 800b596:	f000 fe75 	bl	800c284 <__assert_func>
 800b59a:	490b      	ldr	r1, [pc, #44]	; (800b5c8 <srand+0x50>)
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <srand+0x54>)
 800b59e:	e9c0 1300 	strd	r1, r3, [r0]
 800b5a2:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <srand+0x58>)
 800b5a4:	6083      	str	r3, [r0, #8]
 800b5a6:	230b      	movs	r3, #11
 800b5a8:	8183      	strh	r3, [r0, #12]
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b5b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	611c      	str	r4, [r3, #16]
 800b5b8:	615a      	str	r2, [r3, #20]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	2000007c 	.word	0x2000007c
 800b5c0:	0800e618 	.word	0x0800e618
 800b5c4:	0800e62f 	.word	0x0800e62f
 800b5c8:	abcd330e 	.word	0xabcd330e
 800b5cc:	e66d1234 	.word	0xe66d1234
 800b5d0:	0005deec 	.word	0x0005deec

0800b5d4 <rand>:
 800b5d4:	4b16      	ldr	r3, [pc, #88]	; (800b630 <rand+0x5c>)
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	681c      	ldr	r4, [r3, #0]
 800b5da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b5dc:	b9b3      	cbnz	r3, 800b60c <rand+0x38>
 800b5de:	2018      	movs	r0, #24
 800b5e0:	f001 fd34 	bl	800d04c <malloc>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	6320      	str	r0, [r4, #48]	; 0x30
 800b5e8:	b920      	cbnz	r0, 800b5f4 <rand+0x20>
 800b5ea:	4b12      	ldr	r3, [pc, #72]	; (800b634 <rand+0x60>)
 800b5ec:	4812      	ldr	r0, [pc, #72]	; (800b638 <rand+0x64>)
 800b5ee:	2152      	movs	r1, #82	; 0x52
 800b5f0:	f000 fe48 	bl	800c284 <__assert_func>
 800b5f4:	4911      	ldr	r1, [pc, #68]	; (800b63c <rand+0x68>)
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <rand+0x6c>)
 800b5f8:	e9c0 1300 	strd	r1, r3, [r0]
 800b5fc:	4b11      	ldr	r3, [pc, #68]	; (800b644 <rand+0x70>)
 800b5fe:	6083      	str	r3, [r0, #8]
 800b600:	230b      	movs	r3, #11
 800b602:	8183      	strh	r3, [r0, #12]
 800b604:	2100      	movs	r1, #0
 800b606:	2001      	movs	r0, #1
 800b608:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b60c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b60e:	480e      	ldr	r0, [pc, #56]	; (800b648 <rand+0x74>)
 800b610:	690b      	ldr	r3, [r1, #16]
 800b612:	694c      	ldr	r4, [r1, #20]
 800b614:	4a0d      	ldr	r2, [pc, #52]	; (800b64c <rand+0x78>)
 800b616:	4358      	muls	r0, r3
 800b618:	fb02 0004 	mla	r0, r2, r4, r0
 800b61c:	fba3 3202 	umull	r3, r2, r3, r2
 800b620:	3301      	adds	r3, #1
 800b622:	eb40 0002 	adc.w	r0, r0, r2
 800b626:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b62a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b62e:	bd10      	pop	{r4, pc}
 800b630:	2000007c 	.word	0x2000007c
 800b634:	0800e618 	.word	0x0800e618
 800b638:	0800e62f 	.word	0x0800e62f
 800b63c:	abcd330e 	.word	0xabcd330e
 800b640:	e66d1234 	.word	0xe66d1234
 800b644:	0005deec 	.word	0x0005deec
 800b648:	5851f42d 	.word	0x5851f42d
 800b64c:	4c957f2d 	.word	0x4c957f2d

0800b650 <__cvt>:
 800b650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b654:	ec55 4b10 	vmov	r4, r5, d0
 800b658:	2d00      	cmp	r5, #0
 800b65a:	460e      	mov	r6, r1
 800b65c:	4619      	mov	r1, r3
 800b65e:	462b      	mov	r3, r5
 800b660:	bfbb      	ittet	lt
 800b662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b666:	461d      	movlt	r5, r3
 800b668:	2300      	movge	r3, #0
 800b66a:	232d      	movlt	r3, #45	; 0x2d
 800b66c:	700b      	strb	r3, [r1, #0]
 800b66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b674:	4691      	mov	r9, r2
 800b676:	f023 0820 	bic.w	r8, r3, #32
 800b67a:	bfbc      	itt	lt
 800b67c:	4622      	movlt	r2, r4
 800b67e:	4614      	movlt	r4, r2
 800b680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b684:	d005      	beq.n	800b692 <__cvt+0x42>
 800b686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b68a:	d100      	bne.n	800b68e <__cvt+0x3e>
 800b68c:	3601      	adds	r6, #1
 800b68e:	2102      	movs	r1, #2
 800b690:	e000      	b.n	800b694 <__cvt+0x44>
 800b692:	2103      	movs	r1, #3
 800b694:	ab03      	add	r3, sp, #12
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	ab02      	add	r3, sp, #8
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	ec45 4b10 	vmov	d0, r4, r5
 800b6a0:	4653      	mov	r3, sl
 800b6a2:	4632      	mov	r2, r6
 800b6a4:	f000 fe94 	bl	800c3d0 <_dtoa_r>
 800b6a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	d102      	bne.n	800b6b6 <__cvt+0x66>
 800b6b0:	f019 0f01 	tst.w	r9, #1
 800b6b4:	d022      	beq.n	800b6fc <__cvt+0xac>
 800b6b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6ba:	eb07 0906 	add.w	r9, r7, r6
 800b6be:	d110      	bne.n	800b6e2 <__cvt+0x92>
 800b6c0:	783b      	ldrb	r3, [r7, #0]
 800b6c2:	2b30      	cmp	r3, #48	; 0x30
 800b6c4:	d10a      	bne.n	800b6dc <__cvt+0x8c>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f7f5 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6d2:	b918      	cbnz	r0, 800b6dc <__cvt+0x8c>
 800b6d4:	f1c6 0601 	rsb	r6, r6, #1
 800b6d8:	f8ca 6000 	str.w	r6, [sl]
 800b6dc:	f8da 3000 	ldr.w	r3, [sl]
 800b6e0:	4499      	add	r9, r3
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	f7f5 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ee:	b108      	cbz	r0, 800b6f4 <__cvt+0xa4>
 800b6f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6f4:	2230      	movs	r2, #48	; 0x30
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	454b      	cmp	r3, r9
 800b6fa:	d307      	bcc.n	800b70c <__cvt+0xbc>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b700:	1bdb      	subs	r3, r3, r7
 800b702:	4638      	mov	r0, r7
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	b004      	add	sp, #16
 800b708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70c:	1c59      	adds	r1, r3, #1
 800b70e:	9103      	str	r1, [sp, #12]
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	e7f0      	b.n	800b6f6 <__cvt+0xa6>

0800b714 <__exponent>:
 800b714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b716:	4603      	mov	r3, r0
 800b718:	2900      	cmp	r1, #0
 800b71a:	bfb8      	it	lt
 800b71c:	4249      	neglt	r1, r1
 800b71e:	f803 2b02 	strb.w	r2, [r3], #2
 800b722:	bfb4      	ite	lt
 800b724:	222d      	movlt	r2, #45	; 0x2d
 800b726:	222b      	movge	r2, #43	; 0x2b
 800b728:	2909      	cmp	r1, #9
 800b72a:	7042      	strb	r2, [r0, #1]
 800b72c:	dd2a      	ble.n	800b784 <__exponent+0x70>
 800b72e:	f10d 0207 	add.w	r2, sp, #7
 800b732:	4617      	mov	r7, r2
 800b734:	260a      	movs	r6, #10
 800b736:	4694      	mov	ip, r2
 800b738:	fb91 f5f6 	sdiv	r5, r1, r6
 800b73c:	fb06 1415 	mls	r4, r6, r5, r1
 800b740:	3430      	adds	r4, #48	; 0x30
 800b742:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b746:	460c      	mov	r4, r1
 800b748:	2c63      	cmp	r4, #99	; 0x63
 800b74a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b74e:	4629      	mov	r1, r5
 800b750:	dcf1      	bgt.n	800b736 <__exponent+0x22>
 800b752:	3130      	adds	r1, #48	; 0x30
 800b754:	f1ac 0402 	sub.w	r4, ip, #2
 800b758:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b75c:	1c41      	adds	r1, r0, #1
 800b75e:	4622      	mov	r2, r4
 800b760:	42ba      	cmp	r2, r7
 800b762:	d30a      	bcc.n	800b77a <__exponent+0x66>
 800b764:	f10d 0209 	add.w	r2, sp, #9
 800b768:	eba2 020c 	sub.w	r2, r2, ip
 800b76c:	42bc      	cmp	r4, r7
 800b76e:	bf88      	it	hi
 800b770:	2200      	movhi	r2, #0
 800b772:	4413      	add	r3, r2
 800b774:	1a18      	subs	r0, r3, r0
 800b776:	b003      	add	sp, #12
 800b778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b77e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b782:	e7ed      	b.n	800b760 <__exponent+0x4c>
 800b784:	2330      	movs	r3, #48	; 0x30
 800b786:	3130      	adds	r1, #48	; 0x30
 800b788:	7083      	strb	r3, [r0, #2]
 800b78a:	70c1      	strb	r1, [r0, #3]
 800b78c:	1d03      	adds	r3, r0, #4
 800b78e:	e7f1      	b.n	800b774 <__exponent+0x60>

0800b790 <_printf_float>:
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	ed2d 8b02 	vpush	{d8}
 800b798:	b08d      	sub	sp, #52	; 0x34
 800b79a:	460c      	mov	r4, r1
 800b79c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	461f      	mov	r7, r3
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	f000 fce7 	bl	800c178 <_localeconv_r>
 800b7aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b7ae:	4650      	mov	r0, sl
 800b7b0:	f7f4 fd5e 	bl	8000270 <strlen>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	9305      	str	r3, [sp, #20]
 800b7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7c4:	3307      	adds	r3, #7
 800b7c6:	f023 0307 	bic.w	r3, r3, #7
 800b7ca:	f103 0208 	add.w	r2, r3, #8
 800b7ce:	f8c8 2000 	str.w	r2, [r8]
 800b7d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7e0:	ee08 0a10 	vmov	s16, r0
 800b7e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b7e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ec:	4b9e      	ldr	r3, [pc, #632]	; (800ba68 <_printf_float+0x2d8>)
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f2:	f7f5 f99b 	bl	8000b2c <__aeabi_dcmpun>
 800b7f6:	bb88      	cbnz	r0, 800b85c <_printf_float+0xcc>
 800b7f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7fc:	4b9a      	ldr	r3, [pc, #616]	; (800ba68 <_printf_float+0x2d8>)
 800b7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b802:	f7f5 f975 	bl	8000af0 <__aeabi_dcmple>
 800b806:	bb48      	cbnz	r0, 800b85c <_printf_float+0xcc>
 800b808:	2200      	movs	r2, #0
 800b80a:	2300      	movs	r3, #0
 800b80c:	4640      	mov	r0, r8
 800b80e:	4649      	mov	r1, r9
 800b810:	f7f5 f964 	bl	8000adc <__aeabi_dcmplt>
 800b814:	b110      	cbz	r0, 800b81c <_printf_float+0x8c>
 800b816:	232d      	movs	r3, #45	; 0x2d
 800b818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b81c:	4a93      	ldr	r2, [pc, #588]	; (800ba6c <_printf_float+0x2dc>)
 800b81e:	4b94      	ldr	r3, [pc, #592]	; (800ba70 <_printf_float+0x2e0>)
 800b820:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b824:	bf94      	ite	ls
 800b826:	4690      	movls	r8, r2
 800b828:	4698      	movhi	r8, r3
 800b82a:	2303      	movs	r3, #3
 800b82c:	6123      	str	r3, [r4, #16]
 800b82e:	9b05      	ldr	r3, [sp, #20]
 800b830:	f023 0304 	bic.w	r3, r3, #4
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	f04f 0900 	mov.w	r9, #0
 800b83a:	9700      	str	r7, [sp, #0]
 800b83c:	4633      	mov	r3, r6
 800b83e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b840:	4621      	mov	r1, r4
 800b842:	4628      	mov	r0, r5
 800b844:	f000 f9da 	bl	800bbfc <_printf_common>
 800b848:	3001      	adds	r0, #1
 800b84a:	f040 8090 	bne.w	800b96e <_printf_float+0x1de>
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295
 800b852:	b00d      	add	sp, #52	; 0x34
 800b854:	ecbd 8b02 	vpop	{d8}
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	4642      	mov	r2, r8
 800b85e:	464b      	mov	r3, r9
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	f7f5 f962 	bl	8000b2c <__aeabi_dcmpun>
 800b868:	b140      	cbz	r0, 800b87c <_printf_float+0xec>
 800b86a:	464b      	mov	r3, r9
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bfbc      	itt	lt
 800b870:	232d      	movlt	r3, #45	; 0x2d
 800b872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b876:	4a7f      	ldr	r2, [pc, #508]	; (800ba74 <_printf_float+0x2e4>)
 800b878:	4b7f      	ldr	r3, [pc, #508]	; (800ba78 <_printf_float+0x2e8>)
 800b87a:	e7d1      	b.n	800b820 <_printf_float+0x90>
 800b87c:	6863      	ldr	r3, [r4, #4]
 800b87e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b882:	9206      	str	r2, [sp, #24]
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	d13f      	bne.n	800b908 <_printf_float+0x178>
 800b888:	2306      	movs	r3, #6
 800b88a:	6063      	str	r3, [r4, #4]
 800b88c:	9b05      	ldr	r3, [sp, #20]
 800b88e:	6861      	ldr	r1, [r4, #4]
 800b890:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b894:	2300      	movs	r3, #0
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	ab0a      	add	r3, sp, #40	; 0x28
 800b89a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b89e:	ab09      	add	r3, sp, #36	; 0x24
 800b8a0:	ec49 8b10 	vmov	d0, r8, r9
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	6022      	str	r2, [r4, #0]
 800b8a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f7ff fecf 	bl	800b650 <__cvt>
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8b6:	2b47      	cmp	r3, #71	; 0x47
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	d108      	bne.n	800b8ce <_printf_float+0x13e>
 800b8bc:	1cc8      	adds	r0, r1, #3
 800b8be:	db02      	blt.n	800b8c6 <_printf_float+0x136>
 800b8c0:	6863      	ldr	r3, [r4, #4]
 800b8c2:	4299      	cmp	r1, r3
 800b8c4:	dd41      	ble.n	800b94a <_printf_float+0x1ba>
 800b8c6:	f1ab 0302 	sub.w	r3, fp, #2
 800b8ca:	fa5f fb83 	uxtb.w	fp, r3
 800b8ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8d2:	d820      	bhi.n	800b916 <_printf_float+0x186>
 800b8d4:	3901      	subs	r1, #1
 800b8d6:	465a      	mov	r2, fp
 800b8d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8dc:	9109      	str	r1, [sp, #36]	; 0x24
 800b8de:	f7ff ff19 	bl	800b714 <__exponent>
 800b8e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8e4:	1813      	adds	r3, r2, r0
 800b8e6:	2a01      	cmp	r2, #1
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	dc02      	bgt.n	800b8f4 <_printf_float+0x164>
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	07d2      	lsls	r2, r2, #31
 800b8f2:	d501      	bpl.n	800b8f8 <_printf_float+0x168>
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d09c      	beq.n	800b83a <_printf_float+0xaa>
 800b900:	232d      	movs	r3, #45	; 0x2d
 800b902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b906:	e798      	b.n	800b83a <_printf_float+0xaa>
 800b908:	9a06      	ldr	r2, [sp, #24]
 800b90a:	2a47      	cmp	r2, #71	; 0x47
 800b90c:	d1be      	bne.n	800b88c <_printf_float+0xfc>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1bc      	bne.n	800b88c <_printf_float+0xfc>
 800b912:	2301      	movs	r3, #1
 800b914:	e7b9      	b.n	800b88a <_printf_float+0xfa>
 800b916:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b91a:	d118      	bne.n	800b94e <_printf_float+0x1be>
 800b91c:	2900      	cmp	r1, #0
 800b91e:	6863      	ldr	r3, [r4, #4]
 800b920:	dd0b      	ble.n	800b93a <_printf_float+0x1aa>
 800b922:	6121      	str	r1, [r4, #16]
 800b924:	b913      	cbnz	r3, 800b92c <_printf_float+0x19c>
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	07d0      	lsls	r0, r2, #31
 800b92a:	d502      	bpl.n	800b932 <_printf_float+0x1a2>
 800b92c:	3301      	adds	r3, #1
 800b92e:	440b      	add	r3, r1
 800b930:	6123      	str	r3, [r4, #16]
 800b932:	65a1      	str	r1, [r4, #88]	; 0x58
 800b934:	f04f 0900 	mov.w	r9, #0
 800b938:	e7de      	b.n	800b8f8 <_printf_float+0x168>
 800b93a:	b913      	cbnz	r3, 800b942 <_printf_float+0x1b2>
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	07d2      	lsls	r2, r2, #31
 800b940:	d501      	bpl.n	800b946 <_printf_float+0x1b6>
 800b942:	3302      	adds	r3, #2
 800b944:	e7f4      	b.n	800b930 <_printf_float+0x1a0>
 800b946:	2301      	movs	r3, #1
 800b948:	e7f2      	b.n	800b930 <_printf_float+0x1a0>
 800b94a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b950:	4299      	cmp	r1, r3
 800b952:	db05      	blt.n	800b960 <_printf_float+0x1d0>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	6121      	str	r1, [r4, #16]
 800b958:	07d8      	lsls	r0, r3, #31
 800b95a:	d5ea      	bpl.n	800b932 <_printf_float+0x1a2>
 800b95c:	1c4b      	adds	r3, r1, #1
 800b95e:	e7e7      	b.n	800b930 <_printf_float+0x1a0>
 800b960:	2900      	cmp	r1, #0
 800b962:	bfd4      	ite	le
 800b964:	f1c1 0202 	rsble	r2, r1, #2
 800b968:	2201      	movgt	r2, #1
 800b96a:	4413      	add	r3, r2
 800b96c:	e7e0      	b.n	800b930 <_printf_float+0x1a0>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	055a      	lsls	r2, r3, #21
 800b972:	d407      	bmi.n	800b984 <_printf_float+0x1f4>
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	4642      	mov	r2, r8
 800b978:	4631      	mov	r1, r6
 800b97a:	4628      	mov	r0, r5
 800b97c:	47b8      	blx	r7
 800b97e:	3001      	adds	r0, #1
 800b980:	d12c      	bne.n	800b9dc <_printf_float+0x24c>
 800b982:	e764      	b.n	800b84e <_printf_float+0xbe>
 800b984:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b988:	f240 80e0 	bls.w	800bb4c <_printf_float+0x3bc>
 800b98c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b990:	2200      	movs	r2, #0
 800b992:	2300      	movs	r3, #0
 800b994:	f7f5 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d034      	beq.n	800ba06 <_printf_float+0x276>
 800b99c:	4a37      	ldr	r2, [pc, #220]	; (800ba7c <_printf_float+0x2ec>)
 800b99e:	2301      	movs	r3, #1
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	47b8      	blx	r7
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	f43f af51 	beq.w	800b84e <_printf_float+0xbe>
 800b9ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	db02      	blt.n	800b9ba <_printf_float+0x22a>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	07d8      	lsls	r0, r3, #31
 800b9b8:	d510      	bpl.n	800b9dc <_printf_float+0x24c>
 800b9ba:	ee18 3a10 	vmov	r3, s16
 800b9be:	4652      	mov	r2, sl
 800b9c0:	4631      	mov	r1, r6
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	47b8      	blx	r7
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	f43f af41 	beq.w	800b84e <_printf_float+0xbe>
 800b9cc:	f04f 0800 	mov.w	r8, #0
 800b9d0:	f104 091a 	add.w	r9, r4, #26
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	4543      	cmp	r3, r8
 800b9da:	dc09      	bgt.n	800b9f0 <_printf_float+0x260>
 800b9dc:	6823      	ldr	r3, [r4, #0]
 800b9de:	079b      	lsls	r3, r3, #30
 800b9e0:	f100 8107 	bmi.w	800bbf2 <_printf_float+0x462>
 800b9e4:	68e0      	ldr	r0, [r4, #12]
 800b9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e8:	4298      	cmp	r0, r3
 800b9ea:	bfb8      	it	lt
 800b9ec:	4618      	movlt	r0, r3
 800b9ee:	e730      	b.n	800b852 <_printf_float+0xc2>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	464a      	mov	r2, r9
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b8      	blx	r7
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	f43f af27 	beq.w	800b84e <_printf_float+0xbe>
 800ba00:	f108 0801 	add.w	r8, r8, #1
 800ba04:	e7e6      	b.n	800b9d4 <_printf_float+0x244>
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	dc39      	bgt.n	800ba80 <_printf_float+0x2f0>
 800ba0c:	4a1b      	ldr	r2, [pc, #108]	; (800ba7c <_printf_float+0x2ec>)
 800ba0e:	2301      	movs	r3, #1
 800ba10:	4631      	mov	r1, r6
 800ba12:	4628      	mov	r0, r5
 800ba14:	47b8      	blx	r7
 800ba16:	3001      	adds	r0, #1
 800ba18:	f43f af19 	beq.w	800b84e <_printf_float+0xbe>
 800ba1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba20:	4313      	orrs	r3, r2
 800ba22:	d102      	bne.n	800ba2a <_printf_float+0x29a>
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	07d9      	lsls	r1, r3, #31
 800ba28:	d5d8      	bpl.n	800b9dc <_printf_float+0x24c>
 800ba2a:	ee18 3a10 	vmov	r3, s16
 800ba2e:	4652      	mov	r2, sl
 800ba30:	4631      	mov	r1, r6
 800ba32:	4628      	mov	r0, r5
 800ba34:	47b8      	blx	r7
 800ba36:	3001      	adds	r0, #1
 800ba38:	f43f af09 	beq.w	800b84e <_printf_float+0xbe>
 800ba3c:	f04f 0900 	mov.w	r9, #0
 800ba40:	f104 0a1a 	add.w	sl, r4, #26
 800ba44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba46:	425b      	negs	r3, r3
 800ba48:	454b      	cmp	r3, r9
 800ba4a:	dc01      	bgt.n	800ba50 <_printf_float+0x2c0>
 800ba4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba4e:	e792      	b.n	800b976 <_printf_float+0x1e6>
 800ba50:	2301      	movs	r3, #1
 800ba52:	4652      	mov	r2, sl
 800ba54:	4631      	mov	r1, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b8      	blx	r7
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	f43f aef7 	beq.w	800b84e <_printf_float+0xbe>
 800ba60:	f109 0901 	add.w	r9, r9, #1
 800ba64:	e7ee      	b.n	800ba44 <_printf_float+0x2b4>
 800ba66:	bf00      	nop
 800ba68:	7fefffff 	.word	0x7fefffff
 800ba6c:	0800e687 	.word	0x0800e687
 800ba70:	0800e68b 	.word	0x0800e68b
 800ba74:	0800e68f 	.word	0x0800e68f
 800ba78:	0800e693 	.word	0x0800e693
 800ba7c:	0800e697 	.word	0x0800e697
 800ba80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba84:	429a      	cmp	r2, r3
 800ba86:	bfa8      	it	ge
 800ba88:	461a      	movge	r2, r3
 800ba8a:	2a00      	cmp	r2, #0
 800ba8c:	4691      	mov	r9, r2
 800ba8e:	dc37      	bgt.n	800bb00 <_printf_float+0x370>
 800ba90:	f04f 0b00 	mov.w	fp, #0
 800ba94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba98:	f104 021a 	add.w	r2, r4, #26
 800ba9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	eba3 0309 	sub.w	r3, r3, r9
 800baa4:	455b      	cmp	r3, fp
 800baa6:	dc33      	bgt.n	800bb10 <_printf_float+0x380>
 800baa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baac:	429a      	cmp	r2, r3
 800baae:	db3b      	blt.n	800bb28 <_printf_float+0x398>
 800bab0:	6823      	ldr	r3, [r4, #0]
 800bab2:	07da      	lsls	r2, r3, #31
 800bab4:	d438      	bmi.n	800bb28 <_printf_float+0x398>
 800bab6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800baba:	eba2 0903 	sub.w	r9, r2, r3
 800babe:	9b05      	ldr	r3, [sp, #20]
 800bac0:	1ad2      	subs	r2, r2, r3
 800bac2:	4591      	cmp	r9, r2
 800bac4:	bfa8      	it	ge
 800bac6:	4691      	movge	r9, r2
 800bac8:	f1b9 0f00 	cmp.w	r9, #0
 800bacc:	dc35      	bgt.n	800bb3a <_printf_float+0x3aa>
 800bace:	f04f 0800 	mov.w	r8, #0
 800bad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bad6:	f104 0a1a 	add.w	sl, r4, #26
 800bada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bade:	1a9b      	subs	r3, r3, r2
 800bae0:	eba3 0309 	sub.w	r3, r3, r9
 800bae4:	4543      	cmp	r3, r8
 800bae6:	f77f af79 	ble.w	800b9dc <_printf_float+0x24c>
 800baea:	2301      	movs	r3, #1
 800baec:	4652      	mov	r2, sl
 800baee:	4631      	mov	r1, r6
 800baf0:	4628      	mov	r0, r5
 800baf2:	47b8      	blx	r7
 800baf4:	3001      	adds	r0, #1
 800baf6:	f43f aeaa 	beq.w	800b84e <_printf_float+0xbe>
 800bafa:	f108 0801 	add.w	r8, r8, #1
 800bafe:	e7ec      	b.n	800bada <_printf_float+0x34a>
 800bb00:	4613      	mov	r3, r2
 800bb02:	4631      	mov	r1, r6
 800bb04:	4642      	mov	r2, r8
 800bb06:	4628      	mov	r0, r5
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	d1c0      	bne.n	800ba90 <_printf_float+0x300>
 800bb0e:	e69e      	b.n	800b84e <_printf_float+0xbe>
 800bb10:	2301      	movs	r3, #1
 800bb12:	4631      	mov	r1, r6
 800bb14:	4628      	mov	r0, r5
 800bb16:	9205      	str	r2, [sp, #20]
 800bb18:	47b8      	blx	r7
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	f43f ae97 	beq.w	800b84e <_printf_float+0xbe>
 800bb20:	9a05      	ldr	r2, [sp, #20]
 800bb22:	f10b 0b01 	add.w	fp, fp, #1
 800bb26:	e7b9      	b.n	800ba9c <_printf_float+0x30c>
 800bb28:	ee18 3a10 	vmov	r3, s16
 800bb2c:	4652      	mov	r2, sl
 800bb2e:	4631      	mov	r1, r6
 800bb30:	4628      	mov	r0, r5
 800bb32:	47b8      	blx	r7
 800bb34:	3001      	adds	r0, #1
 800bb36:	d1be      	bne.n	800bab6 <_printf_float+0x326>
 800bb38:	e689      	b.n	800b84e <_printf_float+0xbe>
 800bb3a:	9a05      	ldr	r2, [sp, #20]
 800bb3c:	464b      	mov	r3, r9
 800bb3e:	4442      	add	r2, r8
 800bb40:	4631      	mov	r1, r6
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b8      	blx	r7
 800bb46:	3001      	adds	r0, #1
 800bb48:	d1c1      	bne.n	800bace <_printf_float+0x33e>
 800bb4a:	e680      	b.n	800b84e <_printf_float+0xbe>
 800bb4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb4e:	2a01      	cmp	r2, #1
 800bb50:	dc01      	bgt.n	800bb56 <_printf_float+0x3c6>
 800bb52:	07db      	lsls	r3, r3, #31
 800bb54:	d53a      	bpl.n	800bbcc <_printf_float+0x43c>
 800bb56:	2301      	movs	r3, #1
 800bb58:	4642      	mov	r2, r8
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b8      	blx	r7
 800bb60:	3001      	adds	r0, #1
 800bb62:	f43f ae74 	beq.w	800b84e <_printf_float+0xbe>
 800bb66:	ee18 3a10 	vmov	r3, s16
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4628      	mov	r0, r5
 800bb70:	47b8      	blx	r7
 800bb72:	3001      	adds	r0, #1
 800bb74:	f43f ae6b 	beq.w	800b84e <_printf_float+0xbe>
 800bb78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bb84:	f7f4 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb88:	b9d8      	cbnz	r0, 800bbc2 <_printf_float+0x432>
 800bb8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bb8e:	f108 0201 	add.w	r2, r8, #1
 800bb92:	4631      	mov	r1, r6
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b8      	blx	r7
 800bb98:	3001      	adds	r0, #1
 800bb9a:	d10e      	bne.n	800bbba <_printf_float+0x42a>
 800bb9c:	e657      	b.n	800b84e <_printf_float+0xbe>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	4652      	mov	r2, sl
 800bba2:	4631      	mov	r1, r6
 800bba4:	4628      	mov	r0, r5
 800bba6:	47b8      	blx	r7
 800bba8:	3001      	adds	r0, #1
 800bbaa:	f43f ae50 	beq.w	800b84e <_printf_float+0xbe>
 800bbae:	f108 0801 	add.w	r8, r8, #1
 800bbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	4543      	cmp	r3, r8
 800bbb8:	dcf1      	bgt.n	800bb9e <_printf_float+0x40e>
 800bbba:	464b      	mov	r3, r9
 800bbbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbc0:	e6da      	b.n	800b978 <_printf_float+0x1e8>
 800bbc2:	f04f 0800 	mov.w	r8, #0
 800bbc6:	f104 0a1a 	add.w	sl, r4, #26
 800bbca:	e7f2      	b.n	800bbb2 <_printf_float+0x422>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	4642      	mov	r2, r8
 800bbd0:	e7df      	b.n	800bb92 <_printf_float+0x402>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	464a      	mov	r2, r9
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4628      	mov	r0, r5
 800bbda:	47b8      	blx	r7
 800bbdc:	3001      	adds	r0, #1
 800bbde:	f43f ae36 	beq.w	800b84e <_printf_float+0xbe>
 800bbe2:	f108 0801 	add.w	r8, r8, #1
 800bbe6:	68e3      	ldr	r3, [r4, #12]
 800bbe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbea:	1a5b      	subs	r3, r3, r1
 800bbec:	4543      	cmp	r3, r8
 800bbee:	dcf0      	bgt.n	800bbd2 <_printf_float+0x442>
 800bbf0:	e6f8      	b.n	800b9e4 <_printf_float+0x254>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	f104 0919 	add.w	r9, r4, #25
 800bbfa:	e7f4      	b.n	800bbe6 <_printf_float+0x456>

0800bbfc <_printf_common>:
 800bbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc00:	4616      	mov	r6, r2
 800bc02:	4699      	mov	r9, r3
 800bc04:	688a      	ldr	r2, [r1, #8]
 800bc06:	690b      	ldr	r3, [r1, #16]
 800bc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	bfb8      	it	lt
 800bc10:	4613      	movlt	r3, r2
 800bc12:	6033      	str	r3, [r6, #0]
 800bc14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc18:	4607      	mov	r7, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	b10a      	cbz	r2, 800bc22 <_printf_common+0x26>
 800bc1e:	3301      	adds	r3, #1
 800bc20:	6033      	str	r3, [r6, #0]
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	0699      	lsls	r1, r3, #26
 800bc26:	bf42      	ittt	mi
 800bc28:	6833      	ldrmi	r3, [r6, #0]
 800bc2a:	3302      	addmi	r3, #2
 800bc2c:	6033      	strmi	r3, [r6, #0]
 800bc2e:	6825      	ldr	r5, [r4, #0]
 800bc30:	f015 0506 	ands.w	r5, r5, #6
 800bc34:	d106      	bne.n	800bc44 <_printf_common+0x48>
 800bc36:	f104 0a19 	add.w	sl, r4, #25
 800bc3a:	68e3      	ldr	r3, [r4, #12]
 800bc3c:	6832      	ldr	r2, [r6, #0]
 800bc3e:	1a9b      	subs	r3, r3, r2
 800bc40:	42ab      	cmp	r3, r5
 800bc42:	dc26      	bgt.n	800bc92 <_printf_common+0x96>
 800bc44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc48:	1e13      	subs	r3, r2, #0
 800bc4a:	6822      	ldr	r2, [r4, #0]
 800bc4c:	bf18      	it	ne
 800bc4e:	2301      	movne	r3, #1
 800bc50:	0692      	lsls	r2, r2, #26
 800bc52:	d42b      	bmi.n	800bcac <_printf_common+0xb0>
 800bc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc58:	4649      	mov	r1, r9
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	47c0      	blx	r8
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d01e      	beq.n	800bca0 <_printf_common+0xa4>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	6922      	ldr	r2, [r4, #16]
 800bc66:	f003 0306 	and.w	r3, r3, #6
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	bf02      	ittt	eq
 800bc6e:	68e5      	ldreq	r5, [r4, #12]
 800bc70:	6833      	ldreq	r3, [r6, #0]
 800bc72:	1aed      	subeq	r5, r5, r3
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	bf0c      	ite	eq
 800bc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc7c:	2500      	movne	r5, #0
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	bfc4      	itt	gt
 800bc82:	1a9b      	subgt	r3, r3, r2
 800bc84:	18ed      	addgt	r5, r5, r3
 800bc86:	2600      	movs	r6, #0
 800bc88:	341a      	adds	r4, #26
 800bc8a:	42b5      	cmp	r5, r6
 800bc8c:	d11a      	bne.n	800bcc4 <_printf_common+0xc8>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e008      	b.n	800bca4 <_printf_common+0xa8>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4652      	mov	r2, sl
 800bc96:	4649      	mov	r1, r9
 800bc98:	4638      	mov	r0, r7
 800bc9a:	47c0      	blx	r8
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	d103      	bne.n	800bca8 <_printf_common+0xac>
 800bca0:	f04f 30ff 	mov.w	r0, #4294967295
 800bca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca8:	3501      	adds	r5, #1
 800bcaa:	e7c6      	b.n	800bc3a <_printf_common+0x3e>
 800bcac:	18e1      	adds	r1, r4, r3
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	2030      	movs	r0, #48	; 0x30
 800bcb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcb6:	4422      	add	r2, r4
 800bcb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcc0:	3302      	adds	r3, #2
 800bcc2:	e7c7      	b.n	800bc54 <_printf_common+0x58>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	4649      	mov	r1, r9
 800bcca:	4638      	mov	r0, r7
 800bccc:	47c0      	blx	r8
 800bcce:	3001      	adds	r0, #1
 800bcd0:	d0e6      	beq.n	800bca0 <_printf_common+0xa4>
 800bcd2:	3601      	adds	r6, #1
 800bcd4:	e7d9      	b.n	800bc8a <_printf_common+0x8e>
	...

0800bcd8 <_printf_i>:
 800bcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	7e0f      	ldrb	r7, [r1, #24]
 800bcde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bce0:	2f78      	cmp	r7, #120	; 0x78
 800bce2:	4691      	mov	r9, r2
 800bce4:	4680      	mov	r8, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	469a      	mov	sl, r3
 800bcea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcee:	d807      	bhi.n	800bd00 <_printf_i+0x28>
 800bcf0:	2f62      	cmp	r7, #98	; 0x62
 800bcf2:	d80a      	bhi.n	800bd0a <_printf_i+0x32>
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	f000 80d4 	beq.w	800bea2 <_printf_i+0x1ca>
 800bcfa:	2f58      	cmp	r7, #88	; 0x58
 800bcfc:	f000 80c0 	beq.w	800be80 <_printf_i+0x1a8>
 800bd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd08:	e03a      	b.n	800bd80 <_printf_i+0xa8>
 800bd0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd0e:	2b15      	cmp	r3, #21
 800bd10:	d8f6      	bhi.n	800bd00 <_printf_i+0x28>
 800bd12:	a101      	add	r1, pc, #4	; (adr r1, 800bd18 <_printf_i+0x40>)
 800bd14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd18:	0800bd71 	.word	0x0800bd71
 800bd1c:	0800bd85 	.word	0x0800bd85
 800bd20:	0800bd01 	.word	0x0800bd01
 800bd24:	0800bd01 	.word	0x0800bd01
 800bd28:	0800bd01 	.word	0x0800bd01
 800bd2c:	0800bd01 	.word	0x0800bd01
 800bd30:	0800bd85 	.word	0x0800bd85
 800bd34:	0800bd01 	.word	0x0800bd01
 800bd38:	0800bd01 	.word	0x0800bd01
 800bd3c:	0800bd01 	.word	0x0800bd01
 800bd40:	0800bd01 	.word	0x0800bd01
 800bd44:	0800be89 	.word	0x0800be89
 800bd48:	0800bdb1 	.word	0x0800bdb1
 800bd4c:	0800be43 	.word	0x0800be43
 800bd50:	0800bd01 	.word	0x0800bd01
 800bd54:	0800bd01 	.word	0x0800bd01
 800bd58:	0800beab 	.word	0x0800beab
 800bd5c:	0800bd01 	.word	0x0800bd01
 800bd60:	0800bdb1 	.word	0x0800bdb1
 800bd64:	0800bd01 	.word	0x0800bd01
 800bd68:	0800bd01 	.word	0x0800bd01
 800bd6c:	0800be4b 	.word	0x0800be4b
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	602a      	str	r2, [r5, #0]
 800bd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd80:	2301      	movs	r3, #1
 800bd82:	e09f      	b.n	800bec4 <_printf_i+0x1ec>
 800bd84:	6820      	ldr	r0, [r4, #0]
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	0607      	lsls	r7, r0, #24
 800bd8a:	f103 0104 	add.w	r1, r3, #4
 800bd8e:	6029      	str	r1, [r5, #0]
 800bd90:	d501      	bpl.n	800bd96 <_printf_i+0xbe>
 800bd92:	681e      	ldr	r6, [r3, #0]
 800bd94:	e003      	b.n	800bd9e <_printf_i+0xc6>
 800bd96:	0646      	lsls	r6, r0, #25
 800bd98:	d5fb      	bpl.n	800bd92 <_printf_i+0xba>
 800bd9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd9e:	2e00      	cmp	r6, #0
 800bda0:	da03      	bge.n	800bdaa <_printf_i+0xd2>
 800bda2:	232d      	movs	r3, #45	; 0x2d
 800bda4:	4276      	negs	r6, r6
 800bda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdaa:	485a      	ldr	r0, [pc, #360]	; (800bf14 <_printf_i+0x23c>)
 800bdac:	230a      	movs	r3, #10
 800bdae:	e012      	b.n	800bdd6 <_printf_i+0xfe>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	1d19      	adds	r1, r3, #4
 800bdb6:	6029      	str	r1, [r5, #0]
 800bdb8:	0605      	lsls	r5, r0, #24
 800bdba:	d501      	bpl.n	800bdc0 <_printf_i+0xe8>
 800bdbc:	681e      	ldr	r6, [r3, #0]
 800bdbe:	e002      	b.n	800bdc6 <_printf_i+0xee>
 800bdc0:	0641      	lsls	r1, r0, #25
 800bdc2:	d5fb      	bpl.n	800bdbc <_printf_i+0xe4>
 800bdc4:	881e      	ldrh	r6, [r3, #0]
 800bdc6:	4853      	ldr	r0, [pc, #332]	; (800bf14 <_printf_i+0x23c>)
 800bdc8:	2f6f      	cmp	r7, #111	; 0x6f
 800bdca:	bf0c      	ite	eq
 800bdcc:	2308      	moveq	r3, #8
 800bdce:	230a      	movne	r3, #10
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdd6:	6865      	ldr	r5, [r4, #4]
 800bdd8:	60a5      	str	r5, [r4, #8]
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	bfa2      	ittt	ge
 800bdde:	6821      	ldrge	r1, [r4, #0]
 800bde0:	f021 0104 	bicge.w	r1, r1, #4
 800bde4:	6021      	strge	r1, [r4, #0]
 800bde6:	b90e      	cbnz	r6, 800bdec <_printf_i+0x114>
 800bde8:	2d00      	cmp	r5, #0
 800bdea:	d04b      	beq.n	800be84 <_printf_i+0x1ac>
 800bdec:	4615      	mov	r5, r2
 800bdee:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdf2:	fb03 6711 	mls	r7, r3, r1, r6
 800bdf6:	5dc7      	ldrb	r7, [r0, r7]
 800bdf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdfc:	4637      	mov	r7, r6
 800bdfe:	42bb      	cmp	r3, r7
 800be00:	460e      	mov	r6, r1
 800be02:	d9f4      	bls.n	800bdee <_printf_i+0x116>
 800be04:	2b08      	cmp	r3, #8
 800be06:	d10b      	bne.n	800be20 <_printf_i+0x148>
 800be08:	6823      	ldr	r3, [r4, #0]
 800be0a:	07de      	lsls	r6, r3, #31
 800be0c:	d508      	bpl.n	800be20 <_printf_i+0x148>
 800be0e:	6923      	ldr	r3, [r4, #16]
 800be10:	6861      	ldr	r1, [r4, #4]
 800be12:	4299      	cmp	r1, r3
 800be14:	bfde      	ittt	le
 800be16:	2330      	movle	r3, #48	; 0x30
 800be18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be20:	1b52      	subs	r2, r2, r5
 800be22:	6122      	str	r2, [r4, #16]
 800be24:	f8cd a000 	str.w	sl, [sp]
 800be28:	464b      	mov	r3, r9
 800be2a:	aa03      	add	r2, sp, #12
 800be2c:	4621      	mov	r1, r4
 800be2e:	4640      	mov	r0, r8
 800be30:	f7ff fee4 	bl	800bbfc <_printf_common>
 800be34:	3001      	adds	r0, #1
 800be36:	d14a      	bne.n	800bece <_printf_i+0x1f6>
 800be38:	f04f 30ff 	mov.w	r0, #4294967295
 800be3c:	b004      	add	sp, #16
 800be3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	f043 0320 	orr.w	r3, r3, #32
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	4833      	ldr	r0, [pc, #204]	; (800bf18 <_printf_i+0x240>)
 800be4c:	2778      	movs	r7, #120	; 0x78
 800be4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	6829      	ldr	r1, [r5, #0]
 800be56:	061f      	lsls	r7, r3, #24
 800be58:	f851 6b04 	ldr.w	r6, [r1], #4
 800be5c:	d402      	bmi.n	800be64 <_printf_i+0x18c>
 800be5e:	065f      	lsls	r7, r3, #25
 800be60:	bf48      	it	mi
 800be62:	b2b6      	uxthmi	r6, r6
 800be64:	07df      	lsls	r7, r3, #31
 800be66:	bf48      	it	mi
 800be68:	f043 0320 	orrmi.w	r3, r3, #32
 800be6c:	6029      	str	r1, [r5, #0]
 800be6e:	bf48      	it	mi
 800be70:	6023      	strmi	r3, [r4, #0]
 800be72:	b91e      	cbnz	r6, 800be7c <_printf_i+0x1a4>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	f023 0320 	bic.w	r3, r3, #32
 800be7a:	6023      	str	r3, [r4, #0]
 800be7c:	2310      	movs	r3, #16
 800be7e:	e7a7      	b.n	800bdd0 <_printf_i+0xf8>
 800be80:	4824      	ldr	r0, [pc, #144]	; (800bf14 <_printf_i+0x23c>)
 800be82:	e7e4      	b.n	800be4e <_printf_i+0x176>
 800be84:	4615      	mov	r5, r2
 800be86:	e7bd      	b.n	800be04 <_printf_i+0x12c>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	6826      	ldr	r6, [r4, #0]
 800be8c:	6961      	ldr	r1, [r4, #20]
 800be8e:	1d18      	adds	r0, r3, #4
 800be90:	6028      	str	r0, [r5, #0]
 800be92:	0635      	lsls	r5, r6, #24
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	d501      	bpl.n	800be9c <_printf_i+0x1c4>
 800be98:	6019      	str	r1, [r3, #0]
 800be9a:	e002      	b.n	800bea2 <_printf_i+0x1ca>
 800be9c:	0670      	lsls	r0, r6, #25
 800be9e:	d5fb      	bpl.n	800be98 <_printf_i+0x1c0>
 800bea0:	8019      	strh	r1, [r3, #0]
 800bea2:	2300      	movs	r3, #0
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	4615      	mov	r5, r2
 800bea8:	e7bc      	b.n	800be24 <_printf_i+0x14c>
 800beaa:	682b      	ldr	r3, [r5, #0]
 800beac:	1d1a      	adds	r2, r3, #4
 800beae:	602a      	str	r2, [r5, #0]
 800beb0:	681d      	ldr	r5, [r3, #0]
 800beb2:	6862      	ldr	r2, [r4, #4]
 800beb4:	2100      	movs	r1, #0
 800beb6:	4628      	mov	r0, r5
 800beb8:	f7f4 f98a 	bl	80001d0 <memchr>
 800bebc:	b108      	cbz	r0, 800bec2 <_printf_i+0x1ea>
 800bebe:	1b40      	subs	r0, r0, r5
 800bec0:	6060      	str	r0, [r4, #4]
 800bec2:	6863      	ldr	r3, [r4, #4]
 800bec4:	6123      	str	r3, [r4, #16]
 800bec6:	2300      	movs	r3, #0
 800bec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800becc:	e7aa      	b.n	800be24 <_printf_i+0x14c>
 800bece:	6923      	ldr	r3, [r4, #16]
 800bed0:	462a      	mov	r2, r5
 800bed2:	4649      	mov	r1, r9
 800bed4:	4640      	mov	r0, r8
 800bed6:	47d0      	blx	sl
 800bed8:	3001      	adds	r0, #1
 800beda:	d0ad      	beq.n	800be38 <_printf_i+0x160>
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	079b      	lsls	r3, r3, #30
 800bee0:	d413      	bmi.n	800bf0a <_printf_i+0x232>
 800bee2:	68e0      	ldr	r0, [r4, #12]
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	4298      	cmp	r0, r3
 800bee8:	bfb8      	it	lt
 800beea:	4618      	movlt	r0, r3
 800beec:	e7a6      	b.n	800be3c <_printf_i+0x164>
 800beee:	2301      	movs	r3, #1
 800bef0:	4632      	mov	r2, r6
 800bef2:	4649      	mov	r1, r9
 800bef4:	4640      	mov	r0, r8
 800bef6:	47d0      	blx	sl
 800bef8:	3001      	adds	r0, #1
 800befa:	d09d      	beq.n	800be38 <_printf_i+0x160>
 800befc:	3501      	adds	r5, #1
 800befe:	68e3      	ldr	r3, [r4, #12]
 800bf00:	9903      	ldr	r1, [sp, #12]
 800bf02:	1a5b      	subs	r3, r3, r1
 800bf04:	42ab      	cmp	r3, r5
 800bf06:	dcf2      	bgt.n	800beee <_printf_i+0x216>
 800bf08:	e7eb      	b.n	800bee2 <_printf_i+0x20a>
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	f104 0619 	add.w	r6, r4, #25
 800bf10:	e7f5      	b.n	800befe <_printf_i+0x226>
 800bf12:	bf00      	nop
 800bf14:	0800e699 	.word	0x0800e699
 800bf18:	0800e6aa 	.word	0x0800e6aa

0800bf1c <std>:
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	b510      	push	{r4, lr}
 800bf20:	4604      	mov	r4, r0
 800bf22:	e9c0 3300 	strd	r3, r3, [r0]
 800bf26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf2a:	6083      	str	r3, [r0, #8]
 800bf2c:	8181      	strh	r1, [r0, #12]
 800bf2e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf30:	81c2      	strh	r2, [r0, #14]
 800bf32:	6183      	str	r3, [r0, #24]
 800bf34:	4619      	mov	r1, r3
 800bf36:	2208      	movs	r2, #8
 800bf38:	305c      	adds	r0, #92	; 0x5c
 800bf3a:	f000 f914 	bl	800c166 <memset>
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	; (800bf74 <std+0x58>)
 800bf40:	6263      	str	r3, [r4, #36]	; 0x24
 800bf42:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <std+0x5c>)
 800bf44:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf46:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <std+0x60>)
 800bf48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf4a:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <std+0x64>)
 800bf4c:	6323      	str	r3, [r4, #48]	; 0x30
 800bf4e:	4b0d      	ldr	r3, [pc, #52]	; (800bf84 <std+0x68>)
 800bf50:	6224      	str	r4, [r4, #32]
 800bf52:	429c      	cmp	r4, r3
 800bf54:	d006      	beq.n	800bf64 <std+0x48>
 800bf56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf5a:	4294      	cmp	r4, r2
 800bf5c:	d002      	beq.n	800bf64 <std+0x48>
 800bf5e:	33d0      	adds	r3, #208	; 0xd0
 800bf60:	429c      	cmp	r4, r3
 800bf62:	d105      	bne.n	800bf70 <std+0x54>
 800bf64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf6c:	f000 b978 	b.w	800c260 <__retarget_lock_init_recursive>
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	bf00      	nop
 800bf74:	0800c0e1 	.word	0x0800c0e1
 800bf78:	0800c103 	.word	0x0800c103
 800bf7c:	0800c13b 	.word	0x0800c13b
 800bf80:	0800c15f 	.word	0x0800c15f
 800bf84:	20000eb4 	.word	0x20000eb4

0800bf88 <stdio_exit_handler>:
 800bf88:	4a02      	ldr	r2, [pc, #8]	; (800bf94 <stdio_exit_handler+0xc>)
 800bf8a:	4903      	ldr	r1, [pc, #12]	; (800bf98 <stdio_exit_handler+0x10>)
 800bf8c:	4803      	ldr	r0, [pc, #12]	; (800bf9c <stdio_exit_handler+0x14>)
 800bf8e:	f000 b869 	b.w	800c064 <_fwalk_sglue>
 800bf92:	bf00      	nop
 800bf94:	20000024 	.word	0x20000024
 800bf98:	0800dc69 	.word	0x0800dc69
 800bf9c:	20000030 	.word	0x20000030

0800bfa0 <cleanup_stdio>:
 800bfa0:	6841      	ldr	r1, [r0, #4]
 800bfa2:	4b0c      	ldr	r3, [pc, #48]	; (800bfd4 <cleanup_stdio+0x34>)
 800bfa4:	4299      	cmp	r1, r3
 800bfa6:	b510      	push	{r4, lr}
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	d001      	beq.n	800bfb0 <cleanup_stdio+0x10>
 800bfac:	f001 fe5c 	bl	800dc68 <_fflush_r>
 800bfb0:	68a1      	ldr	r1, [r4, #8]
 800bfb2:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <cleanup_stdio+0x38>)
 800bfb4:	4299      	cmp	r1, r3
 800bfb6:	d002      	beq.n	800bfbe <cleanup_stdio+0x1e>
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f001 fe55 	bl	800dc68 <_fflush_r>
 800bfbe:	68e1      	ldr	r1, [r4, #12]
 800bfc0:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <cleanup_stdio+0x3c>)
 800bfc2:	4299      	cmp	r1, r3
 800bfc4:	d004      	beq.n	800bfd0 <cleanup_stdio+0x30>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfcc:	f001 be4c 	b.w	800dc68 <_fflush_r>
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000eb4 	.word	0x20000eb4
 800bfd8:	20000f1c 	.word	0x20000f1c
 800bfdc:	20000f84 	.word	0x20000f84

0800bfe0 <global_stdio_init.part.0>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	4b0b      	ldr	r3, [pc, #44]	; (800c010 <global_stdio_init.part.0+0x30>)
 800bfe4:	4c0b      	ldr	r4, [pc, #44]	; (800c014 <global_stdio_init.part.0+0x34>)
 800bfe6:	4a0c      	ldr	r2, [pc, #48]	; (800c018 <global_stdio_init.part.0+0x38>)
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	4620      	mov	r0, r4
 800bfec:	2200      	movs	r2, #0
 800bfee:	2104      	movs	r1, #4
 800bff0:	f7ff ff94 	bl	800bf1c <std>
 800bff4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bff8:	2201      	movs	r2, #1
 800bffa:	2109      	movs	r1, #9
 800bffc:	f7ff ff8e 	bl	800bf1c <std>
 800c000:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c004:	2202      	movs	r2, #2
 800c006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c00a:	2112      	movs	r1, #18
 800c00c:	f7ff bf86 	b.w	800bf1c <std>
 800c010:	20000fec 	.word	0x20000fec
 800c014:	20000eb4 	.word	0x20000eb4
 800c018:	0800bf89 	.word	0x0800bf89

0800c01c <__sfp_lock_acquire>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__sfp_lock_acquire+0x8>)
 800c01e:	f000 b920 	b.w	800c262 <__retarget_lock_acquire_recursive>
 800c022:	bf00      	nop
 800c024:	20000ff5 	.word	0x20000ff5

0800c028 <__sfp_lock_release>:
 800c028:	4801      	ldr	r0, [pc, #4]	; (800c030 <__sfp_lock_release+0x8>)
 800c02a:	f000 b91b 	b.w	800c264 <__retarget_lock_release_recursive>
 800c02e:	bf00      	nop
 800c030:	20000ff5 	.word	0x20000ff5

0800c034 <__sinit>:
 800c034:	b510      	push	{r4, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	f7ff fff0 	bl	800c01c <__sfp_lock_acquire>
 800c03c:	6a23      	ldr	r3, [r4, #32]
 800c03e:	b11b      	cbz	r3, 800c048 <__sinit+0x14>
 800c040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c044:	f7ff bff0 	b.w	800c028 <__sfp_lock_release>
 800c048:	4b04      	ldr	r3, [pc, #16]	; (800c05c <__sinit+0x28>)
 800c04a:	6223      	str	r3, [r4, #32]
 800c04c:	4b04      	ldr	r3, [pc, #16]	; (800c060 <__sinit+0x2c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f5      	bne.n	800c040 <__sinit+0xc>
 800c054:	f7ff ffc4 	bl	800bfe0 <global_stdio_init.part.0>
 800c058:	e7f2      	b.n	800c040 <__sinit+0xc>
 800c05a:	bf00      	nop
 800c05c:	0800bfa1 	.word	0x0800bfa1
 800c060:	20000fec 	.word	0x20000fec

0800c064 <_fwalk_sglue>:
 800c064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c068:	4607      	mov	r7, r0
 800c06a:	4688      	mov	r8, r1
 800c06c:	4614      	mov	r4, r2
 800c06e:	2600      	movs	r6, #0
 800c070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c074:	f1b9 0901 	subs.w	r9, r9, #1
 800c078:	d505      	bpl.n	800c086 <_fwalk_sglue+0x22>
 800c07a:	6824      	ldr	r4, [r4, #0]
 800c07c:	2c00      	cmp	r4, #0
 800c07e:	d1f7      	bne.n	800c070 <_fwalk_sglue+0xc>
 800c080:	4630      	mov	r0, r6
 800c082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c086:	89ab      	ldrh	r3, [r5, #12]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d907      	bls.n	800c09c <_fwalk_sglue+0x38>
 800c08c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c090:	3301      	adds	r3, #1
 800c092:	d003      	beq.n	800c09c <_fwalk_sglue+0x38>
 800c094:	4629      	mov	r1, r5
 800c096:	4638      	mov	r0, r7
 800c098:	47c0      	blx	r8
 800c09a:	4306      	orrs	r6, r0
 800c09c:	3568      	adds	r5, #104	; 0x68
 800c09e:	e7e9      	b.n	800c074 <_fwalk_sglue+0x10>

0800c0a0 <siprintf>:
 800c0a0:	b40e      	push	{r1, r2, r3}
 800c0a2:	b500      	push	{lr}
 800c0a4:	b09c      	sub	sp, #112	; 0x70
 800c0a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c0a8:	9002      	str	r0, [sp, #8]
 800c0aa:	9006      	str	r0, [sp, #24]
 800c0ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0b0:	4809      	ldr	r0, [pc, #36]	; (800c0d8 <siprintf+0x38>)
 800c0b2:	9107      	str	r1, [sp, #28]
 800c0b4:	9104      	str	r1, [sp, #16]
 800c0b6:	4909      	ldr	r1, [pc, #36]	; (800c0dc <siprintf+0x3c>)
 800c0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0bc:	9105      	str	r1, [sp, #20]
 800c0be:	6800      	ldr	r0, [r0, #0]
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	a902      	add	r1, sp, #8
 800c0c4:	f001 fc4c 	bl	800d960 <_svfiprintf_r>
 800c0c8:	9b02      	ldr	r3, [sp, #8]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	b01c      	add	sp, #112	; 0x70
 800c0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0d4:	b003      	add	sp, #12
 800c0d6:	4770      	bx	lr
 800c0d8:	2000007c 	.word	0x2000007c
 800c0dc:	ffff0208 	.word	0xffff0208

0800c0e0 <__sread>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e8:	f000 f86c 	bl	800c1c4 <_read_r>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	bfab      	itete	ge
 800c0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f4:	181b      	addge	r3, r3, r0
 800c0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0fa:	bfac      	ite	ge
 800c0fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0fe:	81a3      	strhlt	r3, [r4, #12]
 800c100:	bd10      	pop	{r4, pc}

0800c102 <__swrite>:
 800c102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	461f      	mov	r7, r3
 800c108:	898b      	ldrh	r3, [r1, #12]
 800c10a:	05db      	lsls	r3, r3, #23
 800c10c:	4605      	mov	r5, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	4616      	mov	r6, r2
 800c112:	d505      	bpl.n	800c120 <__swrite+0x1e>
 800c114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c118:	2302      	movs	r3, #2
 800c11a:	2200      	movs	r2, #0
 800c11c:	f000 f840 	bl	800c1a0 <_lseek_r>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	4632      	mov	r2, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	4628      	mov	r0, r5
 800c132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c136:	f000 b857 	b.w	800c1e8 <_write_r>

0800c13a <__sseek>:
 800c13a:	b510      	push	{r4, lr}
 800c13c:	460c      	mov	r4, r1
 800c13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c142:	f000 f82d 	bl	800c1a0 <_lseek_r>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	bf15      	itete	ne
 800c14c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c156:	81a3      	strheq	r3, [r4, #12]
 800c158:	bf18      	it	ne
 800c15a:	81a3      	strhne	r3, [r4, #12]
 800c15c:	bd10      	pop	{r4, pc}

0800c15e <__sclose>:
 800c15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c162:	f000 b80d 	b.w	800c180 <_close_r>

0800c166 <memset>:
 800c166:	4402      	add	r2, r0
 800c168:	4603      	mov	r3, r0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d100      	bne.n	800c170 <memset+0xa>
 800c16e:	4770      	bx	lr
 800c170:	f803 1b01 	strb.w	r1, [r3], #1
 800c174:	e7f9      	b.n	800c16a <memset+0x4>
	...

0800c178 <_localeconv_r>:
 800c178:	4800      	ldr	r0, [pc, #0]	; (800c17c <_localeconv_r+0x4>)
 800c17a:	4770      	bx	lr
 800c17c:	20000170 	.word	0x20000170

0800c180 <_close_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d06      	ldr	r5, [pc, #24]	; (800c19c <_close_r+0x1c>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7f7 fdc7 	bl	8003d1e <_close>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_close_r+0x1a>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_close_r+0x1a>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	20000ff0 	.word	0x20000ff0

0800c1a0 <_lseek_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d07      	ldr	r5, [pc, #28]	; (800c1c0 <_lseek_r+0x20>)
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	4608      	mov	r0, r1
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f7f7 fddc 	bl	8003d6c <_lseek>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_lseek_r+0x1e>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_lseek_r+0x1e>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	20000ff0 	.word	0x20000ff0

0800c1c4 <_read_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_read_r+0x20>)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f7 fd6a 	bl	8003cac <_read>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_read_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_read_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20000ff0 	.word	0x20000ff0

0800c1e8 <_write_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	; (800c208 <_write_r+0x20>)
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f7f7 fd75 	bl	8003ce6 <_write>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_write_r+0x1e>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_write_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	20000ff0 	.word	0x20000ff0

0800c20c <__errno>:
 800c20c:	4b01      	ldr	r3, [pc, #4]	; (800c214 <__errno+0x8>)
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	2000007c 	.word	0x2000007c

0800c218 <__libc_init_array>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	4d0d      	ldr	r5, [pc, #52]	; (800c250 <__libc_init_array+0x38>)
 800c21c:	4c0d      	ldr	r4, [pc, #52]	; (800c254 <__libc_init_array+0x3c>)
 800c21e:	1b64      	subs	r4, r4, r5
 800c220:	10a4      	asrs	r4, r4, #2
 800c222:	2600      	movs	r6, #0
 800c224:	42a6      	cmp	r6, r4
 800c226:	d109      	bne.n	800c23c <__libc_init_array+0x24>
 800c228:	4d0b      	ldr	r5, [pc, #44]	; (800c258 <__libc_init_array+0x40>)
 800c22a:	4c0c      	ldr	r4, [pc, #48]	; (800c25c <__libc_init_array+0x44>)
 800c22c:	f002 f894 	bl	800e358 <_init>
 800c230:	1b64      	subs	r4, r4, r5
 800c232:	10a4      	asrs	r4, r4, #2
 800c234:	2600      	movs	r6, #0
 800c236:	42a6      	cmp	r6, r4
 800c238:	d105      	bne.n	800c246 <__libc_init_array+0x2e>
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c240:	4798      	blx	r3
 800c242:	3601      	adds	r6, #1
 800c244:	e7ee      	b.n	800c224 <__libc_init_array+0xc>
 800c246:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24a:	4798      	blx	r3
 800c24c:	3601      	adds	r6, #1
 800c24e:	e7f2      	b.n	800c236 <__libc_init_array+0x1e>
 800c250:	0800e9e8 	.word	0x0800e9e8
 800c254:	0800e9e8 	.word	0x0800e9e8
 800c258:	0800e9e8 	.word	0x0800e9e8
 800c25c:	0800e9ec 	.word	0x0800e9ec

0800c260 <__retarget_lock_init_recursive>:
 800c260:	4770      	bx	lr

0800c262 <__retarget_lock_acquire_recursive>:
 800c262:	4770      	bx	lr

0800c264 <__retarget_lock_release_recursive>:
 800c264:	4770      	bx	lr

0800c266 <memcpy>:
 800c266:	440a      	add	r2, r1
 800c268:	4291      	cmp	r1, r2
 800c26a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c26e:	d100      	bne.n	800c272 <memcpy+0xc>
 800c270:	4770      	bx	lr
 800c272:	b510      	push	{r4, lr}
 800c274:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c27c:	4291      	cmp	r1, r2
 800c27e:	d1f9      	bne.n	800c274 <memcpy+0xe>
 800c280:	bd10      	pop	{r4, pc}
	...

0800c284 <__assert_func>:
 800c284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c286:	4614      	mov	r4, r2
 800c288:	461a      	mov	r2, r3
 800c28a:	4b09      	ldr	r3, [pc, #36]	; (800c2b0 <__assert_func+0x2c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4605      	mov	r5, r0
 800c290:	68d8      	ldr	r0, [r3, #12]
 800c292:	b14c      	cbz	r4, 800c2a8 <__assert_func+0x24>
 800c294:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <__assert_func+0x30>)
 800c296:	9100      	str	r1, [sp, #0]
 800c298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c29c:	4906      	ldr	r1, [pc, #24]	; (800c2b8 <__assert_func+0x34>)
 800c29e:	462b      	mov	r3, r5
 800c2a0:	f001 fd0a 	bl	800dcb8 <fiprintf>
 800c2a4:	f001 fd44 	bl	800dd30 <abort>
 800c2a8:	4b04      	ldr	r3, [pc, #16]	; (800c2bc <__assert_func+0x38>)
 800c2aa:	461c      	mov	r4, r3
 800c2ac:	e7f3      	b.n	800c296 <__assert_func+0x12>
 800c2ae:	bf00      	nop
 800c2b0:	2000007c 	.word	0x2000007c
 800c2b4:	0800e6bb 	.word	0x0800e6bb
 800c2b8:	0800e6c8 	.word	0x0800e6c8
 800c2bc:	0800e6f6 	.word	0x0800e6f6

0800c2c0 <quorem>:
 800c2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	6903      	ldr	r3, [r0, #16]
 800c2c6:	690c      	ldr	r4, [r1, #16]
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	db7e      	blt.n	800c3cc <quorem+0x10c>
 800c2ce:	3c01      	subs	r4, #1
 800c2d0:	f101 0814 	add.w	r8, r1, #20
 800c2d4:	f100 0514 	add.w	r5, r0, #20
 800c2d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2f6:	d331      	bcc.n	800c35c <quorem+0x9c>
 800c2f8:	f04f 0e00 	mov.w	lr, #0
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	46ac      	mov	ip, r5
 800c300:	46f2      	mov	sl, lr
 800c302:	f850 2b04 	ldr.w	r2, [r0], #4
 800c306:	b293      	uxth	r3, r2
 800c308:	fb06 e303 	mla	r3, r6, r3, lr
 800c30c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c310:	0c1a      	lsrs	r2, r3, #16
 800c312:	b29b      	uxth	r3, r3
 800c314:	ebaa 0303 	sub.w	r3, sl, r3
 800c318:	f8dc a000 	ldr.w	sl, [ip]
 800c31c:	fa13 f38a 	uxtah	r3, r3, sl
 800c320:	fb06 220e 	mla	r2, r6, lr, r2
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c32c:	b292      	uxth	r2, r2
 800c32e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c332:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c336:	f8bd 3000 	ldrh.w	r3, [sp]
 800c33a:	4581      	cmp	r9, r0
 800c33c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c340:	f84c 3b04 	str.w	r3, [ip], #4
 800c344:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c348:	d2db      	bcs.n	800c302 <quorem+0x42>
 800c34a:	f855 300b 	ldr.w	r3, [r5, fp]
 800c34e:	b92b      	cbnz	r3, 800c35c <quorem+0x9c>
 800c350:	9b01      	ldr	r3, [sp, #4]
 800c352:	3b04      	subs	r3, #4
 800c354:	429d      	cmp	r5, r3
 800c356:	461a      	mov	r2, r3
 800c358:	d32c      	bcc.n	800c3b4 <quorem+0xf4>
 800c35a:	613c      	str	r4, [r7, #16]
 800c35c:	4638      	mov	r0, r7
 800c35e:	f001 f9a5 	bl	800d6ac <__mcmp>
 800c362:	2800      	cmp	r0, #0
 800c364:	db22      	blt.n	800c3ac <quorem+0xec>
 800c366:	3601      	adds	r6, #1
 800c368:	4629      	mov	r1, r5
 800c36a:	2000      	movs	r0, #0
 800c36c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c370:	f8d1 c000 	ldr.w	ip, [r1]
 800c374:	b293      	uxth	r3, r2
 800c376:	1ac3      	subs	r3, r0, r3
 800c378:	0c12      	lsrs	r2, r2, #16
 800c37a:	fa13 f38c 	uxtah	r3, r3, ip
 800c37e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c386:	b29b      	uxth	r3, r3
 800c388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c38c:	45c1      	cmp	r9, r8
 800c38e:	f841 3b04 	str.w	r3, [r1], #4
 800c392:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c396:	d2e9      	bcs.n	800c36c <quorem+0xac>
 800c398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c39c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3a0:	b922      	cbnz	r2, 800c3ac <quorem+0xec>
 800c3a2:	3b04      	subs	r3, #4
 800c3a4:	429d      	cmp	r5, r3
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	d30a      	bcc.n	800c3c0 <quorem+0x100>
 800c3aa:	613c      	str	r4, [r7, #16]
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b4:	6812      	ldr	r2, [r2, #0]
 800c3b6:	3b04      	subs	r3, #4
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d1ce      	bne.n	800c35a <quorem+0x9a>
 800c3bc:	3c01      	subs	r4, #1
 800c3be:	e7c9      	b.n	800c354 <quorem+0x94>
 800c3c0:	6812      	ldr	r2, [r2, #0]
 800c3c2:	3b04      	subs	r3, #4
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	d1f0      	bne.n	800c3aa <quorem+0xea>
 800c3c8:	3c01      	subs	r4, #1
 800c3ca:	e7eb      	b.n	800c3a4 <quorem+0xe4>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7ee      	b.n	800c3ae <quorem+0xee>

0800c3d0 <_dtoa_r>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	ed2d 8b04 	vpush	{d8-d9}
 800c3d8:	69c5      	ldr	r5, [r0, #28]
 800c3da:	b093      	sub	sp, #76	; 0x4c
 800c3dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3e0:	ec57 6b10 	vmov	r6, r7, d0
 800c3e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3e8:	9107      	str	r1, [sp, #28]
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	920a      	str	r2, [sp, #40]	; 0x28
 800c3ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f0:	b975      	cbnz	r5, 800c410 <_dtoa_r+0x40>
 800c3f2:	2010      	movs	r0, #16
 800c3f4:	f000 fe2a 	bl	800d04c <malloc>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	61e0      	str	r0, [r4, #28]
 800c3fc:	b920      	cbnz	r0, 800c408 <_dtoa_r+0x38>
 800c3fe:	4bae      	ldr	r3, [pc, #696]	; (800c6b8 <_dtoa_r+0x2e8>)
 800c400:	21ef      	movs	r1, #239	; 0xef
 800c402:	48ae      	ldr	r0, [pc, #696]	; (800c6bc <_dtoa_r+0x2ec>)
 800c404:	f7ff ff3e 	bl	800c284 <__assert_func>
 800c408:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c40c:	6005      	str	r5, [r0, #0]
 800c40e:	60c5      	str	r5, [r0, #12]
 800c410:	69e3      	ldr	r3, [r4, #28]
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	b151      	cbz	r1, 800c42c <_dtoa_r+0x5c>
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	604a      	str	r2, [r1, #4]
 800c41a:	2301      	movs	r3, #1
 800c41c:	4093      	lsls	r3, r2
 800c41e:	608b      	str	r3, [r1, #8]
 800c420:	4620      	mov	r0, r4
 800c422:	f000 ff07 	bl	800d234 <_Bfree>
 800c426:	69e3      	ldr	r3, [r4, #28]
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	1e3b      	subs	r3, r7, #0
 800c42e:	bfbb      	ittet	lt
 800c430:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c434:	9303      	strlt	r3, [sp, #12]
 800c436:	2300      	movge	r3, #0
 800c438:	2201      	movlt	r2, #1
 800c43a:	bfac      	ite	ge
 800c43c:	f8c8 3000 	strge.w	r3, [r8]
 800c440:	f8c8 2000 	strlt.w	r2, [r8]
 800c444:	4b9e      	ldr	r3, [pc, #632]	; (800c6c0 <_dtoa_r+0x2f0>)
 800c446:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c44a:	ea33 0308 	bics.w	r3, r3, r8
 800c44e:	d11b      	bne.n	800c488 <_dtoa_r+0xb8>
 800c450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c452:	f242 730f 	movw	r3, #9999	; 0x270f
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c45c:	4333      	orrs	r3, r6
 800c45e:	f000 8593 	beq.w	800cf88 <_dtoa_r+0xbb8>
 800c462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c464:	b963      	cbnz	r3, 800c480 <_dtoa_r+0xb0>
 800c466:	4b97      	ldr	r3, [pc, #604]	; (800c6c4 <_dtoa_r+0x2f4>)
 800c468:	e027      	b.n	800c4ba <_dtoa_r+0xea>
 800c46a:	4b97      	ldr	r3, [pc, #604]	; (800c6c8 <_dtoa_r+0x2f8>)
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	9800      	ldr	r0, [sp, #0]
 800c476:	b013      	add	sp, #76	; 0x4c
 800c478:	ecbd 8b04 	vpop	{d8-d9}
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	4b90      	ldr	r3, [pc, #576]	; (800c6c4 <_dtoa_r+0x2f4>)
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	3303      	adds	r3, #3
 800c486:	e7f3      	b.n	800c470 <_dtoa_r+0xa0>
 800c488:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c48c:	2200      	movs	r2, #0
 800c48e:	ec51 0b17 	vmov	r0, r1, d7
 800c492:	eeb0 8a47 	vmov.f32	s16, s14
 800c496:	eef0 8a67 	vmov.f32	s17, s15
 800c49a:	2300      	movs	r3, #0
 800c49c:	f7f4 fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4a0:	4681      	mov	r9, r0
 800c4a2:	b160      	cbz	r0, 800c4be <_dtoa_r+0xee>
 800c4a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f000 8568 	beq.w	800cf82 <_dtoa_r+0xbb2>
 800c4b2:	4b86      	ldr	r3, [pc, #536]	; (800c6cc <_dtoa_r+0x2fc>)
 800c4b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	e7da      	b.n	800c474 <_dtoa_r+0xa4>
 800c4be:	aa10      	add	r2, sp, #64	; 0x40
 800c4c0:	a911      	add	r1, sp, #68	; 0x44
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c8:	eef0 0a68 	vmov.f32	s1, s17
 800c4cc:	f001 f994 	bl	800d7f8 <__d2b>
 800c4d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	d07f      	beq.n	800c5da <_dtoa_r+0x20a>
 800c4da:	ee18 3a90 	vmov	r3, s17
 800c4de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4e6:	ec51 0b18 	vmov	r0, r1, d8
 800c4ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4b75      	ldr	r3, [pc, #468]	; (800c6d0 <_dtoa_r+0x300>)
 800c4fc:	f7f3 fec4 	bl	8000288 <__aeabi_dsub>
 800c500:	a367      	add	r3, pc, #412	; (adr r3, 800c6a0 <_dtoa_r+0x2d0>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f4 f877 	bl	80005f8 <__aeabi_dmul>
 800c50a:	a367      	add	r3, pc, #412	; (adr r3, 800c6a8 <_dtoa_r+0x2d8>)
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f7f3 febc 	bl	800028c <__adddf3>
 800c514:	4606      	mov	r6, r0
 800c516:	4628      	mov	r0, r5
 800c518:	460f      	mov	r7, r1
 800c51a:	f7f4 f803 	bl	8000524 <__aeabi_i2d>
 800c51e:	a364      	add	r3, pc, #400	; (adr r3, 800c6b0 <_dtoa_r+0x2e0>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f7f4 f868 	bl	80005f8 <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	f7f3 feac 	bl	800028c <__adddf3>
 800c534:	4606      	mov	r6, r0
 800c536:	460f      	mov	r7, r1
 800c538:	f7f4 fb0e 	bl	8000b58 <__aeabi_d2iz>
 800c53c:	2200      	movs	r2, #0
 800c53e:	4683      	mov	fp, r0
 800c540:	2300      	movs	r3, #0
 800c542:	4630      	mov	r0, r6
 800c544:	4639      	mov	r1, r7
 800c546:	f7f4 fac9 	bl	8000adc <__aeabi_dcmplt>
 800c54a:	b148      	cbz	r0, 800c560 <_dtoa_r+0x190>
 800c54c:	4658      	mov	r0, fp
 800c54e:	f7f3 ffe9 	bl	8000524 <__aeabi_i2d>
 800c552:	4632      	mov	r2, r6
 800c554:	463b      	mov	r3, r7
 800c556:	f7f4 fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c55a:	b908      	cbnz	r0, 800c560 <_dtoa_r+0x190>
 800c55c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c560:	f1bb 0f16 	cmp.w	fp, #22
 800c564:	d857      	bhi.n	800c616 <_dtoa_r+0x246>
 800c566:	4b5b      	ldr	r3, [pc, #364]	; (800c6d4 <_dtoa_r+0x304>)
 800c568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	ec51 0b18 	vmov	r0, r1, d8
 800c574:	f7f4 fab2 	bl	8000adc <__aeabi_dcmplt>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d04e      	beq.n	800c61a <_dtoa_r+0x24a>
 800c57c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c580:	2300      	movs	r3, #0
 800c582:	930c      	str	r3, [sp, #48]	; 0x30
 800c584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c586:	1b5b      	subs	r3, r3, r5
 800c588:	1e5a      	subs	r2, r3, #1
 800c58a:	bf45      	ittet	mi
 800c58c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c590:	9305      	strmi	r3, [sp, #20]
 800c592:	2300      	movpl	r3, #0
 800c594:	2300      	movmi	r3, #0
 800c596:	9206      	str	r2, [sp, #24]
 800c598:	bf54      	ite	pl
 800c59a:	9305      	strpl	r3, [sp, #20]
 800c59c:	9306      	strmi	r3, [sp, #24]
 800c59e:	f1bb 0f00 	cmp.w	fp, #0
 800c5a2:	db3c      	blt.n	800c61e <_dtoa_r+0x24e>
 800c5a4:	9b06      	ldr	r3, [sp, #24]
 800c5a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c5aa:	445b      	add	r3, fp
 800c5ac:	9306      	str	r3, [sp, #24]
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	9308      	str	r3, [sp, #32]
 800c5b2:	9b07      	ldr	r3, [sp, #28]
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d868      	bhi.n	800c68a <_dtoa_r+0x2ba>
 800c5b8:	2b05      	cmp	r3, #5
 800c5ba:	bfc4      	itt	gt
 800c5bc:	3b04      	subgt	r3, #4
 800c5be:	9307      	strgt	r3, [sp, #28]
 800c5c0:	9b07      	ldr	r3, [sp, #28]
 800c5c2:	f1a3 0302 	sub.w	r3, r3, #2
 800c5c6:	bfcc      	ite	gt
 800c5c8:	2500      	movgt	r5, #0
 800c5ca:	2501      	movle	r5, #1
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	f200 8085 	bhi.w	800c6dc <_dtoa_r+0x30c>
 800c5d2:	e8df f003 	tbb	[pc, r3]
 800c5d6:	3b2e      	.short	0x3b2e
 800c5d8:	5839      	.short	0x5839
 800c5da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5de:	441d      	add	r5, r3
 800c5e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5e4:	2b20      	cmp	r3, #32
 800c5e6:	bfc1      	itttt	gt
 800c5e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c5f8:	bfd6      	itet	le
 800c5fa:	f1c3 0320 	rsble	r3, r3, #32
 800c5fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800c602:	fa06 f003 	lslle.w	r0, r6, r3
 800c606:	f7f3 ff7d 	bl	8000504 <__aeabi_ui2d>
 800c60a:	2201      	movs	r2, #1
 800c60c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c610:	3d01      	subs	r5, #1
 800c612:	920e      	str	r2, [sp, #56]	; 0x38
 800c614:	e76f      	b.n	800c4f6 <_dtoa_r+0x126>
 800c616:	2301      	movs	r3, #1
 800c618:	e7b3      	b.n	800c582 <_dtoa_r+0x1b2>
 800c61a:	900c      	str	r0, [sp, #48]	; 0x30
 800c61c:	e7b2      	b.n	800c584 <_dtoa_r+0x1b4>
 800c61e:	9b05      	ldr	r3, [sp, #20]
 800c620:	eba3 030b 	sub.w	r3, r3, fp
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	f1cb 0300 	rsb	r3, fp, #0
 800c62a:	9308      	str	r3, [sp, #32]
 800c62c:	2300      	movs	r3, #0
 800c62e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c630:	e7bf      	b.n	800c5b2 <_dtoa_r+0x1e2>
 800c632:	2300      	movs	r3, #0
 800c634:	9309      	str	r3, [sp, #36]	; 0x24
 800c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dc52      	bgt.n	800c6e2 <_dtoa_r+0x312>
 800c63c:	2301      	movs	r3, #1
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	9304      	str	r3, [sp, #16]
 800c642:	461a      	mov	r2, r3
 800c644:	920a      	str	r2, [sp, #40]	; 0x28
 800c646:	e00b      	b.n	800c660 <_dtoa_r+0x290>
 800c648:	2301      	movs	r3, #1
 800c64a:	e7f3      	b.n	800c634 <_dtoa_r+0x264>
 800c64c:	2300      	movs	r3, #0
 800c64e:	9309      	str	r3, [sp, #36]	; 0x24
 800c650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c652:	445b      	add	r3, fp
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	3301      	adds	r3, #1
 800c658:	2b01      	cmp	r3, #1
 800c65a:	9304      	str	r3, [sp, #16]
 800c65c:	bfb8      	it	lt
 800c65e:	2301      	movlt	r3, #1
 800c660:	69e0      	ldr	r0, [r4, #28]
 800c662:	2100      	movs	r1, #0
 800c664:	2204      	movs	r2, #4
 800c666:	f102 0614 	add.w	r6, r2, #20
 800c66a:	429e      	cmp	r6, r3
 800c66c:	d93d      	bls.n	800c6ea <_dtoa_r+0x31a>
 800c66e:	6041      	str	r1, [r0, #4]
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fd9f 	bl	800d1b4 <_Balloc>
 800c676:	9000      	str	r0, [sp, #0]
 800c678:	2800      	cmp	r0, #0
 800c67a:	d139      	bne.n	800c6f0 <_dtoa_r+0x320>
 800c67c:	4b16      	ldr	r3, [pc, #88]	; (800c6d8 <_dtoa_r+0x308>)
 800c67e:	4602      	mov	r2, r0
 800c680:	f240 11af 	movw	r1, #431	; 0x1af
 800c684:	e6bd      	b.n	800c402 <_dtoa_r+0x32>
 800c686:	2301      	movs	r3, #1
 800c688:	e7e1      	b.n	800c64e <_dtoa_r+0x27e>
 800c68a:	2501      	movs	r5, #1
 800c68c:	2300      	movs	r3, #0
 800c68e:	9307      	str	r3, [sp, #28]
 800c690:	9509      	str	r5, [sp, #36]	; 0x24
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	9304      	str	r3, [sp, #16]
 800c69a:	2200      	movs	r2, #0
 800c69c:	2312      	movs	r3, #18
 800c69e:	e7d1      	b.n	800c644 <_dtoa_r+0x274>
 800c6a0:	636f4361 	.word	0x636f4361
 800c6a4:	3fd287a7 	.word	0x3fd287a7
 800c6a8:	8b60c8b3 	.word	0x8b60c8b3
 800c6ac:	3fc68a28 	.word	0x3fc68a28
 800c6b0:	509f79fb 	.word	0x509f79fb
 800c6b4:	3fd34413 	.word	0x3fd34413
 800c6b8:	0800e618 	.word	0x0800e618
 800c6bc:	0800e704 	.word	0x0800e704
 800c6c0:	7ff00000 	.word	0x7ff00000
 800c6c4:	0800e700 	.word	0x0800e700
 800c6c8:	0800e6f7 	.word	0x0800e6f7
 800c6cc:	0800e698 	.word	0x0800e698
 800c6d0:	3ff80000 	.word	0x3ff80000
 800c6d4:	0800e7f0 	.word	0x0800e7f0
 800c6d8:	0800e75c 	.word	0x0800e75c
 800c6dc:	2301      	movs	r3, #1
 800c6de:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e0:	e7d7      	b.n	800c692 <_dtoa_r+0x2c2>
 800c6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	9304      	str	r3, [sp, #16]
 800c6e8:	e7ba      	b.n	800c660 <_dtoa_r+0x290>
 800c6ea:	3101      	adds	r1, #1
 800c6ec:	0052      	lsls	r2, r2, #1
 800c6ee:	e7ba      	b.n	800c666 <_dtoa_r+0x296>
 800c6f0:	69e3      	ldr	r3, [r4, #28]
 800c6f2:	9a00      	ldr	r2, [sp, #0]
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	9b04      	ldr	r3, [sp, #16]
 800c6f8:	2b0e      	cmp	r3, #14
 800c6fa:	f200 80a8 	bhi.w	800c84e <_dtoa_r+0x47e>
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	f000 80a5 	beq.w	800c84e <_dtoa_r+0x47e>
 800c704:	f1bb 0f00 	cmp.w	fp, #0
 800c708:	dd38      	ble.n	800c77c <_dtoa_r+0x3ac>
 800c70a:	4bc0      	ldr	r3, [pc, #768]	; (800ca0c <_dtoa_r+0x63c>)
 800c70c:	f00b 020f 	and.w	r2, fp, #15
 800c710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c714:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c718:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c71c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c720:	d019      	beq.n	800c756 <_dtoa_r+0x386>
 800c722:	4bbb      	ldr	r3, [pc, #748]	; (800ca10 <_dtoa_r+0x640>)
 800c724:	ec51 0b18 	vmov	r0, r1, d8
 800c728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c72c:	f7f4 f88e 	bl	800084c <__aeabi_ddiv>
 800c730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c734:	f008 080f 	and.w	r8, r8, #15
 800c738:	2503      	movs	r5, #3
 800c73a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca10 <_dtoa_r+0x640>
 800c73e:	f1b8 0f00 	cmp.w	r8, #0
 800c742:	d10a      	bne.n	800c75a <_dtoa_r+0x38a>
 800c744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c748:	4632      	mov	r2, r6
 800c74a:	463b      	mov	r3, r7
 800c74c:	f7f4 f87e 	bl	800084c <__aeabi_ddiv>
 800c750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c754:	e02b      	b.n	800c7ae <_dtoa_r+0x3de>
 800c756:	2502      	movs	r5, #2
 800c758:	e7ef      	b.n	800c73a <_dtoa_r+0x36a>
 800c75a:	f018 0f01 	tst.w	r8, #1
 800c75e:	d008      	beq.n	800c772 <_dtoa_r+0x3a2>
 800c760:	4630      	mov	r0, r6
 800c762:	4639      	mov	r1, r7
 800c764:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c768:	f7f3 ff46 	bl	80005f8 <__aeabi_dmul>
 800c76c:	3501      	adds	r5, #1
 800c76e:	4606      	mov	r6, r0
 800c770:	460f      	mov	r7, r1
 800c772:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c776:	f109 0908 	add.w	r9, r9, #8
 800c77a:	e7e0      	b.n	800c73e <_dtoa_r+0x36e>
 800c77c:	f000 809f 	beq.w	800c8be <_dtoa_r+0x4ee>
 800c780:	f1cb 0600 	rsb	r6, fp, #0
 800c784:	4ba1      	ldr	r3, [pc, #644]	; (800ca0c <_dtoa_r+0x63c>)
 800c786:	4fa2      	ldr	r7, [pc, #648]	; (800ca10 <_dtoa_r+0x640>)
 800c788:	f006 020f 	and.w	r2, r6, #15
 800c78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	ec51 0b18 	vmov	r0, r1, d8
 800c798:	f7f3 ff2e 	bl	80005f8 <__aeabi_dmul>
 800c79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7a0:	1136      	asrs	r6, r6, #4
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	2502      	movs	r5, #2
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	d17e      	bne.n	800c8a8 <_dtoa_r+0x4d8>
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1d0      	bne.n	800c750 <_dtoa_r+0x380>
 800c7ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 8084 	beq.w	800c8c2 <_dtoa_r+0x4f2>
 800c7ba:	4b96      	ldr	r3, [pc, #600]	; (800ca14 <_dtoa_r+0x644>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4640      	mov	r0, r8
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f7f4 f98b 	bl	8000adc <__aeabi_dcmplt>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d07b      	beq.n	800c8c2 <_dtoa_r+0x4f2>
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d078      	beq.n	800c8c2 <_dtoa_r+0x4f2>
 800c7d0:	9b01      	ldr	r3, [sp, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	dd39      	ble.n	800c84a <_dtoa_r+0x47a>
 800c7d6:	4b90      	ldr	r3, [pc, #576]	; (800ca18 <_dtoa_r+0x648>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4640      	mov	r0, r8
 800c7dc:	4649      	mov	r1, r9
 800c7de:	f7f3 ff0b 	bl	80005f8 <__aeabi_dmul>
 800c7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e6:	9e01      	ldr	r6, [sp, #4]
 800c7e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f7f3 fe96 	bl	8000524 <__aeabi_i2d>
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	f7f3 fefc 	bl	80005f8 <__aeabi_dmul>
 800c800:	4b86      	ldr	r3, [pc, #536]	; (800ca1c <_dtoa_r+0x64c>)
 800c802:	2200      	movs	r2, #0
 800c804:	f7f3 fd42 	bl	800028c <__adddf3>
 800c808:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c810:	9303      	str	r3, [sp, #12]
 800c812:	2e00      	cmp	r6, #0
 800c814:	d158      	bne.n	800c8c8 <_dtoa_r+0x4f8>
 800c816:	4b82      	ldr	r3, [pc, #520]	; (800ca20 <_dtoa_r+0x650>)
 800c818:	2200      	movs	r2, #0
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	f7f3 fd33 	bl	8000288 <__aeabi_dsub>
 800c822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c826:	4680      	mov	r8, r0
 800c828:	4689      	mov	r9, r1
 800c82a:	f7f4 f975 	bl	8000b18 <__aeabi_dcmpgt>
 800c82e:	2800      	cmp	r0, #0
 800c830:	f040 8296 	bne.w	800cd60 <_dtoa_r+0x990>
 800c834:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c838:	4640      	mov	r0, r8
 800c83a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c83e:	4649      	mov	r1, r9
 800c840:	f7f4 f94c 	bl	8000adc <__aeabi_dcmplt>
 800c844:	2800      	cmp	r0, #0
 800c846:	f040 8289 	bne.w	800cd5c <_dtoa_r+0x98c>
 800c84a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c84e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c850:	2b00      	cmp	r3, #0
 800c852:	f2c0 814e 	blt.w	800caf2 <_dtoa_r+0x722>
 800c856:	f1bb 0f0e 	cmp.w	fp, #14
 800c85a:	f300 814a 	bgt.w	800caf2 <_dtoa_r+0x722>
 800c85e:	4b6b      	ldr	r3, [pc, #428]	; (800ca0c <_dtoa_r+0x63c>)
 800c860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c864:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f280 80dc 	bge.w	800ca28 <_dtoa_r+0x658>
 800c870:	9b04      	ldr	r3, [sp, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	f300 80d8 	bgt.w	800ca28 <_dtoa_r+0x658>
 800c878:	f040 826f 	bne.w	800cd5a <_dtoa_r+0x98a>
 800c87c:	4b68      	ldr	r3, [pc, #416]	; (800ca20 <_dtoa_r+0x650>)
 800c87e:	2200      	movs	r2, #0
 800c880:	4640      	mov	r0, r8
 800c882:	4649      	mov	r1, r9
 800c884:	f7f3 feb8 	bl	80005f8 <__aeabi_dmul>
 800c888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c88c:	f7f4 f93a 	bl	8000b04 <__aeabi_dcmpge>
 800c890:	9e04      	ldr	r6, [sp, #16]
 800c892:	4637      	mov	r7, r6
 800c894:	2800      	cmp	r0, #0
 800c896:	f040 8245 	bne.w	800cd24 <_dtoa_r+0x954>
 800c89a:	9d00      	ldr	r5, [sp, #0]
 800c89c:	2331      	movs	r3, #49	; 0x31
 800c89e:	f805 3b01 	strb.w	r3, [r5], #1
 800c8a2:	f10b 0b01 	add.w	fp, fp, #1
 800c8a6:	e241      	b.n	800cd2c <_dtoa_r+0x95c>
 800c8a8:	07f2      	lsls	r2, r6, #31
 800c8aa:	d505      	bpl.n	800c8b8 <_dtoa_r+0x4e8>
 800c8ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b0:	f7f3 fea2 	bl	80005f8 <__aeabi_dmul>
 800c8b4:	3501      	adds	r5, #1
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	1076      	asrs	r6, r6, #1
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	e773      	b.n	800c7a6 <_dtoa_r+0x3d6>
 800c8be:	2502      	movs	r5, #2
 800c8c0:	e775      	b.n	800c7ae <_dtoa_r+0x3de>
 800c8c2:	9e04      	ldr	r6, [sp, #16]
 800c8c4:	465f      	mov	r7, fp
 800c8c6:	e792      	b.n	800c7ee <_dtoa_r+0x41e>
 800c8c8:	9900      	ldr	r1, [sp, #0]
 800c8ca:	4b50      	ldr	r3, [pc, #320]	; (800ca0c <_dtoa_r+0x63c>)
 800c8cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8d0:	4431      	add	r1, r6
 800c8d2:	9102      	str	r1, [sp, #8]
 800c8d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8d6:	eeb0 9a47 	vmov.f32	s18, s14
 800c8da:	eef0 9a67 	vmov.f32	s19, s15
 800c8de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d044      	beq.n	800c974 <_dtoa_r+0x5a4>
 800c8ea:	494e      	ldr	r1, [pc, #312]	; (800ca24 <_dtoa_r+0x654>)
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f7f3 ffad 	bl	800084c <__aeabi_ddiv>
 800c8f2:	ec53 2b19 	vmov	r2, r3, d9
 800c8f6:	f7f3 fcc7 	bl	8000288 <__aeabi_dsub>
 800c8fa:	9d00      	ldr	r5, [sp, #0]
 800c8fc:	ec41 0b19 	vmov	d9, r0, r1
 800c900:	4649      	mov	r1, r9
 800c902:	4640      	mov	r0, r8
 800c904:	f7f4 f928 	bl	8000b58 <__aeabi_d2iz>
 800c908:	4606      	mov	r6, r0
 800c90a:	f7f3 fe0b 	bl	8000524 <__aeabi_i2d>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4640      	mov	r0, r8
 800c914:	4649      	mov	r1, r9
 800c916:	f7f3 fcb7 	bl	8000288 <__aeabi_dsub>
 800c91a:	3630      	adds	r6, #48	; 0x30
 800c91c:	f805 6b01 	strb.w	r6, [r5], #1
 800c920:	ec53 2b19 	vmov	r2, r3, d9
 800c924:	4680      	mov	r8, r0
 800c926:	4689      	mov	r9, r1
 800c928:	f7f4 f8d8 	bl	8000adc <__aeabi_dcmplt>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d164      	bne.n	800c9fa <_dtoa_r+0x62a>
 800c930:	4642      	mov	r2, r8
 800c932:	464b      	mov	r3, r9
 800c934:	4937      	ldr	r1, [pc, #220]	; (800ca14 <_dtoa_r+0x644>)
 800c936:	2000      	movs	r0, #0
 800c938:	f7f3 fca6 	bl	8000288 <__aeabi_dsub>
 800c93c:	ec53 2b19 	vmov	r2, r3, d9
 800c940:	f7f4 f8cc 	bl	8000adc <__aeabi_dcmplt>
 800c944:	2800      	cmp	r0, #0
 800c946:	f040 80b6 	bne.w	800cab6 <_dtoa_r+0x6e6>
 800c94a:	9b02      	ldr	r3, [sp, #8]
 800c94c:	429d      	cmp	r5, r3
 800c94e:	f43f af7c 	beq.w	800c84a <_dtoa_r+0x47a>
 800c952:	4b31      	ldr	r3, [pc, #196]	; (800ca18 <_dtoa_r+0x648>)
 800c954:	ec51 0b19 	vmov	r0, r1, d9
 800c958:	2200      	movs	r2, #0
 800c95a:	f7f3 fe4d 	bl	80005f8 <__aeabi_dmul>
 800c95e:	4b2e      	ldr	r3, [pc, #184]	; (800ca18 <_dtoa_r+0x648>)
 800c960:	ec41 0b19 	vmov	d9, r0, r1
 800c964:	2200      	movs	r2, #0
 800c966:	4640      	mov	r0, r8
 800c968:	4649      	mov	r1, r9
 800c96a:	f7f3 fe45 	bl	80005f8 <__aeabi_dmul>
 800c96e:	4680      	mov	r8, r0
 800c970:	4689      	mov	r9, r1
 800c972:	e7c5      	b.n	800c900 <_dtoa_r+0x530>
 800c974:	ec51 0b17 	vmov	r0, r1, d7
 800c978:	f7f3 fe3e 	bl	80005f8 <__aeabi_dmul>
 800c97c:	9b02      	ldr	r3, [sp, #8]
 800c97e:	9d00      	ldr	r5, [sp, #0]
 800c980:	930f      	str	r3, [sp, #60]	; 0x3c
 800c982:	ec41 0b19 	vmov	d9, r0, r1
 800c986:	4649      	mov	r1, r9
 800c988:	4640      	mov	r0, r8
 800c98a:	f7f4 f8e5 	bl	8000b58 <__aeabi_d2iz>
 800c98e:	4606      	mov	r6, r0
 800c990:	f7f3 fdc8 	bl	8000524 <__aeabi_i2d>
 800c994:	3630      	adds	r6, #48	; 0x30
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f3 fc73 	bl	8000288 <__aeabi_dsub>
 800c9a2:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a6:	9b02      	ldr	r3, [sp, #8]
 800c9a8:	429d      	cmp	r5, r3
 800c9aa:	4680      	mov	r8, r0
 800c9ac:	4689      	mov	r9, r1
 800c9ae:	f04f 0200 	mov.w	r2, #0
 800c9b2:	d124      	bne.n	800c9fe <_dtoa_r+0x62e>
 800c9b4:	4b1b      	ldr	r3, [pc, #108]	; (800ca24 <_dtoa_r+0x654>)
 800c9b6:	ec51 0b19 	vmov	r0, r1, d9
 800c9ba:	f7f3 fc67 	bl	800028c <__adddf3>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	4649      	mov	r1, r9
 800c9c6:	f7f4 f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d173      	bne.n	800cab6 <_dtoa_r+0x6e6>
 800c9ce:	ec53 2b19 	vmov	r2, r3, d9
 800c9d2:	4914      	ldr	r1, [pc, #80]	; (800ca24 <_dtoa_r+0x654>)
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	f7f3 fc57 	bl	8000288 <__aeabi_dsub>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4640      	mov	r0, r8
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	f7f4 f87b 	bl	8000adc <__aeabi_dcmplt>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f af2f 	beq.w	800c84a <_dtoa_r+0x47a>
 800c9ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9ee:	1e6b      	subs	r3, r5, #1
 800c9f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9f6:	2b30      	cmp	r3, #48	; 0x30
 800c9f8:	d0f8      	beq.n	800c9ec <_dtoa_r+0x61c>
 800c9fa:	46bb      	mov	fp, r7
 800c9fc:	e04a      	b.n	800ca94 <_dtoa_r+0x6c4>
 800c9fe:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <_dtoa_r+0x648>)
 800ca00:	f7f3 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ca04:	4680      	mov	r8, r0
 800ca06:	4689      	mov	r9, r1
 800ca08:	e7bd      	b.n	800c986 <_dtoa_r+0x5b6>
 800ca0a:	bf00      	nop
 800ca0c:	0800e7f0 	.word	0x0800e7f0
 800ca10:	0800e7c8 	.word	0x0800e7c8
 800ca14:	3ff00000 	.word	0x3ff00000
 800ca18:	40240000 	.word	0x40240000
 800ca1c:	401c0000 	.word	0x401c0000
 800ca20:	40140000 	.word	0x40140000
 800ca24:	3fe00000 	.word	0x3fe00000
 800ca28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca2c:	9d00      	ldr	r5, [sp, #0]
 800ca2e:	4642      	mov	r2, r8
 800ca30:	464b      	mov	r3, r9
 800ca32:	4630      	mov	r0, r6
 800ca34:	4639      	mov	r1, r7
 800ca36:	f7f3 ff09 	bl	800084c <__aeabi_ddiv>
 800ca3a:	f7f4 f88d 	bl	8000b58 <__aeabi_d2iz>
 800ca3e:	9001      	str	r0, [sp, #4]
 800ca40:	f7f3 fd70 	bl	8000524 <__aeabi_i2d>
 800ca44:	4642      	mov	r2, r8
 800ca46:	464b      	mov	r3, r9
 800ca48:	f7f3 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f3 fc18 	bl	8000288 <__aeabi_dsub>
 800ca58:	9e01      	ldr	r6, [sp, #4]
 800ca5a:	9f04      	ldr	r7, [sp, #16]
 800ca5c:	3630      	adds	r6, #48	; 0x30
 800ca5e:	f805 6b01 	strb.w	r6, [r5], #1
 800ca62:	9e00      	ldr	r6, [sp, #0]
 800ca64:	1bae      	subs	r6, r5, r6
 800ca66:	42b7      	cmp	r7, r6
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	d134      	bne.n	800cad8 <_dtoa_r+0x708>
 800ca6e:	f7f3 fc0d 	bl	800028c <__adddf3>
 800ca72:	4642      	mov	r2, r8
 800ca74:	464b      	mov	r3, r9
 800ca76:	4606      	mov	r6, r0
 800ca78:	460f      	mov	r7, r1
 800ca7a:	f7f4 f84d 	bl	8000b18 <__aeabi_dcmpgt>
 800ca7e:	b9c8      	cbnz	r0, 800cab4 <_dtoa_r+0x6e4>
 800ca80:	4642      	mov	r2, r8
 800ca82:	464b      	mov	r3, r9
 800ca84:	4630      	mov	r0, r6
 800ca86:	4639      	mov	r1, r7
 800ca88:	f7f4 f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca8c:	b110      	cbz	r0, 800ca94 <_dtoa_r+0x6c4>
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	07db      	lsls	r3, r3, #31
 800ca92:	d40f      	bmi.n	800cab4 <_dtoa_r+0x6e4>
 800ca94:	4651      	mov	r1, sl
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 fbcc 	bl	800d234 <_Bfree>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa0:	702b      	strb	r3, [r5, #0]
 800caa2:	f10b 0301 	add.w	r3, fp, #1
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f43f ace2 	beq.w	800c474 <_dtoa_r+0xa4>
 800cab0:	601d      	str	r5, [r3, #0]
 800cab2:	e4df      	b.n	800c474 <_dtoa_r+0xa4>
 800cab4:	465f      	mov	r7, fp
 800cab6:	462b      	mov	r3, r5
 800cab8:	461d      	mov	r5, r3
 800caba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cabe:	2a39      	cmp	r2, #57	; 0x39
 800cac0:	d106      	bne.n	800cad0 <_dtoa_r+0x700>
 800cac2:	9a00      	ldr	r2, [sp, #0]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d1f7      	bne.n	800cab8 <_dtoa_r+0x6e8>
 800cac8:	9900      	ldr	r1, [sp, #0]
 800caca:	2230      	movs	r2, #48	; 0x30
 800cacc:	3701      	adds	r7, #1
 800cace:	700a      	strb	r2, [r1, #0]
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	3201      	adds	r2, #1
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e790      	b.n	800c9fa <_dtoa_r+0x62a>
 800cad8:	4ba3      	ldr	r3, [pc, #652]	; (800cd68 <_dtoa_r+0x998>)
 800cada:	2200      	movs	r2, #0
 800cadc:	f7f3 fd8c 	bl	80005f8 <__aeabi_dmul>
 800cae0:	2200      	movs	r2, #0
 800cae2:	2300      	movs	r3, #0
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	f7f3 ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 800caec:	2800      	cmp	r0, #0
 800caee:	d09e      	beq.n	800ca2e <_dtoa_r+0x65e>
 800caf0:	e7d0      	b.n	800ca94 <_dtoa_r+0x6c4>
 800caf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf4:	2a00      	cmp	r2, #0
 800caf6:	f000 80ca 	beq.w	800cc8e <_dtoa_r+0x8be>
 800cafa:	9a07      	ldr	r2, [sp, #28]
 800cafc:	2a01      	cmp	r2, #1
 800cafe:	f300 80ad 	bgt.w	800cc5c <_dtoa_r+0x88c>
 800cb02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	f000 80a5 	beq.w	800cc54 <_dtoa_r+0x884>
 800cb0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb0e:	9e08      	ldr	r6, [sp, #32]
 800cb10:	9d05      	ldr	r5, [sp, #20]
 800cb12:	9a05      	ldr	r2, [sp, #20]
 800cb14:	441a      	add	r2, r3
 800cb16:	9205      	str	r2, [sp, #20]
 800cb18:	9a06      	ldr	r2, [sp, #24]
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	441a      	add	r2, r3
 800cb1e:	4620      	mov	r0, r4
 800cb20:	9206      	str	r2, [sp, #24]
 800cb22:	f000 fc3d 	bl	800d3a0 <__i2b>
 800cb26:	4607      	mov	r7, r0
 800cb28:	b165      	cbz	r5, 800cb44 <_dtoa_r+0x774>
 800cb2a:	9b06      	ldr	r3, [sp, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dd09      	ble.n	800cb44 <_dtoa_r+0x774>
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	9a05      	ldr	r2, [sp, #20]
 800cb34:	bfa8      	it	ge
 800cb36:	462b      	movge	r3, r5
 800cb38:	1ad2      	subs	r2, r2, r3
 800cb3a:	9205      	str	r2, [sp, #20]
 800cb3c:	9a06      	ldr	r2, [sp, #24]
 800cb3e:	1aed      	subs	r5, r5, r3
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	9306      	str	r3, [sp, #24]
 800cb44:	9b08      	ldr	r3, [sp, #32]
 800cb46:	b1f3      	cbz	r3, 800cb86 <_dtoa_r+0x7b6>
 800cb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 80a3 	beq.w	800cc96 <_dtoa_r+0x8c6>
 800cb50:	2e00      	cmp	r6, #0
 800cb52:	dd10      	ble.n	800cb76 <_dtoa_r+0x7a6>
 800cb54:	4639      	mov	r1, r7
 800cb56:	4632      	mov	r2, r6
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 fce1 	bl	800d520 <__pow5mult>
 800cb5e:	4652      	mov	r2, sl
 800cb60:	4601      	mov	r1, r0
 800cb62:	4607      	mov	r7, r0
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 fc31 	bl	800d3cc <__multiply>
 800cb6a:	4651      	mov	r1, sl
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f000 fb60 	bl	800d234 <_Bfree>
 800cb74:	46c2      	mov	sl, r8
 800cb76:	9b08      	ldr	r3, [sp, #32]
 800cb78:	1b9a      	subs	r2, r3, r6
 800cb7a:	d004      	beq.n	800cb86 <_dtoa_r+0x7b6>
 800cb7c:	4651      	mov	r1, sl
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 fcce 	bl	800d520 <__pow5mult>
 800cb84:	4682      	mov	sl, r0
 800cb86:	2101      	movs	r1, #1
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fc09 	bl	800d3a0 <__i2b>
 800cb8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	4606      	mov	r6, r0
 800cb94:	f340 8081 	ble.w	800cc9a <_dtoa_r+0x8ca>
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fcbf 	bl	800d520 <__pow5mult>
 800cba2:	9b07      	ldr	r3, [sp, #28]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	4606      	mov	r6, r0
 800cba8:	dd7a      	ble.n	800cca0 <_dtoa_r+0x8d0>
 800cbaa:	f04f 0800 	mov.w	r8, #0
 800cbae:	6933      	ldr	r3, [r6, #16]
 800cbb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbb4:	6918      	ldr	r0, [r3, #16]
 800cbb6:	f000 fba5 	bl	800d304 <__hi0bits>
 800cbba:	f1c0 0020 	rsb	r0, r0, #32
 800cbbe:	9b06      	ldr	r3, [sp, #24]
 800cbc0:	4418      	add	r0, r3
 800cbc2:	f010 001f 	ands.w	r0, r0, #31
 800cbc6:	f000 8094 	beq.w	800ccf2 <_dtoa_r+0x922>
 800cbca:	f1c0 0320 	rsb	r3, r0, #32
 800cbce:	2b04      	cmp	r3, #4
 800cbd0:	f340 8085 	ble.w	800ccde <_dtoa_r+0x90e>
 800cbd4:	9b05      	ldr	r3, [sp, #20]
 800cbd6:	f1c0 001c 	rsb	r0, r0, #28
 800cbda:	4403      	add	r3, r0
 800cbdc:	9305      	str	r3, [sp, #20]
 800cbde:	9b06      	ldr	r3, [sp, #24]
 800cbe0:	4403      	add	r3, r0
 800cbe2:	4405      	add	r5, r0
 800cbe4:	9306      	str	r3, [sp, #24]
 800cbe6:	9b05      	ldr	r3, [sp, #20]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dd05      	ble.n	800cbf8 <_dtoa_r+0x828>
 800cbec:	4651      	mov	r1, sl
 800cbee:	461a      	mov	r2, r3
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f000 fcef 	bl	800d5d4 <__lshift>
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	9b06      	ldr	r3, [sp, #24]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	dd05      	ble.n	800cc0a <_dtoa_r+0x83a>
 800cbfe:	4631      	mov	r1, r6
 800cc00:	461a      	mov	r2, r3
 800cc02:	4620      	mov	r0, r4
 800cc04:	f000 fce6 	bl	800d5d4 <__lshift>
 800cc08:	4606      	mov	r6, r0
 800cc0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d072      	beq.n	800ccf6 <_dtoa_r+0x926>
 800cc10:	4631      	mov	r1, r6
 800cc12:	4650      	mov	r0, sl
 800cc14:	f000 fd4a 	bl	800d6ac <__mcmp>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	da6c      	bge.n	800ccf6 <_dtoa_r+0x926>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4651      	mov	r1, sl
 800cc20:	220a      	movs	r2, #10
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 fb28 	bl	800d278 <__multadd>
 800cc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc2e:	4682      	mov	sl, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 81b0 	beq.w	800cf96 <_dtoa_r+0xbc6>
 800cc36:	2300      	movs	r3, #0
 800cc38:	4639      	mov	r1, r7
 800cc3a:	220a      	movs	r2, #10
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 fb1b 	bl	800d278 <__multadd>
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	4607      	mov	r7, r0
 800cc48:	f300 8096 	bgt.w	800cd78 <_dtoa_r+0x9a8>
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	dc59      	bgt.n	800cd06 <_dtoa_r+0x936>
 800cc52:	e091      	b.n	800cd78 <_dtoa_r+0x9a8>
 800cc54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc5a:	e758      	b.n	800cb0e <_dtoa_r+0x73e>
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	1e5e      	subs	r6, r3, #1
 800cc60:	9b08      	ldr	r3, [sp, #32]
 800cc62:	42b3      	cmp	r3, r6
 800cc64:	bfbf      	itttt	lt
 800cc66:	9b08      	ldrlt	r3, [sp, #32]
 800cc68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc6a:	9608      	strlt	r6, [sp, #32]
 800cc6c:	1af3      	sublt	r3, r6, r3
 800cc6e:	bfb4      	ite	lt
 800cc70:	18d2      	addlt	r2, r2, r3
 800cc72:	1b9e      	subge	r6, r3, r6
 800cc74:	9b04      	ldr	r3, [sp, #16]
 800cc76:	bfbc      	itt	lt
 800cc78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc7a:	2600      	movlt	r6, #0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	bfb7      	itett	lt
 800cc80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc88:	1a9d      	sublt	r5, r3, r2
 800cc8a:	2300      	movlt	r3, #0
 800cc8c:	e741      	b.n	800cb12 <_dtoa_r+0x742>
 800cc8e:	9e08      	ldr	r6, [sp, #32]
 800cc90:	9d05      	ldr	r5, [sp, #20]
 800cc92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc94:	e748      	b.n	800cb28 <_dtoa_r+0x758>
 800cc96:	9a08      	ldr	r2, [sp, #32]
 800cc98:	e770      	b.n	800cb7c <_dtoa_r+0x7ac>
 800cc9a:	9b07      	ldr	r3, [sp, #28]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	dc19      	bgt.n	800ccd4 <_dtoa_r+0x904>
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	b9bb      	cbnz	r3, 800ccd4 <_dtoa_r+0x904>
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccaa:	b99b      	cbnz	r3, 800ccd4 <_dtoa_r+0x904>
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccb2:	0d1b      	lsrs	r3, r3, #20
 800ccb4:	051b      	lsls	r3, r3, #20
 800ccb6:	b183      	cbz	r3, 800ccda <_dtoa_r+0x90a>
 800ccb8:	9b05      	ldr	r3, [sp, #20]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	9305      	str	r3, [sp, #20]
 800ccbe:	9b06      	ldr	r3, [sp, #24]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	9306      	str	r3, [sp, #24]
 800ccc4:	f04f 0801 	mov.w	r8, #1
 800ccc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f47f af6f 	bne.w	800cbae <_dtoa_r+0x7de>
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	e774      	b.n	800cbbe <_dtoa_r+0x7ee>
 800ccd4:	f04f 0800 	mov.w	r8, #0
 800ccd8:	e7f6      	b.n	800ccc8 <_dtoa_r+0x8f8>
 800ccda:	4698      	mov	r8, r3
 800ccdc:	e7f4      	b.n	800ccc8 <_dtoa_r+0x8f8>
 800ccde:	d082      	beq.n	800cbe6 <_dtoa_r+0x816>
 800cce0:	9a05      	ldr	r2, [sp, #20]
 800cce2:	331c      	adds	r3, #28
 800cce4:	441a      	add	r2, r3
 800cce6:	9205      	str	r2, [sp, #20]
 800cce8:	9a06      	ldr	r2, [sp, #24]
 800ccea:	441a      	add	r2, r3
 800ccec:	441d      	add	r5, r3
 800ccee:	9206      	str	r2, [sp, #24]
 800ccf0:	e779      	b.n	800cbe6 <_dtoa_r+0x816>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	e7f4      	b.n	800cce0 <_dtoa_r+0x910>
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	dc37      	bgt.n	800cd6c <_dtoa_r+0x99c>
 800ccfc:	9b07      	ldr	r3, [sp, #28]
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	dd34      	ble.n	800cd6c <_dtoa_r+0x99c>
 800cd02:	9b04      	ldr	r3, [sp, #16]
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	9b01      	ldr	r3, [sp, #4]
 800cd08:	b963      	cbnz	r3, 800cd24 <_dtoa_r+0x954>
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	2205      	movs	r2, #5
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 fab2 	bl	800d278 <__multadd>
 800cd14:	4601      	mov	r1, r0
 800cd16:	4606      	mov	r6, r0
 800cd18:	4650      	mov	r0, sl
 800cd1a:	f000 fcc7 	bl	800d6ac <__mcmp>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	f73f adbb 	bgt.w	800c89a <_dtoa_r+0x4ca>
 800cd24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd26:	9d00      	ldr	r5, [sp, #0]
 800cd28:	ea6f 0b03 	mvn.w	fp, r3
 800cd2c:	f04f 0800 	mov.w	r8, #0
 800cd30:	4631      	mov	r1, r6
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 fa7e 	bl	800d234 <_Bfree>
 800cd38:	2f00      	cmp	r7, #0
 800cd3a:	f43f aeab 	beq.w	800ca94 <_dtoa_r+0x6c4>
 800cd3e:	f1b8 0f00 	cmp.w	r8, #0
 800cd42:	d005      	beq.n	800cd50 <_dtoa_r+0x980>
 800cd44:	45b8      	cmp	r8, r7
 800cd46:	d003      	beq.n	800cd50 <_dtoa_r+0x980>
 800cd48:	4641      	mov	r1, r8
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 fa72 	bl	800d234 <_Bfree>
 800cd50:	4639      	mov	r1, r7
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 fa6e 	bl	800d234 <_Bfree>
 800cd58:	e69c      	b.n	800ca94 <_dtoa_r+0x6c4>
 800cd5a:	2600      	movs	r6, #0
 800cd5c:	4637      	mov	r7, r6
 800cd5e:	e7e1      	b.n	800cd24 <_dtoa_r+0x954>
 800cd60:	46bb      	mov	fp, r7
 800cd62:	4637      	mov	r7, r6
 800cd64:	e599      	b.n	800c89a <_dtoa_r+0x4ca>
 800cd66:	bf00      	nop
 800cd68:	40240000 	.word	0x40240000
 800cd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80c8 	beq.w	800cf04 <_dtoa_r+0xb34>
 800cd74:	9b04      	ldr	r3, [sp, #16]
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	dd05      	ble.n	800cd88 <_dtoa_r+0x9b8>
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	462a      	mov	r2, r5
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 fc27 	bl	800d5d4 <__lshift>
 800cd86:	4607      	mov	r7, r0
 800cd88:	f1b8 0f00 	cmp.w	r8, #0
 800cd8c:	d05b      	beq.n	800ce46 <_dtoa_r+0xa76>
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	4620      	mov	r0, r4
 800cd92:	f000 fa0f 	bl	800d1b4 <_Balloc>
 800cd96:	4605      	mov	r5, r0
 800cd98:	b928      	cbnz	r0, 800cda6 <_dtoa_r+0x9d6>
 800cd9a:	4b83      	ldr	r3, [pc, #524]	; (800cfa8 <_dtoa_r+0xbd8>)
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cda2:	f7ff bb2e 	b.w	800c402 <_dtoa_r+0x32>
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	3202      	adds	r2, #2
 800cdaa:	0092      	lsls	r2, r2, #2
 800cdac:	f107 010c 	add.w	r1, r7, #12
 800cdb0:	300c      	adds	r0, #12
 800cdb2:	f7ff fa58 	bl	800c266 <memcpy>
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	4629      	mov	r1, r5
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fc0a 	bl	800d5d4 <__lshift>
 800cdc0:	9b00      	ldr	r3, [sp, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdca:	4413      	add	r3, r2
 800cdcc:	9308      	str	r3, [sp, #32]
 800cdce:	9b02      	ldr	r3, [sp, #8]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	46b8      	mov	r8, r7
 800cdd6:	9306      	str	r3, [sp, #24]
 800cdd8:	4607      	mov	r7, r0
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	4631      	mov	r1, r6
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4650      	mov	r0, sl
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	f7ff fa6c 	bl	800c2c0 <quorem>
 800cde8:	4641      	mov	r1, r8
 800cdea:	9002      	str	r0, [sp, #8]
 800cdec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	f000 fc5b 	bl	800d6ac <__mcmp>
 800cdf6:	463a      	mov	r2, r7
 800cdf8:	9005      	str	r0, [sp, #20]
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 fc71 	bl	800d6e4 <__mdiff>
 800ce02:	68c2      	ldr	r2, [r0, #12]
 800ce04:	4605      	mov	r5, r0
 800ce06:	bb02      	cbnz	r2, 800ce4a <_dtoa_r+0xa7a>
 800ce08:	4601      	mov	r1, r0
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	f000 fc4e 	bl	800d6ac <__mcmp>
 800ce10:	4602      	mov	r2, r0
 800ce12:	4629      	mov	r1, r5
 800ce14:	4620      	mov	r0, r4
 800ce16:	9209      	str	r2, [sp, #36]	; 0x24
 800ce18:	f000 fa0c 	bl	800d234 <_Bfree>
 800ce1c:	9b07      	ldr	r3, [sp, #28]
 800ce1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce20:	9d04      	ldr	r5, [sp, #16]
 800ce22:	ea43 0102 	orr.w	r1, r3, r2
 800ce26:	9b06      	ldr	r3, [sp, #24]
 800ce28:	4319      	orrs	r1, r3
 800ce2a:	d110      	bne.n	800ce4e <_dtoa_r+0xa7e>
 800ce2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce30:	d029      	beq.n	800ce86 <_dtoa_r+0xab6>
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	dd02      	ble.n	800ce3e <_dtoa_r+0xa6e>
 800ce38:	9b02      	ldr	r3, [sp, #8]
 800ce3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce3e:	9b01      	ldr	r3, [sp, #4]
 800ce40:	f883 9000 	strb.w	r9, [r3]
 800ce44:	e774      	b.n	800cd30 <_dtoa_r+0x960>
 800ce46:	4638      	mov	r0, r7
 800ce48:	e7ba      	b.n	800cdc0 <_dtoa_r+0x9f0>
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	e7e1      	b.n	800ce12 <_dtoa_r+0xa42>
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	db04      	blt.n	800ce5e <_dtoa_r+0xa8e>
 800ce54:	9907      	ldr	r1, [sp, #28]
 800ce56:	430b      	orrs	r3, r1
 800ce58:	9906      	ldr	r1, [sp, #24]
 800ce5a:	430b      	orrs	r3, r1
 800ce5c:	d120      	bne.n	800cea0 <_dtoa_r+0xad0>
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	dded      	ble.n	800ce3e <_dtoa_r+0xa6e>
 800ce62:	4651      	mov	r1, sl
 800ce64:	2201      	movs	r2, #1
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 fbb4 	bl	800d5d4 <__lshift>
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4682      	mov	sl, r0
 800ce70:	f000 fc1c 	bl	800d6ac <__mcmp>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	dc03      	bgt.n	800ce80 <_dtoa_r+0xab0>
 800ce78:	d1e1      	bne.n	800ce3e <_dtoa_r+0xa6e>
 800ce7a:	f019 0f01 	tst.w	r9, #1
 800ce7e:	d0de      	beq.n	800ce3e <_dtoa_r+0xa6e>
 800ce80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce84:	d1d8      	bne.n	800ce38 <_dtoa_r+0xa68>
 800ce86:	9a01      	ldr	r2, [sp, #4]
 800ce88:	2339      	movs	r3, #57	; 0x39
 800ce8a:	7013      	strb	r3, [r2, #0]
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	461d      	mov	r5, r3
 800ce90:	3b01      	subs	r3, #1
 800ce92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce96:	2a39      	cmp	r2, #57	; 0x39
 800ce98:	d06c      	beq.n	800cf74 <_dtoa_r+0xba4>
 800ce9a:	3201      	adds	r2, #1
 800ce9c:	701a      	strb	r2, [r3, #0]
 800ce9e:	e747      	b.n	800cd30 <_dtoa_r+0x960>
 800cea0:	2a00      	cmp	r2, #0
 800cea2:	dd07      	ble.n	800ceb4 <_dtoa_r+0xae4>
 800cea4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cea8:	d0ed      	beq.n	800ce86 <_dtoa_r+0xab6>
 800ceaa:	9a01      	ldr	r2, [sp, #4]
 800ceac:	f109 0301 	add.w	r3, r9, #1
 800ceb0:	7013      	strb	r3, [r2, #0]
 800ceb2:	e73d      	b.n	800cd30 <_dtoa_r+0x960>
 800ceb4:	9b04      	ldr	r3, [sp, #16]
 800ceb6:	9a08      	ldr	r2, [sp, #32]
 800ceb8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d043      	beq.n	800cf48 <_dtoa_r+0xb78>
 800cec0:	4651      	mov	r1, sl
 800cec2:	2300      	movs	r3, #0
 800cec4:	220a      	movs	r2, #10
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 f9d6 	bl	800d278 <__multadd>
 800cecc:	45b8      	cmp	r8, r7
 800cece:	4682      	mov	sl, r0
 800ced0:	f04f 0300 	mov.w	r3, #0
 800ced4:	f04f 020a 	mov.w	r2, #10
 800ced8:	4641      	mov	r1, r8
 800ceda:	4620      	mov	r0, r4
 800cedc:	d107      	bne.n	800ceee <_dtoa_r+0xb1e>
 800cede:	f000 f9cb 	bl	800d278 <__multadd>
 800cee2:	4680      	mov	r8, r0
 800cee4:	4607      	mov	r7, r0
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	3301      	adds	r3, #1
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	e775      	b.n	800cdda <_dtoa_r+0xa0a>
 800ceee:	f000 f9c3 	bl	800d278 <__multadd>
 800cef2:	4639      	mov	r1, r7
 800cef4:	4680      	mov	r8, r0
 800cef6:	2300      	movs	r3, #0
 800cef8:	220a      	movs	r2, #10
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 f9bc 	bl	800d278 <__multadd>
 800cf00:	4607      	mov	r7, r0
 800cf02:	e7f0      	b.n	800cee6 <_dtoa_r+0xb16>
 800cf04:	9b04      	ldr	r3, [sp, #16]
 800cf06:	9301      	str	r3, [sp, #4]
 800cf08:	9d00      	ldr	r5, [sp, #0]
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4650      	mov	r0, sl
 800cf0e:	f7ff f9d7 	bl	800c2c0 <quorem>
 800cf12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf16:	9b00      	ldr	r3, [sp, #0]
 800cf18:	f805 9b01 	strb.w	r9, [r5], #1
 800cf1c:	1aea      	subs	r2, r5, r3
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	4293      	cmp	r3, r2
 800cf22:	dd07      	ble.n	800cf34 <_dtoa_r+0xb64>
 800cf24:	4651      	mov	r1, sl
 800cf26:	2300      	movs	r3, #0
 800cf28:	220a      	movs	r2, #10
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 f9a4 	bl	800d278 <__multadd>
 800cf30:	4682      	mov	sl, r0
 800cf32:	e7ea      	b.n	800cf0a <_dtoa_r+0xb3a>
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	bfc8      	it	gt
 800cf3a:	461d      	movgt	r5, r3
 800cf3c:	9b00      	ldr	r3, [sp, #0]
 800cf3e:	bfd8      	it	le
 800cf40:	2501      	movle	r5, #1
 800cf42:	441d      	add	r5, r3
 800cf44:	f04f 0800 	mov.w	r8, #0
 800cf48:	4651      	mov	r1, sl
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f000 fb41 	bl	800d5d4 <__lshift>
 800cf52:	4631      	mov	r1, r6
 800cf54:	4682      	mov	sl, r0
 800cf56:	f000 fba9 	bl	800d6ac <__mcmp>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	dc96      	bgt.n	800ce8c <_dtoa_r+0xabc>
 800cf5e:	d102      	bne.n	800cf66 <_dtoa_r+0xb96>
 800cf60:	f019 0f01 	tst.w	r9, #1
 800cf64:	d192      	bne.n	800ce8c <_dtoa_r+0xabc>
 800cf66:	462b      	mov	r3, r5
 800cf68:	461d      	mov	r5, r3
 800cf6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf6e:	2a30      	cmp	r2, #48	; 0x30
 800cf70:	d0fa      	beq.n	800cf68 <_dtoa_r+0xb98>
 800cf72:	e6dd      	b.n	800cd30 <_dtoa_r+0x960>
 800cf74:	9a00      	ldr	r2, [sp, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d189      	bne.n	800ce8e <_dtoa_r+0xabe>
 800cf7a:	f10b 0b01 	add.w	fp, fp, #1
 800cf7e:	2331      	movs	r3, #49	; 0x31
 800cf80:	e796      	b.n	800ceb0 <_dtoa_r+0xae0>
 800cf82:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <_dtoa_r+0xbdc>)
 800cf84:	f7ff ba99 	b.w	800c4ba <_dtoa_r+0xea>
 800cf88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f47f aa6d 	bne.w	800c46a <_dtoa_r+0x9a>
 800cf90:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <_dtoa_r+0xbe0>)
 800cf92:	f7ff ba92 	b.w	800c4ba <_dtoa_r+0xea>
 800cf96:	9b01      	ldr	r3, [sp, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	dcb5      	bgt.n	800cf08 <_dtoa_r+0xb38>
 800cf9c:	9b07      	ldr	r3, [sp, #28]
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	f73f aeb1 	bgt.w	800cd06 <_dtoa_r+0x936>
 800cfa4:	e7b0      	b.n	800cf08 <_dtoa_r+0xb38>
 800cfa6:	bf00      	nop
 800cfa8:	0800e75c 	.word	0x0800e75c
 800cfac:	0800e697 	.word	0x0800e697
 800cfb0:	0800e6f7 	.word	0x0800e6f7

0800cfb4 <_free_r>:
 800cfb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfb6:	2900      	cmp	r1, #0
 800cfb8:	d044      	beq.n	800d044 <_free_r+0x90>
 800cfba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfbe:	9001      	str	r0, [sp, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f1a1 0404 	sub.w	r4, r1, #4
 800cfc6:	bfb8      	it	lt
 800cfc8:	18e4      	addlt	r4, r4, r3
 800cfca:	f000 f8e7 	bl	800d19c <__malloc_lock>
 800cfce:	4a1e      	ldr	r2, [pc, #120]	; (800d048 <_free_r+0x94>)
 800cfd0:	9801      	ldr	r0, [sp, #4]
 800cfd2:	6813      	ldr	r3, [r2, #0]
 800cfd4:	b933      	cbnz	r3, 800cfe4 <_free_r+0x30>
 800cfd6:	6063      	str	r3, [r4, #4]
 800cfd8:	6014      	str	r4, [r2, #0]
 800cfda:	b003      	add	sp, #12
 800cfdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfe0:	f000 b8e2 	b.w	800d1a8 <__malloc_unlock>
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	d908      	bls.n	800cffa <_free_r+0x46>
 800cfe8:	6825      	ldr	r5, [r4, #0]
 800cfea:	1961      	adds	r1, r4, r5
 800cfec:	428b      	cmp	r3, r1
 800cfee:	bf01      	itttt	eq
 800cff0:	6819      	ldreq	r1, [r3, #0]
 800cff2:	685b      	ldreq	r3, [r3, #4]
 800cff4:	1949      	addeq	r1, r1, r5
 800cff6:	6021      	streq	r1, [r4, #0]
 800cff8:	e7ed      	b.n	800cfd6 <_free_r+0x22>
 800cffa:	461a      	mov	r2, r3
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	b10b      	cbz	r3, 800d004 <_free_r+0x50>
 800d000:	42a3      	cmp	r3, r4
 800d002:	d9fa      	bls.n	800cffa <_free_r+0x46>
 800d004:	6811      	ldr	r1, [r2, #0]
 800d006:	1855      	adds	r5, r2, r1
 800d008:	42a5      	cmp	r5, r4
 800d00a:	d10b      	bne.n	800d024 <_free_r+0x70>
 800d00c:	6824      	ldr	r4, [r4, #0]
 800d00e:	4421      	add	r1, r4
 800d010:	1854      	adds	r4, r2, r1
 800d012:	42a3      	cmp	r3, r4
 800d014:	6011      	str	r1, [r2, #0]
 800d016:	d1e0      	bne.n	800cfda <_free_r+0x26>
 800d018:	681c      	ldr	r4, [r3, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	6053      	str	r3, [r2, #4]
 800d01e:	440c      	add	r4, r1
 800d020:	6014      	str	r4, [r2, #0]
 800d022:	e7da      	b.n	800cfda <_free_r+0x26>
 800d024:	d902      	bls.n	800d02c <_free_r+0x78>
 800d026:	230c      	movs	r3, #12
 800d028:	6003      	str	r3, [r0, #0]
 800d02a:	e7d6      	b.n	800cfda <_free_r+0x26>
 800d02c:	6825      	ldr	r5, [r4, #0]
 800d02e:	1961      	adds	r1, r4, r5
 800d030:	428b      	cmp	r3, r1
 800d032:	bf04      	itt	eq
 800d034:	6819      	ldreq	r1, [r3, #0]
 800d036:	685b      	ldreq	r3, [r3, #4]
 800d038:	6063      	str	r3, [r4, #4]
 800d03a:	bf04      	itt	eq
 800d03c:	1949      	addeq	r1, r1, r5
 800d03e:	6021      	streq	r1, [r4, #0]
 800d040:	6054      	str	r4, [r2, #4]
 800d042:	e7ca      	b.n	800cfda <_free_r+0x26>
 800d044:	b003      	add	sp, #12
 800d046:	bd30      	pop	{r4, r5, pc}
 800d048:	20000ff8 	.word	0x20000ff8

0800d04c <malloc>:
 800d04c:	4b02      	ldr	r3, [pc, #8]	; (800d058 <malloc+0xc>)
 800d04e:	4601      	mov	r1, r0
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	f000 b823 	b.w	800d09c <_malloc_r>
 800d056:	bf00      	nop
 800d058:	2000007c 	.word	0x2000007c

0800d05c <sbrk_aligned>:
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	4e0e      	ldr	r6, [pc, #56]	; (800d098 <sbrk_aligned+0x3c>)
 800d060:	460c      	mov	r4, r1
 800d062:	6831      	ldr	r1, [r6, #0]
 800d064:	4605      	mov	r5, r0
 800d066:	b911      	cbnz	r1, 800d06e <sbrk_aligned+0x12>
 800d068:	f000 fe52 	bl	800dd10 <_sbrk_r>
 800d06c:	6030      	str	r0, [r6, #0]
 800d06e:	4621      	mov	r1, r4
 800d070:	4628      	mov	r0, r5
 800d072:	f000 fe4d 	bl	800dd10 <_sbrk_r>
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	d00a      	beq.n	800d090 <sbrk_aligned+0x34>
 800d07a:	1cc4      	adds	r4, r0, #3
 800d07c:	f024 0403 	bic.w	r4, r4, #3
 800d080:	42a0      	cmp	r0, r4
 800d082:	d007      	beq.n	800d094 <sbrk_aligned+0x38>
 800d084:	1a21      	subs	r1, r4, r0
 800d086:	4628      	mov	r0, r5
 800d088:	f000 fe42 	bl	800dd10 <_sbrk_r>
 800d08c:	3001      	adds	r0, #1
 800d08e:	d101      	bne.n	800d094 <sbrk_aligned+0x38>
 800d090:	f04f 34ff 	mov.w	r4, #4294967295
 800d094:	4620      	mov	r0, r4
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	20000ffc 	.word	0x20000ffc

0800d09c <_malloc_r>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	1ccd      	adds	r5, r1, #3
 800d0a2:	f025 0503 	bic.w	r5, r5, #3
 800d0a6:	3508      	adds	r5, #8
 800d0a8:	2d0c      	cmp	r5, #12
 800d0aa:	bf38      	it	cc
 800d0ac:	250c      	movcc	r5, #12
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	db01      	blt.n	800d0b8 <_malloc_r+0x1c>
 800d0b4:	42a9      	cmp	r1, r5
 800d0b6:	d905      	bls.n	800d0c4 <_malloc_r+0x28>
 800d0b8:	230c      	movs	r3, #12
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	2600      	movs	r6, #0
 800d0be:	4630      	mov	r0, r6
 800d0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d198 <_malloc_r+0xfc>
 800d0c8:	f000 f868 	bl	800d19c <__malloc_lock>
 800d0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d0:	461c      	mov	r4, r3
 800d0d2:	bb5c      	cbnz	r4, 800d12c <_malloc_r+0x90>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f7ff ffc0 	bl	800d05c <sbrk_aligned>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	4604      	mov	r4, r0
 800d0e0:	d155      	bne.n	800d18e <_malloc_r+0xf2>
 800d0e2:	f8d8 4000 	ldr.w	r4, [r8]
 800d0e6:	4626      	mov	r6, r4
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	d145      	bne.n	800d178 <_malloc_r+0xdc>
 800d0ec:	2c00      	cmp	r4, #0
 800d0ee:	d048      	beq.n	800d182 <_malloc_r+0xe6>
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	eb04 0903 	add.w	r9, r4, r3
 800d0fa:	f000 fe09 	bl	800dd10 <_sbrk_r>
 800d0fe:	4581      	cmp	r9, r0
 800d100:	d13f      	bne.n	800d182 <_malloc_r+0xe6>
 800d102:	6821      	ldr	r1, [r4, #0]
 800d104:	1a6d      	subs	r5, r5, r1
 800d106:	4629      	mov	r1, r5
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff ffa7 	bl	800d05c <sbrk_aligned>
 800d10e:	3001      	adds	r0, #1
 800d110:	d037      	beq.n	800d182 <_malloc_r+0xe6>
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	442b      	add	r3, r5
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	f8d8 3000 	ldr.w	r3, [r8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d038      	beq.n	800d192 <_malloc_r+0xf6>
 800d120:	685a      	ldr	r2, [r3, #4]
 800d122:	42a2      	cmp	r2, r4
 800d124:	d12b      	bne.n	800d17e <_malloc_r+0xe2>
 800d126:	2200      	movs	r2, #0
 800d128:	605a      	str	r2, [r3, #4]
 800d12a:	e00f      	b.n	800d14c <_malloc_r+0xb0>
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	1b52      	subs	r2, r2, r5
 800d130:	d41f      	bmi.n	800d172 <_malloc_r+0xd6>
 800d132:	2a0b      	cmp	r2, #11
 800d134:	d917      	bls.n	800d166 <_malloc_r+0xca>
 800d136:	1961      	adds	r1, r4, r5
 800d138:	42a3      	cmp	r3, r4
 800d13a:	6025      	str	r5, [r4, #0]
 800d13c:	bf18      	it	ne
 800d13e:	6059      	strne	r1, [r3, #4]
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	bf08      	it	eq
 800d144:	f8c8 1000 	streq.w	r1, [r8]
 800d148:	5162      	str	r2, [r4, r5]
 800d14a:	604b      	str	r3, [r1, #4]
 800d14c:	4638      	mov	r0, r7
 800d14e:	f104 060b 	add.w	r6, r4, #11
 800d152:	f000 f829 	bl	800d1a8 <__malloc_unlock>
 800d156:	f026 0607 	bic.w	r6, r6, #7
 800d15a:	1d23      	adds	r3, r4, #4
 800d15c:	1af2      	subs	r2, r6, r3
 800d15e:	d0ae      	beq.n	800d0be <_malloc_r+0x22>
 800d160:	1b9b      	subs	r3, r3, r6
 800d162:	50a3      	str	r3, [r4, r2]
 800d164:	e7ab      	b.n	800d0be <_malloc_r+0x22>
 800d166:	42a3      	cmp	r3, r4
 800d168:	6862      	ldr	r2, [r4, #4]
 800d16a:	d1dd      	bne.n	800d128 <_malloc_r+0x8c>
 800d16c:	f8c8 2000 	str.w	r2, [r8]
 800d170:	e7ec      	b.n	800d14c <_malloc_r+0xb0>
 800d172:	4623      	mov	r3, r4
 800d174:	6864      	ldr	r4, [r4, #4]
 800d176:	e7ac      	b.n	800d0d2 <_malloc_r+0x36>
 800d178:	4634      	mov	r4, r6
 800d17a:	6876      	ldr	r6, [r6, #4]
 800d17c:	e7b4      	b.n	800d0e8 <_malloc_r+0x4c>
 800d17e:	4613      	mov	r3, r2
 800d180:	e7cc      	b.n	800d11c <_malloc_r+0x80>
 800d182:	230c      	movs	r3, #12
 800d184:	603b      	str	r3, [r7, #0]
 800d186:	4638      	mov	r0, r7
 800d188:	f000 f80e 	bl	800d1a8 <__malloc_unlock>
 800d18c:	e797      	b.n	800d0be <_malloc_r+0x22>
 800d18e:	6025      	str	r5, [r4, #0]
 800d190:	e7dc      	b.n	800d14c <_malloc_r+0xb0>
 800d192:	605b      	str	r3, [r3, #4]
 800d194:	deff      	udf	#255	; 0xff
 800d196:	bf00      	nop
 800d198:	20000ff8 	.word	0x20000ff8

0800d19c <__malloc_lock>:
 800d19c:	4801      	ldr	r0, [pc, #4]	; (800d1a4 <__malloc_lock+0x8>)
 800d19e:	f7ff b860 	b.w	800c262 <__retarget_lock_acquire_recursive>
 800d1a2:	bf00      	nop
 800d1a4:	20000ff4 	.word	0x20000ff4

0800d1a8 <__malloc_unlock>:
 800d1a8:	4801      	ldr	r0, [pc, #4]	; (800d1b0 <__malloc_unlock+0x8>)
 800d1aa:	f7ff b85b 	b.w	800c264 <__retarget_lock_release_recursive>
 800d1ae:	bf00      	nop
 800d1b0:	20000ff4 	.word	0x20000ff4

0800d1b4 <_Balloc>:
 800d1b4:	b570      	push	{r4, r5, r6, lr}
 800d1b6:	69c6      	ldr	r6, [r0, #28]
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	460d      	mov	r5, r1
 800d1bc:	b976      	cbnz	r6, 800d1dc <_Balloc+0x28>
 800d1be:	2010      	movs	r0, #16
 800d1c0:	f7ff ff44 	bl	800d04c <malloc>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	61e0      	str	r0, [r4, #28]
 800d1c8:	b920      	cbnz	r0, 800d1d4 <_Balloc+0x20>
 800d1ca:	4b18      	ldr	r3, [pc, #96]	; (800d22c <_Balloc+0x78>)
 800d1cc:	4818      	ldr	r0, [pc, #96]	; (800d230 <_Balloc+0x7c>)
 800d1ce:	216b      	movs	r1, #107	; 0x6b
 800d1d0:	f7ff f858 	bl	800c284 <__assert_func>
 800d1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1d8:	6006      	str	r6, [r0, #0]
 800d1da:	60c6      	str	r6, [r0, #12]
 800d1dc:	69e6      	ldr	r6, [r4, #28]
 800d1de:	68f3      	ldr	r3, [r6, #12]
 800d1e0:	b183      	cbz	r3, 800d204 <_Balloc+0x50>
 800d1e2:	69e3      	ldr	r3, [r4, #28]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1ea:	b9b8      	cbnz	r0, 800d21c <_Balloc+0x68>
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	fa01 f605 	lsl.w	r6, r1, r5
 800d1f2:	1d72      	adds	r2, r6, #5
 800d1f4:	0092      	lsls	r2, r2, #2
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f000 fda1 	bl	800dd3e <_calloc_r>
 800d1fc:	b160      	cbz	r0, 800d218 <_Balloc+0x64>
 800d1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d202:	e00e      	b.n	800d222 <_Balloc+0x6e>
 800d204:	2221      	movs	r2, #33	; 0x21
 800d206:	2104      	movs	r1, #4
 800d208:	4620      	mov	r0, r4
 800d20a:	f000 fd98 	bl	800dd3e <_calloc_r>
 800d20e:	69e3      	ldr	r3, [r4, #28]
 800d210:	60f0      	str	r0, [r6, #12]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e4      	bne.n	800d1e2 <_Balloc+0x2e>
 800d218:	2000      	movs	r0, #0
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	6802      	ldr	r2, [r0, #0]
 800d21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d222:	2300      	movs	r3, #0
 800d224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d228:	e7f7      	b.n	800d21a <_Balloc+0x66>
 800d22a:	bf00      	nop
 800d22c:	0800e618 	.word	0x0800e618
 800d230:	0800e76d 	.word	0x0800e76d

0800d234 <_Bfree>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	69c6      	ldr	r6, [r0, #28]
 800d238:	4605      	mov	r5, r0
 800d23a:	460c      	mov	r4, r1
 800d23c:	b976      	cbnz	r6, 800d25c <_Bfree+0x28>
 800d23e:	2010      	movs	r0, #16
 800d240:	f7ff ff04 	bl	800d04c <malloc>
 800d244:	4602      	mov	r2, r0
 800d246:	61e8      	str	r0, [r5, #28]
 800d248:	b920      	cbnz	r0, 800d254 <_Bfree+0x20>
 800d24a:	4b09      	ldr	r3, [pc, #36]	; (800d270 <_Bfree+0x3c>)
 800d24c:	4809      	ldr	r0, [pc, #36]	; (800d274 <_Bfree+0x40>)
 800d24e:	218f      	movs	r1, #143	; 0x8f
 800d250:	f7ff f818 	bl	800c284 <__assert_func>
 800d254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d258:	6006      	str	r6, [r0, #0]
 800d25a:	60c6      	str	r6, [r0, #12]
 800d25c:	b13c      	cbz	r4, 800d26e <_Bfree+0x3a>
 800d25e:	69eb      	ldr	r3, [r5, #28]
 800d260:	6862      	ldr	r2, [r4, #4]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d268:	6021      	str	r1, [r4, #0]
 800d26a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	0800e618 	.word	0x0800e618
 800d274:	0800e76d 	.word	0x0800e76d

0800d278 <__multadd>:
 800d278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d27c:	690d      	ldr	r5, [r1, #16]
 800d27e:	4607      	mov	r7, r0
 800d280:	460c      	mov	r4, r1
 800d282:	461e      	mov	r6, r3
 800d284:	f101 0c14 	add.w	ip, r1, #20
 800d288:	2000      	movs	r0, #0
 800d28a:	f8dc 3000 	ldr.w	r3, [ip]
 800d28e:	b299      	uxth	r1, r3
 800d290:	fb02 6101 	mla	r1, r2, r1, r6
 800d294:	0c1e      	lsrs	r6, r3, #16
 800d296:	0c0b      	lsrs	r3, r1, #16
 800d298:	fb02 3306 	mla	r3, r2, r6, r3
 800d29c:	b289      	uxth	r1, r1
 800d29e:	3001      	adds	r0, #1
 800d2a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d2a4:	4285      	cmp	r5, r0
 800d2a6:	f84c 1b04 	str.w	r1, [ip], #4
 800d2aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2ae:	dcec      	bgt.n	800d28a <__multadd+0x12>
 800d2b0:	b30e      	cbz	r6, 800d2f6 <__multadd+0x7e>
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	42ab      	cmp	r3, r5
 800d2b6:	dc19      	bgt.n	800d2ec <__multadd+0x74>
 800d2b8:	6861      	ldr	r1, [r4, #4]
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	3101      	adds	r1, #1
 800d2be:	f7ff ff79 	bl	800d1b4 <_Balloc>
 800d2c2:	4680      	mov	r8, r0
 800d2c4:	b928      	cbnz	r0, 800d2d2 <__multadd+0x5a>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <__multadd+0x84>)
 800d2ca:	480d      	ldr	r0, [pc, #52]	; (800d300 <__multadd+0x88>)
 800d2cc:	21ba      	movs	r1, #186	; 0xba
 800d2ce:	f7fe ffd9 	bl	800c284 <__assert_func>
 800d2d2:	6922      	ldr	r2, [r4, #16]
 800d2d4:	3202      	adds	r2, #2
 800d2d6:	f104 010c 	add.w	r1, r4, #12
 800d2da:	0092      	lsls	r2, r2, #2
 800d2dc:	300c      	adds	r0, #12
 800d2de:	f7fe ffc2 	bl	800c266 <memcpy>
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f7ff ffa5 	bl	800d234 <_Bfree>
 800d2ea:	4644      	mov	r4, r8
 800d2ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2f0:	3501      	adds	r5, #1
 800d2f2:	615e      	str	r6, [r3, #20]
 800d2f4:	6125      	str	r5, [r4, #16]
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2fc:	0800e75c 	.word	0x0800e75c
 800d300:	0800e76d 	.word	0x0800e76d

0800d304 <__hi0bits>:
 800d304:	0c03      	lsrs	r3, r0, #16
 800d306:	041b      	lsls	r3, r3, #16
 800d308:	b9d3      	cbnz	r3, 800d340 <__hi0bits+0x3c>
 800d30a:	0400      	lsls	r0, r0, #16
 800d30c:	2310      	movs	r3, #16
 800d30e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d312:	bf04      	itt	eq
 800d314:	0200      	lsleq	r0, r0, #8
 800d316:	3308      	addeq	r3, #8
 800d318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d31c:	bf04      	itt	eq
 800d31e:	0100      	lsleq	r0, r0, #4
 800d320:	3304      	addeq	r3, #4
 800d322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d326:	bf04      	itt	eq
 800d328:	0080      	lsleq	r0, r0, #2
 800d32a:	3302      	addeq	r3, #2
 800d32c:	2800      	cmp	r0, #0
 800d32e:	db05      	blt.n	800d33c <__hi0bits+0x38>
 800d330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d334:	f103 0301 	add.w	r3, r3, #1
 800d338:	bf08      	it	eq
 800d33a:	2320      	moveq	r3, #32
 800d33c:	4618      	mov	r0, r3
 800d33e:	4770      	bx	lr
 800d340:	2300      	movs	r3, #0
 800d342:	e7e4      	b.n	800d30e <__hi0bits+0xa>

0800d344 <__lo0bits>:
 800d344:	6803      	ldr	r3, [r0, #0]
 800d346:	f013 0207 	ands.w	r2, r3, #7
 800d34a:	d00c      	beq.n	800d366 <__lo0bits+0x22>
 800d34c:	07d9      	lsls	r1, r3, #31
 800d34e:	d422      	bmi.n	800d396 <__lo0bits+0x52>
 800d350:	079a      	lsls	r2, r3, #30
 800d352:	bf49      	itett	mi
 800d354:	085b      	lsrmi	r3, r3, #1
 800d356:	089b      	lsrpl	r3, r3, #2
 800d358:	6003      	strmi	r3, [r0, #0]
 800d35a:	2201      	movmi	r2, #1
 800d35c:	bf5c      	itt	pl
 800d35e:	6003      	strpl	r3, [r0, #0]
 800d360:	2202      	movpl	r2, #2
 800d362:	4610      	mov	r0, r2
 800d364:	4770      	bx	lr
 800d366:	b299      	uxth	r1, r3
 800d368:	b909      	cbnz	r1, 800d36e <__lo0bits+0x2a>
 800d36a:	0c1b      	lsrs	r3, r3, #16
 800d36c:	2210      	movs	r2, #16
 800d36e:	b2d9      	uxtb	r1, r3
 800d370:	b909      	cbnz	r1, 800d376 <__lo0bits+0x32>
 800d372:	3208      	adds	r2, #8
 800d374:	0a1b      	lsrs	r3, r3, #8
 800d376:	0719      	lsls	r1, r3, #28
 800d378:	bf04      	itt	eq
 800d37a:	091b      	lsreq	r3, r3, #4
 800d37c:	3204      	addeq	r2, #4
 800d37e:	0799      	lsls	r1, r3, #30
 800d380:	bf04      	itt	eq
 800d382:	089b      	lsreq	r3, r3, #2
 800d384:	3202      	addeq	r2, #2
 800d386:	07d9      	lsls	r1, r3, #31
 800d388:	d403      	bmi.n	800d392 <__lo0bits+0x4e>
 800d38a:	085b      	lsrs	r3, r3, #1
 800d38c:	f102 0201 	add.w	r2, r2, #1
 800d390:	d003      	beq.n	800d39a <__lo0bits+0x56>
 800d392:	6003      	str	r3, [r0, #0]
 800d394:	e7e5      	b.n	800d362 <__lo0bits+0x1e>
 800d396:	2200      	movs	r2, #0
 800d398:	e7e3      	b.n	800d362 <__lo0bits+0x1e>
 800d39a:	2220      	movs	r2, #32
 800d39c:	e7e1      	b.n	800d362 <__lo0bits+0x1e>
	...

0800d3a0 <__i2b>:
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	2101      	movs	r1, #1
 800d3a6:	f7ff ff05 	bl	800d1b4 <_Balloc>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	b928      	cbnz	r0, 800d3ba <__i2b+0x1a>
 800d3ae:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <__i2b+0x24>)
 800d3b0:	4805      	ldr	r0, [pc, #20]	; (800d3c8 <__i2b+0x28>)
 800d3b2:	f240 1145 	movw	r1, #325	; 0x145
 800d3b6:	f7fe ff65 	bl	800c284 <__assert_func>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	6144      	str	r4, [r0, #20]
 800d3be:	6103      	str	r3, [r0, #16]
 800d3c0:	bd10      	pop	{r4, pc}
 800d3c2:	bf00      	nop
 800d3c4:	0800e75c 	.word	0x0800e75c
 800d3c8:	0800e76d 	.word	0x0800e76d

0800d3cc <__multiply>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	4691      	mov	r9, r2
 800d3d2:	690a      	ldr	r2, [r1, #16]
 800d3d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	bfb8      	it	lt
 800d3dc:	460b      	movlt	r3, r1
 800d3de:	460c      	mov	r4, r1
 800d3e0:	bfbc      	itt	lt
 800d3e2:	464c      	movlt	r4, r9
 800d3e4:	4699      	movlt	r9, r3
 800d3e6:	6927      	ldr	r7, [r4, #16]
 800d3e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3ec:	68a3      	ldr	r3, [r4, #8]
 800d3ee:	6861      	ldr	r1, [r4, #4]
 800d3f0:	eb07 060a 	add.w	r6, r7, sl
 800d3f4:	42b3      	cmp	r3, r6
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	bfb8      	it	lt
 800d3fa:	3101      	addlt	r1, #1
 800d3fc:	f7ff feda 	bl	800d1b4 <_Balloc>
 800d400:	b930      	cbnz	r0, 800d410 <__multiply+0x44>
 800d402:	4602      	mov	r2, r0
 800d404:	4b44      	ldr	r3, [pc, #272]	; (800d518 <__multiply+0x14c>)
 800d406:	4845      	ldr	r0, [pc, #276]	; (800d51c <__multiply+0x150>)
 800d408:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d40c:	f7fe ff3a 	bl	800c284 <__assert_func>
 800d410:	f100 0514 	add.w	r5, r0, #20
 800d414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d418:	462b      	mov	r3, r5
 800d41a:	2200      	movs	r2, #0
 800d41c:	4543      	cmp	r3, r8
 800d41e:	d321      	bcc.n	800d464 <__multiply+0x98>
 800d420:	f104 0314 	add.w	r3, r4, #20
 800d424:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d428:	f109 0314 	add.w	r3, r9, #20
 800d42c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d430:	9202      	str	r2, [sp, #8]
 800d432:	1b3a      	subs	r2, r7, r4
 800d434:	3a15      	subs	r2, #21
 800d436:	f022 0203 	bic.w	r2, r2, #3
 800d43a:	3204      	adds	r2, #4
 800d43c:	f104 0115 	add.w	r1, r4, #21
 800d440:	428f      	cmp	r7, r1
 800d442:	bf38      	it	cc
 800d444:	2204      	movcc	r2, #4
 800d446:	9201      	str	r2, [sp, #4]
 800d448:	9a02      	ldr	r2, [sp, #8]
 800d44a:	9303      	str	r3, [sp, #12]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d80c      	bhi.n	800d46a <__multiply+0x9e>
 800d450:	2e00      	cmp	r6, #0
 800d452:	dd03      	ble.n	800d45c <__multiply+0x90>
 800d454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d05b      	beq.n	800d514 <__multiply+0x148>
 800d45c:	6106      	str	r6, [r0, #16]
 800d45e:	b005      	add	sp, #20
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d464:	f843 2b04 	str.w	r2, [r3], #4
 800d468:	e7d8      	b.n	800d41c <__multiply+0x50>
 800d46a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d46e:	f1ba 0f00 	cmp.w	sl, #0
 800d472:	d024      	beq.n	800d4be <__multiply+0xf2>
 800d474:	f104 0e14 	add.w	lr, r4, #20
 800d478:	46a9      	mov	r9, r5
 800d47a:	f04f 0c00 	mov.w	ip, #0
 800d47e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d482:	f8d9 1000 	ldr.w	r1, [r9]
 800d486:	fa1f fb82 	uxth.w	fp, r2
 800d48a:	b289      	uxth	r1, r1
 800d48c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d490:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d494:	f8d9 2000 	ldr.w	r2, [r9]
 800d498:	4461      	add	r1, ip
 800d49a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d49e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d4a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4a6:	b289      	uxth	r1, r1
 800d4a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4ac:	4577      	cmp	r7, lr
 800d4ae:	f849 1b04 	str.w	r1, [r9], #4
 800d4b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4b6:	d8e2      	bhi.n	800d47e <__multiply+0xb2>
 800d4b8:	9a01      	ldr	r2, [sp, #4]
 800d4ba:	f845 c002 	str.w	ip, [r5, r2]
 800d4be:	9a03      	ldr	r2, [sp, #12]
 800d4c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	f1b9 0f00 	cmp.w	r9, #0
 800d4ca:	d021      	beq.n	800d510 <__multiply+0x144>
 800d4cc:	6829      	ldr	r1, [r5, #0]
 800d4ce:	f104 0c14 	add.w	ip, r4, #20
 800d4d2:	46ae      	mov	lr, r5
 800d4d4:	f04f 0a00 	mov.w	sl, #0
 800d4d8:	f8bc b000 	ldrh.w	fp, [ip]
 800d4dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4e0:	fb09 220b 	mla	r2, r9, fp, r2
 800d4e4:	4452      	add	r2, sl
 800d4e6:	b289      	uxth	r1, r1
 800d4e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4ec:	f84e 1b04 	str.w	r1, [lr], #4
 800d4f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d4f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4f8:	f8be 1000 	ldrh.w	r1, [lr]
 800d4fc:	fb09 110a 	mla	r1, r9, sl, r1
 800d500:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d504:	4567      	cmp	r7, ip
 800d506:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d50a:	d8e5      	bhi.n	800d4d8 <__multiply+0x10c>
 800d50c:	9a01      	ldr	r2, [sp, #4]
 800d50e:	50a9      	str	r1, [r5, r2]
 800d510:	3504      	adds	r5, #4
 800d512:	e799      	b.n	800d448 <__multiply+0x7c>
 800d514:	3e01      	subs	r6, #1
 800d516:	e79b      	b.n	800d450 <__multiply+0x84>
 800d518:	0800e75c 	.word	0x0800e75c
 800d51c:	0800e76d 	.word	0x0800e76d

0800d520 <__pow5mult>:
 800d520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d524:	4615      	mov	r5, r2
 800d526:	f012 0203 	ands.w	r2, r2, #3
 800d52a:	4606      	mov	r6, r0
 800d52c:	460f      	mov	r7, r1
 800d52e:	d007      	beq.n	800d540 <__pow5mult+0x20>
 800d530:	4c25      	ldr	r4, [pc, #148]	; (800d5c8 <__pow5mult+0xa8>)
 800d532:	3a01      	subs	r2, #1
 800d534:	2300      	movs	r3, #0
 800d536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d53a:	f7ff fe9d 	bl	800d278 <__multadd>
 800d53e:	4607      	mov	r7, r0
 800d540:	10ad      	asrs	r5, r5, #2
 800d542:	d03d      	beq.n	800d5c0 <__pow5mult+0xa0>
 800d544:	69f4      	ldr	r4, [r6, #28]
 800d546:	b97c      	cbnz	r4, 800d568 <__pow5mult+0x48>
 800d548:	2010      	movs	r0, #16
 800d54a:	f7ff fd7f 	bl	800d04c <malloc>
 800d54e:	4602      	mov	r2, r0
 800d550:	61f0      	str	r0, [r6, #28]
 800d552:	b928      	cbnz	r0, 800d560 <__pow5mult+0x40>
 800d554:	4b1d      	ldr	r3, [pc, #116]	; (800d5cc <__pow5mult+0xac>)
 800d556:	481e      	ldr	r0, [pc, #120]	; (800d5d0 <__pow5mult+0xb0>)
 800d558:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d55c:	f7fe fe92 	bl	800c284 <__assert_func>
 800d560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d564:	6004      	str	r4, [r0, #0]
 800d566:	60c4      	str	r4, [r0, #12]
 800d568:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d570:	b94c      	cbnz	r4, 800d586 <__pow5mult+0x66>
 800d572:	f240 2171 	movw	r1, #625	; 0x271
 800d576:	4630      	mov	r0, r6
 800d578:	f7ff ff12 	bl	800d3a0 <__i2b>
 800d57c:	2300      	movs	r3, #0
 800d57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d582:	4604      	mov	r4, r0
 800d584:	6003      	str	r3, [r0, #0]
 800d586:	f04f 0900 	mov.w	r9, #0
 800d58a:	07eb      	lsls	r3, r5, #31
 800d58c:	d50a      	bpl.n	800d5a4 <__pow5mult+0x84>
 800d58e:	4639      	mov	r1, r7
 800d590:	4622      	mov	r2, r4
 800d592:	4630      	mov	r0, r6
 800d594:	f7ff ff1a 	bl	800d3cc <__multiply>
 800d598:	4639      	mov	r1, r7
 800d59a:	4680      	mov	r8, r0
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7ff fe49 	bl	800d234 <_Bfree>
 800d5a2:	4647      	mov	r7, r8
 800d5a4:	106d      	asrs	r5, r5, #1
 800d5a6:	d00b      	beq.n	800d5c0 <__pow5mult+0xa0>
 800d5a8:	6820      	ldr	r0, [r4, #0]
 800d5aa:	b938      	cbnz	r0, 800d5bc <__pow5mult+0x9c>
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	f7ff ff0b 	bl	800d3cc <__multiply>
 800d5b6:	6020      	str	r0, [r4, #0]
 800d5b8:	f8c0 9000 	str.w	r9, [r0]
 800d5bc:	4604      	mov	r4, r0
 800d5be:	e7e4      	b.n	800d58a <__pow5mult+0x6a>
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	bf00      	nop
 800d5c8:	0800e8b8 	.word	0x0800e8b8
 800d5cc:	0800e618 	.word	0x0800e618
 800d5d0:	0800e76d 	.word	0x0800e76d

0800d5d4 <__lshift>:
 800d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	460c      	mov	r4, r1
 800d5da:	6849      	ldr	r1, [r1, #4]
 800d5dc:	6923      	ldr	r3, [r4, #16]
 800d5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	4691      	mov	r9, r2
 800d5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5ec:	f108 0601 	add.w	r6, r8, #1
 800d5f0:	42b3      	cmp	r3, r6
 800d5f2:	db0b      	blt.n	800d60c <__lshift+0x38>
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	f7ff fddd 	bl	800d1b4 <_Balloc>
 800d5fa:	4605      	mov	r5, r0
 800d5fc:	b948      	cbnz	r0, 800d612 <__lshift+0x3e>
 800d5fe:	4602      	mov	r2, r0
 800d600:	4b28      	ldr	r3, [pc, #160]	; (800d6a4 <__lshift+0xd0>)
 800d602:	4829      	ldr	r0, [pc, #164]	; (800d6a8 <__lshift+0xd4>)
 800d604:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d608:	f7fe fe3c 	bl	800c284 <__assert_func>
 800d60c:	3101      	adds	r1, #1
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	e7ee      	b.n	800d5f0 <__lshift+0x1c>
 800d612:	2300      	movs	r3, #0
 800d614:	f100 0114 	add.w	r1, r0, #20
 800d618:	f100 0210 	add.w	r2, r0, #16
 800d61c:	4618      	mov	r0, r3
 800d61e:	4553      	cmp	r3, sl
 800d620:	db33      	blt.n	800d68a <__lshift+0xb6>
 800d622:	6920      	ldr	r0, [r4, #16]
 800d624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d628:	f104 0314 	add.w	r3, r4, #20
 800d62c:	f019 091f 	ands.w	r9, r9, #31
 800d630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d638:	d02b      	beq.n	800d692 <__lshift+0xbe>
 800d63a:	f1c9 0e20 	rsb	lr, r9, #32
 800d63e:	468a      	mov	sl, r1
 800d640:	2200      	movs	r2, #0
 800d642:	6818      	ldr	r0, [r3, #0]
 800d644:	fa00 f009 	lsl.w	r0, r0, r9
 800d648:	4310      	orrs	r0, r2
 800d64a:	f84a 0b04 	str.w	r0, [sl], #4
 800d64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d652:	459c      	cmp	ip, r3
 800d654:	fa22 f20e 	lsr.w	r2, r2, lr
 800d658:	d8f3      	bhi.n	800d642 <__lshift+0x6e>
 800d65a:	ebac 0304 	sub.w	r3, ip, r4
 800d65e:	3b15      	subs	r3, #21
 800d660:	f023 0303 	bic.w	r3, r3, #3
 800d664:	3304      	adds	r3, #4
 800d666:	f104 0015 	add.w	r0, r4, #21
 800d66a:	4584      	cmp	ip, r0
 800d66c:	bf38      	it	cc
 800d66e:	2304      	movcc	r3, #4
 800d670:	50ca      	str	r2, [r1, r3]
 800d672:	b10a      	cbz	r2, 800d678 <__lshift+0xa4>
 800d674:	f108 0602 	add.w	r6, r8, #2
 800d678:	3e01      	subs	r6, #1
 800d67a:	4638      	mov	r0, r7
 800d67c:	612e      	str	r6, [r5, #16]
 800d67e:	4621      	mov	r1, r4
 800d680:	f7ff fdd8 	bl	800d234 <_Bfree>
 800d684:	4628      	mov	r0, r5
 800d686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d68e:	3301      	adds	r3, #1
 800d690:	e7c5      	b.n	800d61e <__lshift+0x4a>
 800d692:	3904      	subs	r1, #4
 800d694:	f853 2b04 	ldr.w	r2, [r3], #4
 800d698:	f841 2f04 	str.w	r2, [r1, #4]!
 800d69c:	459c      	cmp	ip, r3
 800d69e:	d8f9      	bhi.n	800d694 <__lshift+0xc0>
 800d6a0:	e7ea      	b.n	800d678 <__lshift+0xa4>
 800d6a2:	bf00      	nop
 800d6a4:	0800e75c 	.word	0x0800e75c
 800d6a8:	0800e76d 	.word	0x0800e76d

0800d6ac <__mcmp>:
 800d6ac:	b530      	push	{r4, r5, lr}
 800d6ae:	6902      	ldr	r2, [r0, #16]
 800d6b0:	690c      	ldr	r4, [r1, #16]
 800d6b2:	1b12      	subs	r2, r2, r4
 800d6b4:	d10e      	bne.n	800d6d4 <__mcmp+0x28>
 800d6b6:	f100 0314 	add.w	r3, r0, #20
 800d6ba:	3114      	adds	r1, #20
 800d6bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d6c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d6c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d6c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d6cc:	42a5      	cmp	r5, r4
 800d6ce:	d003      	beq.n	800d6d8 <__mcmp+0x2c>
 800d6d0:	d305      	bcc.n	800d6de <__mcmp+0x32>
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	bd30      	pop	{r4, r5, pc}
 800d6d8:	4283      	cmp	r3, r0
 800d6da:	d3f3      	bcc.n	800d6c4 <__mcmp+0x18>
 800d6dc:	e7fa      	b.n	800d6d4 <__mcmp+0x28>
 800d6de:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e2:	e7f7      	b.n	800d6d4 <__mcmp+0x28>

0800d6e4 <__mdiff>:
 800d6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e8:	460c      	mov	r4, r1
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4690      	mov	r8, r2
 800d6f2:	f7ff ffdb 	bl	800d6ac <__mcmp>
 800d6f6:	1e05      	subs	r5, r0, #0
 800d6f8:	d110      	bne.n	800d71c <__mdiff+0x38>
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f7ff fd59 	bl	800d1b4 <_Balloc>
 800d702:	b930      	cbnz	r0, 800d712 <__mdiff+0x2e>
 800d704:	4b3a      	ldr	r3, [pc, #232]	; (800d7f0 <__mdiff+0x10c>)
 800d706:	4602      	mov	r2, r0
 800d708:	f240 2137 	movw	r1, #567	; 0x237
 800d70c:	4839      	ldr	r0, [pc, #228]	; (800d7f4 <__mdiff+0x110>)
 800d70e:	f7fe fdb9 	bl	800c284 <__assert_func>
 800d712:	2301      	movs	r3, #1
 800d714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71c:	bfa4      	itt	ge
 800d71e:	4643      	movge	r3, r8
 800d720:	46a0      	movge	r8, r4
 800d722:	4630      	mov	r0, r6
 800d724:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d728:	bfa6      	itte	ge
 800d72a:	461c      	movge	r4, r3
 800d72c:	2500      	movge	r5, #0
 800d72e:	2501      	movlt	r5, #1
 800d730:	f7ff fd40 	bl	800d1b4 <_Balloc>
 800d734:	b920      	cbnz	r0, 800d740 <__mdiff+0x5c>
 800d736:	4b2e      	ldr	r3, [pc, #184]	; (800d7f0 <__mdiff+0x10c>)
 800d738:	4602      	mov	r2, r0
 800d73a:	f240 2145 	movw	r1, #581	; 0x245
 800d73e:	e7e5      	b.n	800d70c <__mdiff+0x28>
 800d740:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d744:	6926      	ldr	r6, [r4, #16]
 800d746:	60c5      	str	r5, [r0, #12]
 800d748:	f104 0914 	add.w	r9, r4, #20
 800d74c:	f108 0514 	add.w	r5, r8, #20
 800d750:	f100 0e14 	add.w	lr, r0, #20
 800d754:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d758:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d75c:	f108 0210 	add.w	r2, r8, #16
 800d760:	46f2      	mov	sl, lr
 800d762:	2100      	movs	r1, #0
 800d764:	f859 3b04 	ldr.w	r3, [r9], #4
 800d768:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d76c:	fa11 f88b 	uxtah	r8, r1, fp
 800d770:	b299      	uxth	r1, r3
 800d772:	0c1b      	lsrs	r3, r3, #16
 800d774:	eba8 0801 	sub.w	r8, r8, r1
 800d778:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d77c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d780:	fa1f f888 	uxth.w	r8, r8
 800d784:	1419      	asrs	r1, r3, #16
 800d786:	454e      	cmp	r6, r9
 800d788:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d78c:	f84a 3b04 	str.w	r3, [sl], #4
 800d790:	d8e8      	bhi.n	800d764 <__mdiff+0x80>
 800d792:	1b33      	subs	r3, r6, r4
 800d794:	3b15      	subs	r3, #21
 800d796:	f023 0303 	bic.w	r3, r3, #3
 800d79a:	3304      	adds	r3, #4
 800d79c:	3415      	adds	r4, #21
 800d79e:	42a6      	cmp	r6, r4
 800d7a0:	bf38      	it	cc
 800d7a2:	2304      	movcc	r3, #4
 800d7a4:	441d      	add	r5, r3
 800d7a6:	4473      	add	r3, lr
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	462e      	mov	r6, r5
 800d7ac:	4566      	cmp	r6, ip
 800d7ae:	d30e      	bcc.n	800d7ce <__mdiff+0xea>
 800d7b0:	f10c 0203 	add.w	r2, ip, #3
 800d7b4:	1b52      	subs	r2, r2, r5
 800d7b6:	f022 0203 	bic.w	r2, r2, #3
 800d7ba:	3d03      	subs	r5, #3
 800d7bc:	45ac      	cmp	ip, r5
 800d7be:	bf38      	it	cc
 800d7c0:	2200      	movcc	r2, #0
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d7c8:	b17a      	cbz	r2, 800d7ea <__mdiff+0x106>
 800d7ca:	6107      	str	r7, [r0, #16]
 800d7cc:	e7a4      	b.n	800d718 <__mdiff+0x34>
 800d7ce:	f856 8b04 	ldr.w	r8, [r6], #4
 800d7d2:	fa11 f288 	uxtah	r2, r1, r8
 800d7d6:	1414      	asrs	r4, r2, #16
 800d7d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7dc:	b292      	uxth	r2, r2
 800d7de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7e2:	f84e 2b04 	str.w	r2, [lr], #4
 800d7e6:	1421      	asrs	r1, r4, #16
 800d7e8:	e7e0      	b.n	800d7ac <__mdiff+0xc8>
 800d7ea:	3f01      	subs	r7, #1
 800d7ec:	e7ea      	b.n	800d7c4 <__mdiff+0xe0>
 800d7ee:	bf00      	nop
 800d7f0:	0800e75c 	.word	0x0800e75c
 800d7f4:	0800e76d 	.word	0x0800e76d

0800d7f8 <__d2b>:
 800d7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	460f      	mov	r7, r1
 800d7fe:	2101      	movs	r1, #1
 800d800:	ec59 8b10 	vmov	r8, r9, d0
 800d804:	4616      	mov	r6, r2
 800d806:	f7ff fcd5 	bl	800d1b4 <_Balloc>
 800d80a:	4604      	mov	r4, r0
 800d80c:	b930      	cbnz	r0, 800d81c <__d2b+0x24>
 800d80e:	4602      	mov	r2, r0
 800d810:	4b24      	ldr	r3, [pc, #144]	; (800d8a4 <__d2b+0xac>)
 800d812:	4825      	ldr	r0, [pc, #148]	; (800d8a8 <__d2b+0xb0>)
 800d814:	f240 310f 	movw	r1, #783	; 0x30f
 800d818:	f7fe fd34 	bl	800c284 <__assert_func>
 800d81c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d824:	bb2d      	cbnz	r5, 800d872 <__d2b+0x7a>
 800d826:	9301      	str	r3, [sp, #4]
 800d828:	f1b8 0300 	subs.w	r3, r8, #0
 800d82c:	d026      	beq.n	800d87c <__d2b+0x84>
 800d82e:	4668      	mov	r0, sp
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	f7ff fd87 	bl	800d344 <__lo0bits>
 800d836:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d83a:	b1e8      	cbz	r0, 800d878 <__d2b+0x80>
 800d83c:	f1c0 0320 	rsb	r3, r0, #32
 800d840:	fa02 f303 	lsl.w	r3, r2, r3
 800d844:	430b      	orrs	r3, r1
 800d846:	40c2      	lsrs	r2, r0
 800d848:	6163      	str	r3, [r4, #20]
 800d84a:	9201      	str	r2, [sp, #4]
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	61a3      	str	r3, [r4, #24]
 800d850:	2b00      	cmp	r3, #0
 800d852:	bf14      	ite	ne
 800d854:	2202      	movne	r2, #2
 800d856:	2201      	moveq	r2, #1
 800d858:	6122      	str	r2, [r4, #16]
 800d85a:	b1bd      	cbz	r5, 800d88c <__d2b+0x94>
 800d85c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d860:	4405      	add	r5, r0
 800d862:	603d      	str	r5, [r7, #0]
 800d864:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d868:	6030      	str	r0, [r6, #0]
 800d86a:	4620      	mov	r0, r4
 800d86c:	b003      	add	sp, #12
 800d86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d876:	e7d6      	b.n	800d826 <__d2b+0x2e>
 800d878:	6161      	str	r1, [r4, #20]
 800d87a:	e7e7      	b.n	800d84c <__d2b+0x54>
 800d87c:	a801      	add	r0, sp, #4
 800d87e:	f7ff fd61 	bl	800d344 <__lo0bits>
 800d882:	9b01      	ldr	r3, [sp, #4]
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	3020      	adds	r0, #32
 800d888:	2201      	movs	r2, #1
 800d88a:	e7e5      	b.n	800d858 <__d2b+0x60>
 800d88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d894:	6038      	str	r0, [r7, #0]
 800d896:	6918      	ldr	r0, [r3, #16]
 800d898:	f7ff fd34 	bl	800d304 <__hi0bits>
 800d89c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8a0:	e7e2      	b.n	800d868 <__d2b+0x70>
 800d8a2:	bf00      	nop
 800d8a4:	0800e75c 	.word	0x0800e75c
 800d8a8:	0800e76d 	.word	0x0800e76d

0800d8ac <__ssputs_r>:
 800d8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b0:	688e      	ldr	r6, [r1, #8]
 800d8b2:	461f      	mov	r7, r3
 800d8b4:	42be      	cmp	r6, r7
 800d8b6:	680b      	ldr	r3, [r1, #0]
 800d8b8:	4682      	mov	sl, r0
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	4690      	mov	r8, r2
 800d8be:	d82c      	bhi.n	800d91a <__ssputs_r+0x6e>
 800d8c0:	898a      	ldrh	r2, [r1, #12]
 800d8c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8c6:	d026      	beq.n	800d916 <__ssputs_r+0x6a>
 800d8c8:	6965      	ldr	r5, [r4, #20]
 800d8ca:	6909      	ldr	r1, [r1, #16]
 800d8cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8d0:	eba3 0901 	sub.w	r9, r3, r1
 800d8d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8d8:	1c7b      	adds	r3, r7, #1
 800d8da:	444b      	add	r3, r9
 800d8dc:	106d      	asrs	r5, r5, #1
 800d8de:	429d      	cmp	r5, r3
 800d8e0:	bf38      	it	cc
 800d8e2:	461d      	movcc	r5, r3
 800d8e4:	0553      	lsls	r3, r2, #21
 800d8e6:	d527      	bpl.n	800d938 <__ssputs_r+0x8c>
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7ff fbd7 	bl	800d09c <_malloc_r>
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	b360      	cbz	r0, 800d94c <__ssputs_r+0xa0>
 800d8f2:	6921      	ldr	r1, [r4, #16]
 800d8f4:	464a      	mov	r2, r9
 800d8f6:	f7fe fcb6 	bl	800c266 <memcpy>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d904:	81a3      	strh	r3, [r4, #12]
 800d906:	6126      	str	r6, [r4, #16]
 800d908:	6165      	str	r5, [r4, #20]
 800d90a:	444e      	add	r6, r9
 800d90c:	eba5 0509 	sub.w	r5, r5, r9
 800d910:	6026      	str	r6, [r4, #0]
 800d912:	60a5      	str	r5, [r4, #8]
 800d914:	463e      	mov	r6, r7
 800d916:	42be      	cmp	r6, r7
 800d918:	d900      	bls.n	800d91c <__ssputs_r+0x70>
 800d91a:	463e      	mov	r6, r7
 800d91c:	6820      	ldr	r0, [r4, #0]
 800d91e:	4632      	mov	r2, r6
 800d920:	4641      	mov	r1, r8
 800d922:	f000 f9db 	bl	800dcdc <memmove>
 800d926:	68a3      	ldr	r3, [r4, #8]
 800d928:	1b9b      	subs	r3, r3, r6
 800d92a:	60a3      	str	r3, [r4, #8]
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	4433      	add	r3, r6
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	2000      	movs	r0, #0
 800d934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d938:	462a      	mov	r2, r5
 800d93a:	f000 fa28 	bl	800dd8e <_realloc_r>
 800d93e:	4606      	mov	r6, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	d1e0      	bne.n	800d906 <__ssputs_r+0x5a>
 800d944:	6921      	ldr	r1, [r4, #16]
 800d946:	4650      	mov	r0, sl
 800d948:	f7ff fb34 	bl	800cfb4 <_free_r>
 800d94c:	230c      	movs	r3, #12
 800d94e:	f8ca 3000 	str.w	r3, [sl]
 800d952:	89a3      	ldrh	r3, [r4, #12]
 800d954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d958:	81a3      	strh	r3, [r4, #12]
 800d95a:	f04f 30ff 	mov.w	r0, #4294967295
 800d95e:	e7e9      	b.n	800d934 <__ssputs_r+0x88>

0800d960 <_svfiprintf_r>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	4698      	mov	r8, r3
 800d966:	898b      	ldrh	r3, [r1, #12]
 800d968:	061b      	lsls	r3, r3, #24
 800d96a:	b09d      	sub	sp, #116	; 0x74
 800d96c:	4607      	mov	r7, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	4614      	mov	r4, r2
 800d972:	d50e      	bpl.n	800d992 <_svfiprintf_r+0x32>
 800d974:	690b      	ldr	r3, [r1, #16]
 800d976:	b963      	cbnz	r3, 800d992 <_svfiprintf_r+0x32>
 800d978:	2140      	movs	r1, #64	; 0x40
 800d97a:	f7ff fb8f 	bl	800d09c <_malloc_r>
 800d97e:	6028      	str	r0, [r5, #0]
 800d980:	6128      	str	r0, [r5, #16]
 800d982:	b920      	cbnz	r0, 800d98e <_svfiprintf_r+0x2e>
 800d984:	230c      	movs	r3, #12
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	e0d0      	b.n	800db30 <_svfiprintf_r+0x1d0>
 800d98e:	2340      	movs	r3, #64	; 0x40
 800d990:	616b      	str	r3, [r5, #20]
 800d992:	2300      	movs	r3, #0
 800d994:	9309      	str	r3, [sp, #36]	; 0x24
 800d996:	2320      	movs	r3, #32
 800d998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d99c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9a0:	2330      	movs	r3, #48	; 0x30
 800d9a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db48 <_svfiprintf_r+0x1e8>
 800d9a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9aa:	f04f 0901 	mov.w	r9, #1
 800d9ae:	4623      	mov	r3, r4
 800d9b0:	469a      	mov	sl, r3
 800d9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9b6:	b10a      	cbz	r2, 800d9bc <_svfiprintf_r+0x5c>
 800d9b8:	2a25      	cmp	r2, #37	; 0x25
 800d9ba:	d1f9      	bne.n	800d9b0 <_svfiprintf_r+0x50>
 800d9bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d9c0:	d00b      	beq.n	800d9da <_svfiprintf_r+0x7a>
 800d9c2:	465b      	mov	r3, fp
 800d9c4:	4622      	mov	r2, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	f7ff ff6f 	bl	800d8ac <__ssputs_r>
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	f000 80a9 	beq.w	800db26 <_svfiprintf_r+0x1c6>
 800d9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9d6:	445a      	add	r2, fp
 800d9d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d9da:	f89a 3000 	ldrb.w	r3, [sl]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f000 80a1 	beq.w	800db26 <_svfiprintf_r+0x1c6>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9ee:	f10a 0a01 	add.w	sl, sl, #1
 800d9f2:	9304      	str	r3, [sp, #16]
 800d9f4:	9307      	str	r3, [sp, #28]
 800d9f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d9fc:	4654      	mov	r4, sl
 800d9fe:	2205      	movs	r2, #5
 800da00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da04:	4850      	ldr	r0, [pc, #320]	; (800db48 <_svfiprintf_r+0x1e8>)
 800da06:	f7f2 fbe3 	bl	80001d0 <memchr>
 800da0a:	9a04      	ldr	r2, [sp, #16]
 800da0c:	b9d8      	cbnz	r0, 800da46 <_svfiprintf_r+0xe6>
 800da0e:	06d0      	lsls	r0, r2, #27
 800da10:	bf44      	itt	mi
 800da12:	2320      	movmi	r3, #32
 800da14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da18:	0711      	lsls	r1, r2, #28
 800da1a:	bf44      	itt	mi
 800da1c:	232b      	movmi	r3, #43	; 0x2b
 800da1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da22:	f89a 3000 	ldrb.w	r3, [sl]
 800da26:	2b2a      	cmp	r3, #42	; 0x2a
 800da28:	d015      	beq.n	800da56 <_svfiprintf_r+0xf6>
 800da2a:	9a07      	ldr	r2, [sp, #28]
 800da2c:	4654      	mov	r4, sl
 800da2e:	2000      	movs	r0, #0
 800da30:	f04f 0c0a 	mov.w	ip, #10
 800da34:	4621      	mov	r1, r4
 800da36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da3a:	3b30      	subs	r3, #48	; 0x30
 800da3c:	2b09      	cmp	r3, #9
 800da3e:	d94d      	bls.n	800dadc <_svfiprintf_r+0x17c>
 800da40:	b1b0      	cbz	r0, 800da70 <_svfiprintf_r+0x110>
 800da42:	9207      	str	r2, [sp, #28]
 800da44:	e014      	b.n	800da70 <_svfiprintf_r+0x110>
 800da46:	eba0 0308 	sub.w	r3, r0, r8
 800da4a:	fa09 f303 	lsl.w	r3, r9, r3
 800da4e:	4313      	orrs	r3, r2
 800da50:	9304      	str	r3, [sp, #16]
 800da52:	46a2      	mov	sl, r4
 800da54:	e7d2      	b.n	800d9fc <_svfiprintf_r+0x9c>
 800da56:	9b03      	ldr	r3, [sp, #12]
 800da58:	1d19      	adds	r1, r3, #4
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	9103      	str	r1, [sp, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	bfbb      	ittet	lt
 800da62:	425b      	neglt	r3, r3
 800da64:	f042 0202 	orrlt.w	r2, r2, #2
 800da68:	9307      	strge	r3, [sp, #28]
 800da6a:	9307      	strlt	r3, [sp, #28]
 800da6c:	bfb8      	it	lt
 800da6e:	9204      	strlt	r2, [sp, #16]
 800da70:	7823      	ldrb	r3, [r4, #0]
 800da72:	2b2e      	cmp	r3, #46	; 0x2e
 800da74:	d10c      	bne.n	800da90 <_svfiprintf_r+0x130>
 800da76:	7863      	ldrb	r3, [r4, #1]
 800da78:	2b2a      	cmp	r3, #42	; 0x2a
 800da7a:	d134      	bne.n	800dae6 <_svfiprintf_r+0x186>
 800da7c:	9b03      	ldr	r3, [sp, #12]
 800da7e:	1d1a      	adds	r2, r3, #4
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	9203      	str	r2, [sp, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	bfb8      	it	lt
 800da88:	f04f 33ff 	movlt.w	r3, #4294967295
 800da8c:	3402      	adds	r4, #2
 800da8e:	9305      	str	r3, [sp, #20]
 800da90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800db58 <_svfiprintf_r+0x1f8>
 800da94:	7821      	ldrb	r1, [r4, #0]
 800da96:	2203      	movs	r2, #3
 800da98:	4650      	mov	r0, sl
 800da9a:	f7f2 fb99 	bl	80001d0 <memchr>
 800da9e:	b138      	cbz	r0, 800dab0 <_svfiprintf_r+0x150>
 800daa0:	9b04      	ldr	r3, [sp, #16]
 800daa2:	eba0 000a 	sub.w	r0, r0, sl
 800daa6:	2240      	movs	r2, #64	; 0x40
 800daa8:	4082      	lsls	r2, r0
 800daaa:	4313      	orrs	r3, r2
 800daac:	3401      	adds	r4, #1
 800daae:	9304      	str	r3, [sp, #16]
 800dab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab4:	4825      	ldr	r0, [pc, #148]	; (800db4c <_svfiprintf_r+0x1ec>)
 800dab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daba:	2206      	movs	r2, #6
 800dabc:	f7f2 fb88 	bl	80001d0 <memchr>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d038      	beq.n	800db36 <_svfiprintf_r+0x1d6>
 800dac4:	4b22      	ldr	r3, [pc, #136]	; (800db50 <_svfiprintf_r+0x1f0>)
 800dac6:	bb1b      	cbnz	r3, 800db10 <_svfiprintf_r+0x1b0>
 800dac8:	9b03      	ldr	r3, [sp, #12]
 800daca:	3307      	adds	r3, #7
 800dacc:	f023 0307 	bic.w	r3, r3, #7
 800dad0:	3308      	adds	r3, #8
 800dad2:	9303      	str	r3, [sp, #12]
 800dad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad6:	4433      	add	r3, r6
 800dad8:	9309      	str	r3, [sp, #36]	; 0x24
 800dada:	e768      	b.n	800d9ae <_svfiprintf_r+0x4e>
 800dadc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dae0:	460c      	mov	r4, r1
 800dae2:	2001      	movs	r0, #1
 800dae4:	e7a6      	b.n	800da34 <_svfiprintf_r+0xd4>
 800dae6:	2300      	movs	r3, #0
 800dae8:	3401      	adds	r4, #1
 800daea:	9305      	str	r3, [sp, #20]
 800daec:	4619      	mov	r1, r3
 800daee:	f04f 0c0a 	mov.w	ip, #10
 800daf2:	4620      	mov	r0, r4
 800daf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daf8:	3a30      	subs	r2, #48	; 0x30
 800dafa:	2a09      	cmp	r2, #9
 800dafc:	d903      	bls.n	800db06 <_svfiprintf_r+0x1a6>
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0c6      	beq.n	800da90 <_svfiprintf_r+0x130>
 800db02:	9105      	str	r1, [sp, #20]
 800db04:	e7c4      	b.n	800da90 <_svfiprintf_r+0x130>
 800db06:	fb0c 2101 	mla	r1, ip, r1, r2
 800db0a:	4604      	mov	r4, r0
 800db0c:	2301      	movs	r3, #1
 800db0e:	e7f0      	b.n	800daf2 <_svfiprintf_r+0x192>
 800db10:	ab03      	add	r3, sp, #12
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	462a      	mov	r2, r5
 800db16:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <_svfiprintf_r+0x1f4>)
 800db18:	a904      	add	r1, sp, #16
 800db1a:	4638      	mov	r0, r7
 800db1c:	f7fd fe38 	bl	800b790 <_printf_float>
 800db20:	1c42      	adds	r2, r0, #1
 800db22:	4606      	mov	r6, r0
 800db24:	d1d6      	bne.n	800dad4 <_svfiprintf_r+0x174>
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	065b      	lsls	r3, r3, #25
 800db2a:	f53f af2d 	bmi.w	800d988 <_svfiprintf_r+0x28>
 800db2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db30:	b01d      	add	sp, #116	; 0x74
 800db32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db36:	ab03      	add	r3, sp, #12
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	462a      	mov	r2, r5
 800db3c:	4b05      	ldr	r3, [pc, #20]	; (800db54 <_svfiprintf_r+0x1f4>)
 800db3e:	a904      	add	r1, sp, #16
 800db40:	4638      	mov	r0, r7
 800db42:	f7fe f8c9 	bl	800bcd8 <_printf_i>
 800db46:	e7eb      	b.n	800db20 <_svfiprintf_r+0x1c0>
 800db48:	0800e8c4 	.word	0x0800e8c4
 800db4c:	0800e8ce 	.word	0x0800e8ce
 800db50:	0800b791 	.word	0x0800b791
 800db54:	0800d8ad 	.word	0x0800d8ad
 800db58:	0800e8ca 	.word	0x0800e8ca

0800db5c <__sflush_r>:
 800db5c:	898a      	ldrh	r2, [r1, #12]
 800db5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db62:	4605      	mov	r5, r0
 800db64:	0710      	lsls	r0, r2, #28
 800db66:	460c      	mov	r4, r1
 800db68:	d458      	bmi.n	800dc1c <__sflush_r+0xc0>
 800db6a:	684b      	ldr	r3, [r1, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	dc05      	bgt.n	800db7c <__sflush_r+0x20>
 800db70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db72:	2b00      	cmp	r3, #0
 800db74:	dc02      	bgt.n	800db7c <__sflush_r+0x20>
 800db76:	2000      	movs	r0, #0
 800db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db7e:	2e00      	cmp	r6, #0
 800db80:	d0f9      	beq.n	800db76 <__sflush_r+0x1a>
 800db82:	2300      	movs	r3, #0
 800db84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db88:	682f      	ldr	r7, [r5, #0]
 800db8a:	6a21      	ldr	r1, [r4, #32]
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	d032      	beq.n	800dbf6 <__sflush_r+0x9a>
 800db90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	075a      	lsls	r2, r3, #29
 800db96:	d505      	bpl.n	800dba4 <__sflush_r+0x48>
 800db98:	6863      	ldr	r3, [r4, #4]
 800db9a:	1ac0      	subs	r0, r0, r3
 800db9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db9e:	b10b      	cbz	r3, 800dba4 <__sflush_r+0x48>
 800dba0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dba2:	1ac0      	subs	r0, r0, r3
 800dba4:	2300      	movs	r3, #0
 800dba6:	4602      	mov	r2, r0
 800dba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbaa:	6a21      	ldr	r1, [r4, #32]
 800dbac:	4628      	mov	r0, r5
 800dbae:	47b0      	blx	r6
 800dbb0:	1c43      	adds	r3, r0, #1
 800dbb2:	89a3      	ldrh	r3, [r4, #12]
 800dbb4:	d106      	bne.n	800dbc4 <__sflush_r+0x68>
 800dbb6:	6829      	ldr	r1, [r5, #0]
 800dbb8:	291d      	cmp	r1, #29
 800dbba:	d82b      	bhi.n	800dc14 <__sflush_r+0xb8>
 800dbbc:	4a29      	ldr	r2, [pc, #164]	; (800dc64 <__sflush_r+0x108>)
 800dbbe:	410a      	asrs	r2, r1
 800dbc0:	07d6      	lsls	r6, r2, #31
 800dbc2:	d427      	bmi.n	800dc14 <__sflush_r+0xb8>
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	6062      	str	r2, [r4, #4]
 800dbc8:	04d9      	lsls	r1, r3, #19
 800dbca:	6922      	ldr	r2, [r4, #16]
 800dbcc:	6022      	str	r2, [r4, #0]
 800dbce:	d504      	bpl.n	800dbda <__sflush_r+0x7e>
 800dbd0:	1c42      	adds	r2, r0, #1
 800dbd2:	d101      	bne.n	800dbd8 <__sflush_r+0x7c>
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	b903      	cbnz	r3, 800dbda <__sflush_r+0x7e>
 800dbd8:	6560      	str	r0, [r4, #84]	; 0x54
 800dbda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbdc:	602f      	str	r7, [r5, #0]
 800dbde:	2900      	cmp	r1, #0
 800dbe0:	d0c9      	beq.n	800db76 <__sflush_r+0x1a>
 800dbe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe6:	4299      	cmp	r1, r3
 800dbe8:	d002      	beq.n	800dbf0 <__sflush_r+0x94>
 800dbea:	4628      	mov	r0, r5
 800dbec:	f7ff f9e2 	bl	800cfb4 <_free_r>
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	6360      	str	r0, [r4, #52]	; 0x34
 800dbf4:	e7c0      	b.n	800db78 <__sflush_r+0x1c>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	47b0      	blx	r6
 800dbfc:	1c41      	adds	r1, r0, #1
 800dbfe:	d1c8      	bne.n	800db92 <__sflush_r+0x36>
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0c5      	beq.n	800db92 <__sflush_r+0x36>
 800dc06:	2b1d      	cmp	r3, #29
 800dc08:	d001      	beq.n	800dc0e <__sflush_r+0xb2>
 800dc0a:	2b16      	cmp	r3, #22
 800dc0c:	d101      	bne.n	800dc12 <__sflush_r+0xb6>
 800dc0e:	602f      	str	r7, [r5, #0]
 800dc10:	e7b1      	b.n	800db76 <__sflush_r+0x1a>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc18:	81a3      	strh	r3, [r4, #12]
 800dc1a:	e7ad      	b.n	800db78 <__sflush_r+0x1c>
 800dc1c:	690f      	ldr	r7, [r1, #16]
 800dc1e:	2f00      	cmp	r7, #0
 800dc20:	d0a9      	beq.n	800db76 <__sflush_r+0x1a>
 800dc22:	0793      	lsls	r3, r2, #30
 800dc24:	680e      	ldr	r6, [r1, #0]
 800dc26:	bf08      	it	eq
 800dc28:	694b      	ldreq	r3, [r1, #20]
 800dc2a:	600f      	str	r7, [r1, #0]
 800dc2c:	bf18      	it	ne
 800dc2e:	2300      	movne	r3, #0
 800dc30:	eba6 0807 	sub.w	r8, r6, r7
 800dc34:	608b      	str	r3, [r1, #8]
 800dc36:	f1b8 0f00 	cmp.w	r8, #0
 800dc3a:	dd9c      	ble.n	800db76 <__sflush_r+0x1a>
 800dc3c:	6a21      	ldr	r1, [r4, #32]
 800dc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc40:	4643      	mov	r3, r8
 800dc42:	463a      	mov	r2, r7
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b0      	blx	r6
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	dc06      	bgt.n	800dc5a <__sflush_r+0xfe>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	e78e      	b.n	800db78 <__sflush_r+0x1c>
 800dc5a:	4407      	add	r7, r0
 800dc5c:	eba8 0800 	sub.w	r8, r8, r0
 800dc60:	e7e9      	b.n	800dc36 <__sflush_r+0xda>
 800dc62:	bf00      	nop
 800dc64:	dfbffffe 	.word	0xdfbffffe

0800dc68 <_fflush_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	690b      	ldr	r3, [r1, #16]
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	b913      	cbnz	r3, 800dc78 <_fflush_r+0x10>
 800dc72:	2500      	movs	r5, #0
 800dc74:	4628      	mov	r0, r5
 800dc76:	bd38      	pop	{r3, r4, r5, pc}
 800dc78:	b118      	cbz	r0, 800dc82 <_fflush_r+0x1a>
 800dc7a:	6a03      	ldr	r3, [r0, #32]
 800dc7c:	b90b      	cbnz	r3, 800dc82 <_fflush_r+0x1a>
 800dc7e:	f7fe f9d9 	bl	800c034 <__sinit>
 800dc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0f3      	beq.n	800dc72 <_fflush_r+0xa>
 800dc8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc8c:	07d0      	lsls	r0, r2, #31
 800dc8e:	d404      	bmi.n	800dc9a <_fflush_r+0x32>
 800dc90:	0599      	lsls	r1, r3, #22
 800dc92:	d402      	bmi.n	800dc9a <_fflush_r+0x32>
 800dc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc96:	f7fe fae4 	bl	800c262 <__retarget_lock_acquire_recursive>
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	f7ff ff5d 	bl	800db5c <__sflush_r>
 800dca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dca4:	07da      	lsls	r2, r3, #31
 800dca6:	4605      	mov	r5, r0
 800dca8:	d4e4      	bmi.n	800dc74 <_fflush_r+0xc>
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	059b      	lsls	r3, r3, #22
 800dcae:	d4e1      	bmi.n	800dc74 <_fflush_r+0xc>
 800dcb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcb2:	f7fe fad7 	bl	800c264 <__retarget_lock_release_recursive>
 800dcb6:	e7dd      	b.n	800dc74 <_fflush_r+0xc>

0800dcb8 <fiprintf>:
 800dcb8:	b40e      	push	{r1, r2, r3}
 800dcba:	b503      	push	{r0, r1, lr}
 800dcbc:	4601      	mov	r1, r0
 800dcbe:	ab03      	add	r3, sp, #12
 800dcc0:	4805      	ldr	r0, [pc, #20]	; (800dcd8 <fiprintf+0x20>)
 800dcc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcc6:	6800      	ldr	r0, [r0, #0]
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	f000 f8c5 	bl	800de58 <_vfiprintf_r>
 800dcce:	b002      	add	sp, #8
 800dcd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcd4:	b003      	add	sp, #12
 800dcd6:	4770      	bx	lr
 800dcd8:	2000007c 	.word	0x2000007c

0800dcdc <memmove>:
 800dcdc:	4288      	cmp	r0, r1
 800dcde:	b510      	push	{r4, lr}
 800dce0:	eb01 0402 	add.w	r4, r1, r2
 800dce4:	d902      	bls.n	800dcec <memmove+0x10>
 800dce6:	4284      	cmp	r4, r0
 800dce8:	4623      	mov	r3, r4
 800dcea:	d807      	bhi.n	800dcfc <memmove+0x20>
 800dcec:	1e43      	subs	r3, r0, #1
 800dcee:	42a1      	cmp	r1, r4
 800dcf0:	d008      	beq.n	800dd04 <memmove+0x28>
 800dcf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcfa:	e7f8      	b.n	800dcee <memmove+0x12>
 800dcfc:	4402      	add	r2, r0
 800dcfe:	4601      	mov	r1, r0
 800dd00:	428a      	cmp	r2, r1
 800dd02:	d100      	bne.n	800dd06 <memmove+0x2a>
 800dd04:	bd10      	pop	{r4, pc}
 800dd06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd0e:	e7f7      	b.n	800dd00 <memmove+0x24>

0800dd10 <_sbrk_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4d06      	ldr	r5, [pc, #24]	; (800dd2c <_sbrk_r+0x1c>)
 800dd14:	2300      	movs	r3, #0
 800dd16:	4604      	mov	r4, r0
 800dd18:	4608      	mov	r0, r1
 800dd1a:	602b      	str	r3, [r5, #0]
 800dd1c:	f7f6 f834 	bl	8003d88 <_sbrk>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d102      	bne.n	800dd2a <_sbrk_r+0x1a>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b103      	cbz	r3, 800dd2a <_sbrk_r+0x1a>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	20000ff0 	.word	0x20000ff0

0800dd30 <abort>:
 800dd30:	b508      	push	{r3, lr}
 800dd32:	2006      	movs	r0, #6
 800dd34:	f000 fa68 	bl	800e208 <raise>
 800dd38:	2001      	movs	r0, #1
 800dd3a:	f7f5 ffad 	bl	8003c98 <_exit>

0800dd3e <_calloc_r>:
 800dd3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd40:	fba1 2402 	umull	r2, r4, r1, r2
 800dd44:	b94c      	cbnz	r4, 800dd5a <_calloc_r+0x1c>
 800dd46:	4611      	mov	r1, r2
 800dd48:	9201      	str	r2, [sp, #4]
 800dd4a:	f7ff f9a7 	bl	800d09c <_malloc_r>
 800dd4e:	9a01      	ldr	r2, [sp, #4]
 800dd50:	4605      	mov	r5, r0
 800dd52:	b930      	cbnz	r0, 800dd62 <_calloc_r+0x24>
 800dd54:	4628      	mov	r0, r5
 800dd56:	b003      	add	sp, #12
 800dd58:	bd30      	pop	{r4, r5, pc}
 800dd5a:	220c      	movs	r2, #12
 800dd5c:	6002      	str	r2, [r0, #0]
 800dd5e:	2500      	movs	r5, #0
 800dd60:	e7f8      	b.n	800dd54 <_calloc_r+0x16>
 800dd62:	4621      	mov	r1, r4
 800dd64:	f7fe f9ff 	bl	800c166 <memset>
 800dd68:	e7f4      	b.n	800dd54 <_calloc_r+0x16>

0800dd6a <__ascii_mbtowc>:
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	b901      	cbnz	r1, 800dd70 <__ascii_mbtowc+0x6>
 800dd6e:	a901      	add	r1, sp, #4
 800dd70:	b142      	cbz	r2, 800dd84 <__ascii_mbtowc+0x1a>
 800dd72:	b14b      	cbz	r3, 800dd88 <__ascii_mbtowc+0x1e>
 800dd74:	7813      	ldrb	r3, [r2, #0]
 800dd76:	600b      	str	r3, [r1, #0]
 800dd78:	7812      	ldrb	r2, [r2, #0]
 800dd7a:	1e10      	subs	r0, r2, #0
 800dd7c:	bf18      	it	ne
 800dd7e:	2001      	movne	r0, #1
 800dd80:	b002      	add	sp, #8
 800dd82:	4770      	bx	lr
 800dd84:	4610      	mov	r0, r2
 800dd86:	e7fb      	b.n	800dd80 <__ascii_mbtowc+0x16>
 800dd88:	f06f 0001 	mvn.w	r0, #1
 800dd8c:	e7f8      	b.n	800dd80 <__ascii_mbtowc+0x16>

0800dd8e <_realloc_r>:
 800dd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd92:	4680      	mov	r8, r0
 800dd94:	4614      	mov	r4, r2
 800dd96:	460e      	mov	r6, r1
 800dd98:	b921      	cbnz	r1, 800dda4 <_realloc_r+0x16>
 800dd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9e:	4611      	mov	r1, r2
 800dda0:	f7ff b97c 	b.w	800d09c <_malloc_r>
 800dda4:	b92a      	cbnz	r2, 800ddb2 <_realloc_r+0x24>
 800dda6:	f7ff f905 	bl	800cfb4 <_free_r>
 800ddaa:	4625      	mov	r5, r4
 800ddac:	4628      	mov	r0, r5
 800ddae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb2:	f000 fa45 	bl	800e240 <_malloc_usable_size_r>
 800ddb6:	4284      	cmp	r4, r0
 800ddb8:	4607      	mov	r7, r0
 800ddba:	d802      	bhi.n	800ddc2 <_realloc_r+0x34>
 800ddbc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddc0:	d812      	bhi.n	800dde8 <_realloc_r+0x5a>
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4640      	mov	r0, r8
 800ddc6:	f7ff f969 	bl	800d09c <_malloc_r>
 800ddca:	4605      	mov	r5, r0
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d0ed      	beq.n	800ddac <_realloc_r+0x1e>
 800ddd0:	42bc      	cmp	r4, r7
 800ddd2:	4622      	mov	r2, r4
 800ddd4:	4631      	mov	r1, r6
 800ddd6:	bf28      	it	cs
 800ddd8:	463a      	movcs	r2, r7
 800ddda:	f7fe fa44 	bl	800c266 <memcpy>
 800ddde:	4631      	mov	r1, r6
 800dde0:	4640      	mov	r0, r8
 800dde2:	f7ff f8e7 	bl	800cfb4 <_free_r>
 800dde6:	e7e1      	b.n	800ddac <_realloc_r+0x1e>
 800dde8:	4635      	mov	r5, r6
 800ddea:	e7df      	b.n	800ddac <_realloc_r+0x1e>

0800ddec <__ascii_wctomb>:
 800ddec:	b149      	cbz	r1, 800de02 <__ascii_wctomb+0x16>
 800ddee:	2aff      	cmp	r2, #255	; 0xff
 800ddf0:	bf85      	ittet	hi
 800ddf2:	238a      	movhi	r3, #138	; 0x8a
 800ddf4:	6003      	strhi	r3, [r0, #0]
 800ddf6:	700a      	strbls	r2, [r1, #0]
 800ddf8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddfc:	bf98      	it	ls
 800ddfe:	2001      	movls	r0, #1
 800de00:	4770      	bx	lr
 800de02:	4608      	mov	r0, r1
 800de04:	4770      	bx	lr

0800de06 <__sfputc_r>:
 800de06:	6893      	ldr	r3, [r2, #8]
 800de08:	3b01      	subs	r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	b410      	push	{r4}
 800de0e:	6093      	str	r3, [r2, #8]
 800de10:	da08      	bge.n	800de24 <__sfputc_r+0x1e>
 800de12:	6994      	ldr	r4, [r2, #24]
 800de14:	42a3      	cmp	r3, r4
 800de16:	db01      	blt.n	800de1c <__sfputc_r+0x16>
 800de18:	290a      	cmp	r1, #10
 800de1a:	d103      	bne.n	800de24 <__sfputc_r+0x1e>
 800de1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de20:	f000 b934 	b.w	800e08c <__swbuf_r>
 800de24:	6813      	ldr	r3, [r2, #0]
 800de26:	1c58      	adds	r0, r3, #1
 800de28:	6010      	str	r0, [r2, #0]
 800de2a:	7019      	strb	r1, [r3, #0]
 800de2c:	4608      	mov	r0, r1
 800de2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <__sfputs_r>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	4606      	mov	r6, r0
 800de38:	460f      	mov	r7, r1
 800de3a:	4614      	mov	r4, r2
 800de3c:	18d5      	adds	r5, r2, r3
 800de3e:	42ac      	cmp	r4, r5
 800de40:	d101      	bne.n	800de46 <__sfputs_r+0x12>
 800de42:	2000      	movs	r0, #0
 800de44:	e007      	b.n	800de56 <__sfputs_r+0x22>
 800de46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4a:	463a      	mov	r2, r7
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7ff ffda 	bl	800de06 <__sfputc_r>
 800de52:	1c43      	adds	r3, r0, #1
 800de54:	d1f3      	bne.n	800de3e <__sfputs_r+0xa>
 800de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de58 <_vfiprintf_r>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	460d      	mov	r5, r1
 800de5e:	b09d      	sub	sp, #116	; 0x74
 800de60:	4614      	mov	r4, r2
 800de62:	4698      	mov	r8, r3
 800de64:	4606      	mov	r6, r0
 800de66:	b118      	cbz	r0, 800de70 <_vfiprintf_r+0x18>
 800de68:	6a03      	ldr	r3, [r0, #32]
 800de6a:	b90b      	cbnz	r3, 800de70 <_vfiprintf_r+0x18>
 800de6c:	f7fe f8e2 	bl	800c034 <__sinit>
 800de70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de72:	07d9      	lsls	r1, r3, #31
 800de74:	d405      	bmi.n	800de82 <_vfiprintf_r+0x2a>
 800de76:	89ab      	ldrh	r3, [r5, #12]
 800de78:	059a      	lsls	r2, r3, #22
 800de7a:	d402      	bmi.n	800de82 <_vfiprintf_r+0x2a>
 800de7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de7e:	f7fe f9f0 	bl	800c262 <__retarget_lock_acquire_recursive>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	071b      	lsls	r3, r3, #28
 800de86:	d501      	bpl.n	800de8c <_vfiprintf_r+0x34>
 800de88:	692b      	ldr	r3, [r5, #16]
 800de8a:	b99b      	cbnz	r3, 800deb4 <_vfiprintf_r+0x5c>
 800de8c:	4629      	mov	r1, r5
 800de8e:	4630      	mov	r0, r6
 800de90:	f000 f93a 	bl	800e108 <__swsetup_r>
 800de94:	b170      	cbz	r0, 800deb4 <_vfiprintf_r+0x5c>
 800de96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de98:	07dc      	lsls	r4, r3, #31
 800de9a:	d504      	bpl.n	800dea6 <_vfiprintf_r+0x4e>
 800de9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dea0:	b01d      	add	sp, #116	; 0x74
 800dea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea6:	89ab      	ldrh	r3, [r5, #12]
 800dea8:	0598      	lsls	r0, r3, #22
 800deaa:	d4f7      	bmi.n	800de9c <_vfiprintf_r+0x44>
 800deac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deae:	f7fe f9d9 	bl	800c264 <__retarget_lock_release_recursive>
 800deb2:	e7f3      	b.n	800de9c <_vfiprintf_r+0x44>
 800deb4:	2300      	movs	r3, #0
 800deb6:	9309      	str	r3, [sp, #36]	; 0x24
 800deb8:	2320      	movs	r3, #32
 800deba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800debe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec2:	2330      	movs	r3, #48	; 0x30
 800dec4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e078 <_vfiprintf_r+0x220>
 800dec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800decc:	f04f 0901 	mov.w	r9, #1
 800ded0:	4623      	mov	r3, r4
 800ded2:	469a      	mov	sl, r3
 800ded4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded8:	b10a      	cbz	r2, 800dede <_vfiprintf_r+0x86>
 800deda:	2a25      	cmp	r2, #37	; 0x25
 800dedc:	d1f9      	bne.n	800ded2 <_vfiprintf_r+0x7a>
 800dede:	ebba 0b04 	subs.w	fp, sl, r4
 800dee2:	d00b      	beq.n	800defc <_vfiprintf_r+0xa4>
 800dee4:	465b      	mov	r3, fp
 800dee6:	4622      	mov	r2, r4
 800dee8:	4629      	mov	r1, r5
 800deea:	4630      	mov	r0, r6
 800deec:	f7ff ffa2 	bl	800de34 <__sfputs_r>
 800def0:	3001      	adds	r0, #1
 800def2:	f000 80a9 	beq.w	800e048 <_vfiprintf_r+0x1f0>
 800def6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800def8:	445a      	add	r2, fp
 800defa:	9209      	str	r2, [sp, #36]	; 0x24
 800defc:	f89a 3000 	ldrb.w	r3, [sl]
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 80a1 	beq.w	800e048 <_vfiprintf_r+0x1f0>
 800df06:	2300      	movs	r3, #0
 800df08:	f04f 32ff 	mov.w	r2, #4294967295
 800df0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df10:	f10a 0a01 	add.w	sl, sl, #1
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	9307      	str	r3, [sp, #28]
 800df18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df1c:	931a      	str	r3, [sp, #104]	; 0x68
 800df1e:	4654      	mov	r4, sl
 800df20:	2205      	movs	r2, #5
 800df22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df26:	4854      	ldr	r0, [pc, #336]	; (800e078 <_vfiprintf_r+0x220>)
 800df28:	f7f2 f952 	bl	80001d0 <memchr>
 800df2c:	9a04      	ldr	r2, [sp, #16]
 800df2e:	b9d8      	cbnz	r0, 800df68 <_vfiprintf_r+0x110>
 800df30:	06d1      	lsls	r1, r2, #27
 800df32:	bf44      	itt	mi
 800df34:	2320      	movmi	r3, #32
 800df36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df3a:	0713      	lsls	r3, r2, #28
 800df3c:	bf44      	itt	mi
 800df3e:	232b      	movmi	r3, #43	; 0x2b
 800df40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df44:	f89a 3000 	ldrb.w	r3, [sl]
 800df48:	2b2a      	cmp	r3, #42	; 0x2a
 800df4a:	d015      	beq.n	800df78 <_vfiprintf_r+0x120>
 800df4c:	9a07      	ldr	r2, [sp, #28]
 800df4e:	4654      	mov	r4, sl
 800df50:	2000      	movs	r0, #0
 800df52:	f04f 0c0a 	mov.w	ip, #10
 800df56:	4621      	mov	r1, r4
 800df58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df5c:	3b30      	subs	r3, #48	; 0x30
 800df5e:	2b09      	cmp	r3, #9
 800df60:	d94d      	bls.n	800dffe <_vfiprintf_r+0x1a6>
 800df62:	b1b0      	cbz	r0, 800df92 <_vfiprintf_r+0x13a>
 800df64:	9207      	str	r2, [sp, #28]
 800df66:	e014      	b.n	800df92 <_vfiprintf_r+0x13a>
 800df68:	eba0 0308 	sub.w	r3, r0, r8
 800df6c:	fa09 f303 	lsl.w	r3, r9, r3
 800df70:	4313      	orrs	r3, r2
 800df72:	9304      	str	r3, [sp, #16]
 800df74:	46a2      	mov	sl, r4
 800df76:	e7d2      	b.n	800df1e <_vfiprintf_r+0xc6>
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	1d19      	adds	r1, r3, #4
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	9103      	str	r1, [sp, #12]
 800df80:	2b00      	cmp	r3, #0
 800df82:	bfbb      	ittet	lt
 800df84:	425b      	neglt	r3, r3
 800df86:	f042 0202 	orrlt.w	r2, r2, #2
 800df8a:	9307      	strge	r3, [sp, #28]
 800df8c:	9307      	strlt	r3, [sp, #28]
 800df8e:	bfb8      	it	lt
 800df90:	9204      	strlt	r2, [sp, #16]
 800df92:	7823      	ldrb	r3, [r4, #0]
 800df94:	2b2e      	cmp	r3, #46	; 0x2e
 800df96:	d10c      	bne.n	800dfb2 <_vfiprintf_r+0x15a>
 800df98:	7863      	ldrb	r3, [r4, #1]
 800df9a:	2b2a      	cmp	r3, #42	; 0x2a
 800df9c:	d134      	bne.n	800e008 <_vfiprintf_r+0x1b0>
 800df9e:	9b03      	ldr	r3, [sp, #12]
 800dfa0:	1d1a      	adds	r2, r3, #4
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	9203      	str	r2, [sp, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	bfb8      	it	lt
 800dfaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfae:	3402      	adds	r4, #2
 800dfb0:	9305      	str	r3, [sp, #20]
 800dfb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e088 <_vfiprintf_r+0x230>
 800dfb6:	7821      	ldrb	r1, [r4, #0]
 800dfb8:	2203      	movs	r2, #3
 800dfba:	4650      	mov	r0, sl
 800dfbc:	f7f2 f908 	bl	80001d0 <memchr>
 800dfc0:	b138      	cbz	r0, 800dfd2 <_vfiprintf_r+0x17a>
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	eba0 000a 	sub.w	r0, r0, sl
 800dfc8:	2240      	movs	r2, #64	; 0x40
 800dfca:	4082      	lsls	r2, r0
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	3401      	adds	r4, #1
 800dfd0:	9304      	str	r3, [sp, #16]
 800dfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd6:	4829      	ldr	r0, [pc, #164]	; (800e07c <_vfiprintf_r+0x224>)
 800dfd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfdc:	2206      	movs	r2, #6
 800dfde:	f7f2 f8f7 	bl	80001d0 <memchr>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d03f      	beq.n	800e066 <_vfiprintf_r+0x20e>
 800dfe6:	4b26      	ldr	r3, [pc, #152]	; (800e080 <_vfiprintf_r+0x228>)
 800dfe8:	bb1b      	cbnz	r3, 800e032 <_vfiprintf_r+0x1da>
 800dfea:	9b03      	ldr	r3, [sp, #12]
 800dfec:	3307      	adds	r3, #7
 800dfee:	f023 0307 	bic.w	r3, r3, #7
 800dff2:	3308      	adds	r3, #8
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff8:	443b      	add	r3, r7
 800dffa:	9309      	str	r3, [sp, #36]	; 0x24
 800dffc:	e768      	b.n	800ded0 <_vfiprintf_r+0x78>
 800dffe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e002:	460c      	mov	r4, r1
 800e004:	2001      	movs	r0, #1
 800e006:	e7a6      	b.n	800df56 <_vfiprintf_r+0xfe>
 800e008:	2300      	movs	r3, #0
 800e00a:	3401      	adds	r4, #1
 800e00c:	9305      	str	r3, [sp, #20]
 800e00e:	4619      	mov	r1, r3
 800e010:	f04f 0c0a 	mov.w	ip, #10
 800e014:	4620      	mov	r0, r4
 800e016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e01a:	3a30      	subs	r2, #48	; 0x30
 800e01c:	2a09      	cmp	r2, #9
 800e01e:	d903      	bls.n	800e028 <_vfiprintf_r+0x1d0>
 800e020:	2b00      	cmp	r3, #0
 800e022:	d0c6      	beq.n	800dfb2 <_vfiprintf_r+0x15a>
 800e024:	9105      	str	r1, [sp, #20]
 800e026:	e7c4      	b.n	800dfb2 <_vfiprintf_r+0x15a>
 800e028:	fb0c 2101 	mla	r1, ip, r1, r2
 800e02c:	4604      	mov	r4, r0
 800e02e:	2301      	movs	r3, #1
 800e030:	e7f0      	b.n	800e014 <_vfiprintf_r+0x1bc>
 800e032:	ab03      	add	r3, sp, #12
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	462a      	mov	r2, r5
 800e038:	4b12      	ldr	r3, [pc, #72]	; (800e084 <_vfiprintf_r+0x22c>)
 800e03a:	a904      	add	r1, sp, #16
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7fd fba7 	bl	800b790 <_printf_float>
 800e042:	4607      	mov	r7, r0
 800e044:	1c78      	adds	r0, r7, #1
 800e046:	d1d6      	bne.n	800dff6 <_vfiprintf_r+0x19e>
 800e048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e04a:	07d9      	lsls	r1, r3, #31
 800e04c:	d405      	bmi.n	800e05a <_vfiprintf_r+0x202>
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	059a      	lsls	r2, r3, #22
 800e052:	d402      	bmi.n	800e05a <_vfiprintf_r+0x202>
 800e054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e056:	f7fe f905 	bl	800c264 <__retarget_lock_release_recursive>
 800e05a:	89ab      	ldrh	r3, [r5, #12]
 800e05c:	065b      	lsls	r3, r3, #25
 800e05e:	f53f af1d 	bmi.w	800de9c <_vfiprintf_r+0x44>
 800e062:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e064:	e71c      	b.n	800dea0 <_vfiprintf_r+0x48>
 800e066:	ab03      	add	r3, sp, #12
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	462a      	mov	r2, r5
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <_vfiprintf_r+0x22c>)
 800e06e:	a904      	add	r1, sp, #16
 800e070:	4630      	mov	r0, r6
 800e072:	f7fd fe31 	bl	800bcd8 <_printf_i>
 800e076:	e7e4      	b.n	800e042 <_vfiprintf_r+0x1ea>
 800e078:	0800e8c4 	.word	0x0800e8c4
 800e07c:	0800e8ce 	.word	0x0800e8ce
 800e080:	0800b791 	.word	0x0800b791
 800e084:	0800de35 	.word	0x0800de35
 800e088:	0800e8ca 	.word	0x0800e8ca

0800e08c <__swbuf_r>:
 800e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08e:	460e      	mov	r6, r1
 800e090:	4614      	mov	r4, r2
 800e092:	4605      	mov	r5, r0
 800e094:	b118      	cbz	r0, 800e09e <__swbuf_r+0x12>
 800e096:	6a03      	ldr	r3, [r0, #32]
 800e098:	b90b      	cbnz	r3, 800e09e <__swbuf_r+0x12>
 800e09a:	f7fd ffcb 	bl	800c034 <__sinit>
 800e09e:	69a3      	ldr	r3, [r4, #24]
 800e0a0:	60a3      	str	r3, [r4, #8]
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	071a      	lsls	r2, r3, #28
 800e0a6:	d525      	bpl.n	800e0f4 <__swbuf_r+0x68>
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	b31b      	cbz	r3, 800e0f4 <__swbuf_r+0x68>
 800e0ac:	6823      	ldr	r3, [r4, #0]
 800e0ae:	6922      	ldr	r2, [r4, #16]
 800e0b0:	1a98      	subs	r0, r3, r2
 800e0b2:	6963      	ldr	r3, [r4, #20]
 800e0b4:	b2f6      	uxtb	r6, r6
 800e0b6:	4283      	cmp	r3, r0
 800e0b8:	4637      	mov	r7, r6
 800e0ba:	dc04      	bgt.n	800e0c6 <__swbuf_r+0x3a>
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7ff fdd2 	bl	800dc68 <_fflush_r>
 800e0c4:	b9e0      	cbnz	r0, 800e100 <__swbuf_r+0x74>
 800e0c6:	68a3      	ldr	r3, [r4, #8]
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	60a3      	str	r3, [r4, #8]
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	1c5a      	adds	r2, r3, #1
 800e0d0:	6022      	str	r2, [r4, #0]
 800e0d2:	701e      	strb	r6, [r3, #0]
 800e0d4:	6962      	ldr	r2, [r4, #20]
 800e0d6:	1c43      	adds	r3, r0, #1
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d004      	beq.n	800e0e6 <__swbuf_r+0x5a>
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	07db      	lsls	r3, r3, #31
 800e0e0:	d506      	bpl.n	800e0f0 <__swbuf_r+0x64>
 800e0e2:	2e0a      	cmp	r6, #10
 800e0e4:	d104      	bne.n	800e0f0 <__swbuf_r+0x64>
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f7ff fdbd 	bl	800dc68 <_fflush_r>
 800e0ee:	b938      	cbnz	r0, 800e100 <__swbuf_r+0x74>
 800e0f0:	4638      	mov	r0, r7
 800e0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f000 f806 	bl	800e108 <__swsetup_r>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d0d5      	beq.n	800e0ac <__swbuf_r+0x20>
 800e100:	f04f 37ff 	mov.w	r7, #4294967295
 800e104:	e7f4      	b.n	800e0f0 <__swbuf_r+0x64>
	...

0800e108 <__swsetup_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4b2a      	ldr	r3, [pc, #168]	; (800e1b4 <__swsetup_r+0xac>)
 800e10c:	4605      	mov	r5, r0
 800e10e:	6818      	ldr	r0, [r3, #0]
 800e110:	460c      	mov	r4, r1
 800e112:	b118      	cbz	r0, 800e11c <__swsetup_r+0x14>
 800e114:	6a03      	ldr	r3, [r0, #32]
 800e116:	b90b      	cbnz	r3, 800e11c <__swsetup_r+0x14>
 800e118:	f7fd ff8c 	bl	800c034 <__sinit>
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e122:	0718      	lsls	r0, r3, #28
 800e124:	d422      	bmi.n	800e16c <__swsetup_r+0x64>
 800e126:	06d9      	lsls	r1, r3, #27
 800e128:	d407      	bmi.n	800e13a <__swsetup_r+0x32>
 800e12a:	2309      	movs	r3, #9
 800e12c:	602b      	str	r3, [r5, #0]
 800e12e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e132:	81a3      	strh	r3, [r4, #12]
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	e034      	b.n	800e1a4 <__swsetup_r+0x9c>
 800e13a:	0758      	lsls	r0, r3, #29
 800e13c:	d512      	bpl.n	800e164 <__swsetup_r+0x5c>
 800e13e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e140:	b141      	cbz	r1, 800e154 <__swsetup_r+0x4c>
 800e142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e146:	4299      	cmp	r1, r3
 800e148:	d002      	beq.n	800e150 <__swsetup_r+0x48>
 800e14a:	4628      	mov	r0, r5
 800e14c:	f7fe ff32 	bl	800cfb4 <_free_r>
 800e150:	2300      	movs	r3, #0
 800e152:	6363      	str	r3, [r4, #52]	; 0x34
 800e154:	89a3      	ldrh	r3, [r4, #12]
 800e156:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e15a:	81a3      	strh	r3, [r4, #12]
 800e15c:	2300      	movs	r3, #0
 800e15e:	6063      	str	r3, [r4, #4]
 800e160:	6923      	ldr	r3, [r4, #16]
 800e162:	6023      	str	r3, [r4, #0]
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	f043 0308 	orr.w	r3, r3, #8
 800e16a:	81a3      	strh	r3, [r4, #12]
 800e16c:	6923      	ldr	r3, [r4, #16]
 800e16e:	b94b      	cbnz	r3, 800e184 <__swsetup_r+0x7c>
 800e170:	89a3      	ldrh	r3, [r4, #12]
 800e172:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e17a:	d003      	beq.n	800e184 <__swsetup_r+0x7c>
 800e17c:	4621      	mov	r1, r4
 800e17e:	4628      	mov	r0, r5
 800e180:	f000 f88c 	bl	800e29c <__smakebuf_r>
 800e184:	89a0      	ldrh	r0, [r4, #12]
 800e186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e18a:	f010 0301 	ands.w	r3, r0, #1
 800e18e:	d00a      	beq.n	800e1a6 <__swsetup_r+0x9e>
 800e190:	2300      	movs	r3, #0
 800e192:	60a3      	str	r3, [r4, #8]
 800e194:	6963      	ldr	r3, [r4, #20]
 800e196:	425b      	negs	r3, r3
 800e198:	61a3      	str	r3, [r4, #24]
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	b943      	cbnz	r3, 800e1b0 <__swsetup_r+0xa8>
 800e19e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1a2:	d1c4      	bne.n	800e12e <__swsetup_r+0x26>
 800e1a4:	bd38      	pop	{r3, r4, r5, pc}
 800e1a6:	0781      	lsls	r1, r0, #30
 800e1a8:	bf58      	it	pl
 800e1aa:	6963      	ldrpl	r3, [r4, #20]
 800e1ac:	60a3      	str	r3, [r4, #8]
 800e1ae:	e7f4      	b.n	800e19a <__swsetup_r+0x92>
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e7f7      	b.n	800e1a4 <__swsetup_r+0x9c>
 800e1b4:	2000007c 	.word	0x2000007c

0800e1b8 <_raise_r>:
 800e1b8:	291f      	cmp	r1, #31
 800e1ba:	b538      	push	{r3, r4, r5, lr}
 800e1bc:	4604      	mov	r4, r0
 800e1be:	460d      	mov	r5, r1
 800e1c0:	d904      	bls.n	800e1cc <_raise_r+0x14>
 800e1c2:	2316      	movs	r3, #22
 800e1c4:	6003      	str	r3, [r0, #0]
 800e1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e1ce:	b112      	cbz	r2, 800e1d6 <_raise_r+0x1e>
 800e1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1d4:	b94b      	cbnz	r3, 800e1ea <_raise_r+0x32>
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 f830 	bl	800e23c <_getpid_r>
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4601      	mov	r1, r0
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1e6:	f000 b817 	b.w	800e218 <_kill_r>
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d00a      	beq.n	800e204 <_raise_r+0x4c>
 800e1ee:	1c59      	adds	r1, r3, #1
 800e1f0:	d103      	bne.n	800e1fa <_raise_r+0x42>
 800e1f2:	2316      	movs	r3, #22
 800e1f4:	6003      	str	r3, [r0, #0]
 800e1f6:	2001      	movs	r0, #1
 800e1f8:	e7e7      	b.n	800e1ca <_raise_r+0x12>
 800e1fa:	2400      	movs	r4, #0
 800e1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e200:	4628      	mov	r0, r5
 800e202:	4798      	blx	r3
 800e204:	2000      	movs	r0, #0
 800e206:	e7e0      	b.n	800e1ca <_raise_r+0x12>

0800e208 <raise>:
 800e208:	4b02      	ldr	r3, [pc, #8]	; (800e214 <raise+0xc>)
 800e20a:	4601      	mov	r1, r0
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f7ff bfd3 	b.w	800e1b8 <_raise_r>
 800e212:	bf00      	nop
 800e214:	2000007c 	.word	0x2000007c

0800e218 <_kill_r>:
 800e218:	b538      	push	{r3, r4, r5, lr}
 800e21a:	4d07      	ldr	r5, [pc, #28]	; (800e238 <_kill_r+0x20>)
 800e21c:	2300      	movs	r3, #0
 800e21e:	4604      	mov	r4, r0
 800e220:	4608      	mov	r0, r1
 800e222:	4611      	mov	r1, r2
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	f7f5 fd27 	bl	8003c78 <_kill>
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	d102      	bne.n	800e234 <_kill_r+0x1c>
 800e22e:	682b      	ldr	r3, [r5, #0]
 800e230:	b103      	cbz	r3, 800e234 <_kill_r+0x1c>
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	bd38      	pop	{r3, r4, r5, pc}
 800e236:	bf00      	nop
 800e238:	20000ff0 	.word	0x20000ff0

0800e23c <_getpid_r>:
 800e23c:	f7f5 bd14 	b.w	8003c68 <_getpid>

0800e240 <_malloc_usable_size_r>:
 800e240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e244:	1f18      	subs	r0, r3, #4
 800e246:	2b00      	cmp	r3, #0
 800e248:	bfbc      	itt	lt
 800e24a:	580b      	ldrlt	r3, [r1, r0]
 800e24c:	18c0      	addlt	r0, r0, r3
 800e24e:	4770      	bx	lr

0800e250 <__swhatbuf_r>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	460c      	mov	r4, r1
 800e254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e258:	2900      	cmp	r1, #0
 800e25a:	b096      	sub	sp, #88	; 0x58
 800e25c:	4615      	mov	r5, r2
 800e25e:	461e      	mov	r6, r3
 800e260:	da0d      	bge.n	800e27e <__swhatbuf_r+0x2e>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e268:	f04f 0100 	mov.w	r1, #0
 800e26c:	bf0c      	ite	eq
 800e26e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e272:	2340      	movne	r3, #64	; 0x40
 800e274:	2000      	movs	r0, #0
 800e276:	6031      	str	r1, [r6, #0]
 800e278:	602b      	str	r3, [r5, #0]
 800e27a:	b016      	add	sp, #88	; 0x58
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	466a      	mov	r2, sp
 800e280:	f000 f848 	bl	800e314 <_fstat_r>
 800e284:	2800      	cmp	r0, #0
 800e286:	dbec      	blt.n	800e262 <__swhatbuf_r+0x12>
 800e288:	9901      	ldr	r1, [sp, #4]
 800e28a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e28e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e292:	4259      	negs	r1, r3
 800e294:	4159      	adcs	r1, r3
 800e296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e29a:	e7eb      	b.n	800e274 <__swhatbuf_r+0x24>

0800e29c <__smakebuf_r>:
 800e29c:	898b      	ldrh	r3, [r1, #12]
 800e29e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a0:	079d      	lsls	r5, r3, #30
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	d507      	bpl.n	800e2b8 <__smakebuf_r+0x1c>
 800e2a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	6123      	str	r3, [r4, #16]
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	6163      	str	r3, [r4, #20]
 800e2b4:	b002      	add	sp, #8
 800e2b6:	bd70      	pop	{r4, r5, r6, pc}
 800e2b8:	ab01      	add	r3, sp, #4
 800e2ba:	466a      	mov	r2, sp
 800e2bc:	f7ff ffc8 	bl	800e250 <__swhatbuf_r>
 800e2c0:	9900      	ldr	r1, [sp, #0]
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7fe fee9 	bl	800d09c <_malloc_r>
 800e2ca:	b948      	cbnz	r0, 800e2e0 <__smakebuf_r+0x44>
 800e2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d0:	059a      	lsls	r2, r3, #22
 800e2d2:	d4ef      	bmi.n	800e2b4 <__smakebuf_r+0x18>
 800e2d4:	f023 0303 	bic.w	r3, r3, #3
 800e2d8:	f043 0302 	orr.w	r3, r3, #2
 800e2dc:	81a3      	strh	r3, [r4, #12]
 800e2de:	e7e3      	b.n	800e2a8 <__smakebuf_r+0xc>
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	6020      	str	r0, [r4, #0]
 800e2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	6163      	str	r3, [r4, #20]
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	6120      	str	r0, [r4, #16]
 800e2f2:	b15b      	cbz	r3, 800e30c <__smakebuf_r+0x70>
 800e2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f000 f81d 	bl	800e338 <_isatty_r>
 800e2fe:	b128      	cbz	r0, 800e30c <__smakebuf_r+0x70>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	f023 0303 	bic.w	r3, r3, #3
 800e306:	f043 0301 	orr.w	r3, r3, #1
 800e30a:	81a3      	strh	r3, [r4, #12]
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	431d      	orrs	r5, r3
 800e310:	81a5      	strh	r5, [r4, #12]
 800e312:	e7cf      	b.n	800e2b4 <__smakebuf_r+0x18>

0800e314 <_fstat_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	; (800e334 <_fstat_r+0x20>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	4611      	mov	r1, r2
 800e320:	602b      	str	r3, [r5, #0]
 800e322:	f7f5 fd08 	bl	8003d36 <_fstat>
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	d102      	bne.n	800e330 <_fstat_r+0x1c>
 800e32a:	682b      	ldr	r3, [r5, #0]
 800e32c:	b103      	cbz	r3, 800e330 <_fstat_r+0x1c>
 800e32e:	6023      	str	r3, [r4, #0]
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	bf00      	nop
 800e334:	20000ff0 	.word	0x20000ff0

0800e338 <_isatty_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d06      	ldr	r5, [pc, #24]	; (800e354 <_isatty_r+0x1c>)
 800e33c:	2300      	movs	r3, #0
 800e33e:	4604      	mov	r4, r0
 800e340:	4608      	mov	r0, r1
 800e342:	602b      	str	r3, [r5, #0]
 800e344:	f7f5 fd07 	bl	8003d56 <_isatty>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d102      	bne.n	800e352 <_isatty_r+0x1a>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	b103      	cbz	r3, 800e352 <_isatty_r+0x1a>
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	20000ff0 	.word	0x20000ff0

0800e358 <_init>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	bf00      	nop
 800e35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35e:	bc08      	pop	{r3}
 800e360:	469e      	mov	lr, r3
 800e362:	4770      	bx	lr

0800e364 <_fini>:
 800e364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e366:	bf00      	nop
 800e368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e36a:	bc08      	pop	{r3}
 800e36c:	469e      	mov	lr, r3
 800e36e:	4770      	bx	lr
